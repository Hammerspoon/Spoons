[
  {
    "desc": "Just another clock, floating above all",
    "name": "AClock",
    "type": "Module"
  },
  {
    "desc": "Show AClock, if already showing, just hide it.",
    "module": "AClock",
    "name": "toggleShow",
    "type": "Method"
  },
  {
    "desc": "Use Bing daily picture as your wallpaper, automatically.",
    "name": "BingDaily",
    "type": "Module"
  },
  {
    "desc": "Display pop-up with Homebrew Formula info, or open their URL",
    "name": "BrewInfo",
    "type": "Module"
  },
  {
    "desc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
    "module": "BrewInfo",
    "name": "brew_info_delay_sec",
    "type": "Variable"
  },
  {
    "desc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
    "module": "BrewInfo",
    "name": "brew_info_style",
    "type": "Variable"
  },
  {
    "desc": "If `true`, and no text is currently selected in the terminal, issue a double-click to select the text below the cursor, and use that as the input to `brew info`. See also `BrewInfo.select_text_modifiers`. Defaults to `true`.",
    "module": "BrewInfo",
    "name": "select_text_if_needed",
    "type": "Variable"
  },
  {
    "desc": "Table containing the modifiers to be used together with a double-click when `BrewInfo.select_text_if_needed` is true. Defaults to `{cmd = true, shift = true}` to issue a Cmd-Shift-double-click, which will select a continuous non-space string in Terminal and iTerm2.",
    "module": "BrewInfo",
    "name": "select_text_modifiers",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for BrewInfo",
    "module": "BrewInfo",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Opens the homepage for package `pkg`, as obtained from the `homepage` field in `brew <subcommand> cat <pkg>`",
    "module": "BrewInfo",
    "name": "openBrewURL",
    "type": "Method"
  },
  {
    "desc": "Opens the homepage for the currently-selected package, as obtained from the `homepage` field in `brew <subcommand> cat <pkg>`",
    "module": "BrewInfo",
    "name": "openBrewURLCurSel",
    "type": "Method"
  },
  {
    "desc": "Displays an alert with the output of `brew <subcommand> info <pkg>`",
    "module": "BrewInfo",
    "name": "showBrewInfo",
    "type": "Method"
  },
  {
    "desc": "Display `brew <subcommand> info` using the selected text as the package name",
    "module": "BrewInfo",
    "name": "showBrewInfoCurSel",
    "type": "Method"
  },
  {
    "desc": "Prevent the screen from going to sleep",
    "name": "Caffeine",
    "type": "Module"
  },
  {
    "desc": "Binds hotkeys for Caffeine",
    "module": "Caffeine",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Starts Caffeine",
    "module": "Caffeine",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops Caffeine",
    "module": "Caffeine",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "A calendar inset into the desktop",
    "name": "Calendar",
    "type": "Module"
  },
  {
    "desc": "A circleclock inset into the desktop",
    "name": "CircleClock",
    "type": "Module"
  },
  {
    "desc": "Keep a history of the clipboard for text entries and manage the entries with a context menu",
    "name": "ClipboardTool",
    "type": "Module"
  },
  {
    "desc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
    "module": "ClipboardTool",
    "name": "deduplicate",
    "type": "Variable"
  },
  {
    "desc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
    "module": "ClipboardTool",
    "name": "frequency",
    "type": "Variable"
  },
  {
    "desc": "How many items to keep on history. Defaults to 100",
    "module": "ClipboardTool",
    "name": "hist_size",
    "type": "Variable"
  },
  {
    "desc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `ClipboardTool.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
    "module": "ClipboardTool",
    "name": "honor_ignoredidentifiers",
    "type": "Variable"
  },
  {
    "desc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua. Default value (don't modify unless you know what you are doing):",
    "module": "ClipboardTool",
    "name": "ignoredIdentifiers",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "ClipboardTool",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "maximum size of a text entry",
    "module": "ClipboardTool",
    "name": "max_entry_size",
    "type": "Variable"
  },
  {
    "desc": "Whether to check the maximum size of an entry. Defaults to `false`.",
    "module": "ClipboardTool",
    "name": "max_size",
    "type": "Variable"
  },
  {
    "desc": "String to show in the menubar if `ClipboardTool.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)",
    "module": "ClipboardTool",
    "name": "menubar_title",
    "type": "Variable"
  },
  {
    "desc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
    "module": "ClipboardTool",
    "name": "paste_on_select",
    "type": "Variable"
  },
  {
    "desc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
    "module": "ClipboardTool",
    "name": "show_in_menubar",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for ClipboardTool",
    "module": "ClipboardTool",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "If the pasteboard has changed, we add the current item to our history and update the counter",
    "module": "ClipboardTool",
    "name": "checkAndStorePasteboard",
    "type": "Method"
  },
  {
    "desc": "Clears the clipboard and history",
    "module": "ClipboardTool",
    "name": "clearAll",
    "type": "Method"
  },
  {
    "desc": "Clears the last added to the history",
    "module": "ClipboardTool",
    "name": "clearLastItem",
    "type": "Method"
  },
  {
    "desc": "Add the given string to the history",
    "module": "ClipboardTool",
    "name": "pasteboardToClipboard",
    "type": "Method"
  },
  {
    "desc": "Verify whether the pasteboard contents matches one of the values in `ClipboardTool.ignoredIdentifiers`",
    "module": "ClipboardTool",
    "name": "shouldBeStored",
    "type": "Method"
  },
  {
    "desc": "Display the current clipboard list in a chooser",
    "module": "ClipboardTool",
    "name": "showClipboard",
    "type": "Method"
  },
  {
    "desc": "Start the clipboard history collector",
    "module": "ClipboardTool",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Show/hide the clipboard list, depending on its current state",
    "module": "ClipboardTool",
    "name": "toggleClipboard",
    "type": "Method"
  },
  {
    "desc": "Toggle the value of `ClipboardTool.paste_on_select`",
    "module": "ClipboardTool",
    "name": "togglePasteOnSelect",
    "type": "Method"
  },
  {
    "desc": "Show the content of system clipboard",
    "name": "ClipShow",
    "type": "Module"
  },
  {
    "desc": "Open content of the clipboard in default browser with specific refstr.",
    "module": "ClipShow",
    "name": "openInBrowserWithRef",
    "type": "Method"
  },
  {
    "desc": "Open local file with specific command.",
    "module": "ClipShow",
    "name": "openWithCommand",
    "type": "Method"
  },
  {
    "desc": "Restore the lastsession of system clipboard",
    "module": "ClipShow",
    "name": "restoreLastSession",
    "type": "Method"
  },
  {
    "desc": "Save content of current canvas to a file, the default location is `~/Desktop/`.",
    "module": "ClipShow",
    "name": "saveToFile",
    "type": "Method"
  },
  {
    "desc": "Save clipboard session so we can restore it later",
    "module": "ClipShow",
    "name": "saveToSession",
    "type": "Method"
  },
  {
    "desc": "Process the content of system clipboard and show/hide the canvas",
    "module": "ClipShow",
    "name": "toggleShow",
    "type": "Method"
  },
  {
    "desc": "Show a color sample/picker",
    "name": "ColorPicker",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "ColorPicker",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Title to show in the menubar if `show_in_menubar` is true. Defaults to `\"\\u{1F308}\"`, which is the [Rainbow Emoji](http://emojipedia.org/rainbow/)",
    "module": "ColorPicker",
    "name": "menubar_title",
    "type": "Variable"
  },
  {
    "desc": "If `true`, show an icon in the menubar to trigger the color picker",
    "module": "ColorPicker",
    "name": "show_in_menubar",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for ColorPicker",
    "module": "ColorPicker",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Toggle display on the screen of a grid with all the colors in the given colortable",
    "module": "ColorPicker",
    "name": "toggleColorSamples",
    "type": "Method"
  },
  {
    "desc": "This spoon lets execute commands from other spoon by a chooser.",
    "name": "Commander",
    "type": "Module"
  },
  {
    "desc": "This is the table which stores all the commands",
    "module": "Commander",
    "name": "commandTable",
    "type": "Variable"
  },
  {
    "desc": "If you want to switch to a layout when enabled chooser,",
    "module": "Commander",
    "name": "forceLayout",
    "type": "Variable"
  },
  {
    "desc": "If you want to switch to a method when enabled chooser,",
    "module": "Commander",
    "name": "forceMethod",
    "type": "Variable"
  },
  {
    "desc": "This list contains all the ignored function names,",
    "module": "Commander",
    "name": "ignoredCommandList",
    "type": "Variable"
  },
  {
    "desc": "Add a command to Commander.commandTable",
    "module": "Commander",
    "name": "addCommand",
    "type": "Function"
  },
  {
    "desc": "This function simply set Commander.commandTable to {},",
    "module": "Commander",
    "name": "resetCommandTable",
    "type": "Function"
  },
  {
    "desc": "This function shows the command chooser.",
    "module": "Commander",
    "name": "show",
    "type": "Function"
  },
  {
    "desc": "Tiny countdown with visual indicator",
    "name": "CountDown",
    "type": "Module"
  },
  {
    "desc": "Pause or resume the existing countdown.",
    "module": "CountDown",
    "name": "pauseOrResume",
    "type": "Method"
  },
  {
    "desc": "Set the progress of visual indicator to `progress`.",
    "module": "CountDown",
    "name": "setProgress",
    "type": "Method"
  },
  {
    "desc": "Start a countdown for `minutes` minutes immediately. Calling this method again will kill the existing countdown instance.",
    "module": "CountDown",
    "name": "startFor",
    "type": "Method"
  },
  {
    "desc": "Show a popup window with the translation of the currently selected text",
    "name": "DeepLTranslate",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "DeepLTranslate",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "If true, the popup window will close after translated text is copied to pasteboard. Defaults to `true`",
    "module": "DeepLTranslate",
    "name": "popup_close_after_copy",
    "type": "Variable"
  },
  {
    "desc": "If true, pressing ESC on the popup window will close it. Defaults to `true`",
    "module": "DeepLTranslate",
    "name": "popup_close_on_escape",
    "type": "Variable"
  },
  {
    "desc": "`hs.geometry` object representing the size to use for the translation popup window. Defaults to `hs.geometry.size(770, 610)`.",
    "module": "DeepLTranslate",
    "name": "popup_size",
    "type": "Variable"
  },
  {
    "desc": "Value representing the window style to be used for the translation popup window. This value needs to be a valid argument to [`hs.webview.setStyle()`](http://www.hammerspoon.org/docs/hs.webview.html#windowStyle) (i.e. a combination of values from [`hs.webview.windowMasks`](http://www.hammerspoon.org/docs/hs.webview.html#windowMasks[]). Default value: `hs.webview.windowMasks.utility|hs.webview.windowMasks.HUD|hs.webview.windowMasks.titled|hs.webview.windowMasks.closable`",
    "module": "DeepLTranslate",
    "name": "popup_style",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for DeepLTranslate",
    "module": "DeepLTranslate",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Display a translation popup with the translation of the given text",
    "module": "DeepLTranslate",
    "name": "translatePopup",
    "type": "Method"
  },
  {
    "desc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages",
    "module": "DeepLTranslate",
    "name": "translateSelectionPopup",
    "type": "Method"
  },
  {
    "desc": "Let users choose emojis by name/keyword",
    "name": "Emojis",
    "type": "Module"
  },
  {
    "desc": "Binds hotkeys for Emojis",
    "module": "Emojis",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Add some missing hotkeys for opening a note in Evernote, and for common tag sets",
    "name": "EvernoteOpenAndTag",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "EvernoteOpenAndTag",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for EvernoteOpenAndTag",
    "module": "EvernoteOpenAndTag",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Returns `true` if Evernote is the frontmost application",
    "module": "EvernoteOpenAndTag",
    "name": "evernoteIsFrontmost",
    "type": "Method"
  },
  {
    "desc": "Apply the given tags to the selected Evernote notes",
    "module": "EvernoteOpenAndTag",
    "name": "inlineTagCurrentNote",
    "type": "Method"
  },
  {
    "desc": "Open the current Evernote note in a new window and apply the given tags to it",
    "module": "EvernoteOpenAndTag",
    "name": "openAndTagCurrentNote",
    "type": "Method"
  },
  {
    "desc": "Open the currently-selected Evernote notes in new windows.",
    "module": "EvernoteOpenAndTag",
    "name": "openCurrentNoteInWindow",
    "type": "Method"
  },
  {
    "desc": "Assigns tags to the currently-selected Evernote notes",
    "module": "EvernoteOpenAndTag",
    "name": "tagCurrentNote",
    "type": "Method"
  },
  {
    "desc": "Show a fading-and-zooming image in the center of the screen",
    "name": "FadeLogo",
    "type": "Module"
  },
  {
    "desc": "Number of seconds over which to fade in the image. Defaults to 0.3.",
    "module": "FadeLogo",
    "name": "fade_in_time",
    "type": "Variable"
  },
  {
    "desc": "Number of seconds over which to fade out the image. Defaults to 0.5.",
    "module": "FadeLogo",
    "name": "fade_out_time",
    "type": "Variable"
  },
  {
    "desc": "Image to display. Must be an `hs.image` object. Defaults to `hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon)` (the Hammerspoon app icon)",
    "module": "FadeLogo",
    "name": "image",
    "type": "Variable"
  },
  {
    "desc": "Initial transparency of the image. Defaults to 1.0.",
    "module": "FadeLogo",
    "name": "image_alpha",
    "type": "Variable"
  },
  {
    "desc": "`hs.geometry` object specifying the initial size of the image to display in the center of the screen. The image object will be resizes proportionally to fit in this size. Defaults to `hs.geometry.size(w=200, h=200)`",
    "module": "FadeLogo",
    "name": "image_size",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "FadeLogo",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Number of seconds to leave the image on the screen when `start()` is called.",
    "module": "FadeLogo",
    "name": "run_time",
    "type": "Variable"
  },
  {
    "desc": "Do zoom-and-fade if `true`, otherwise do a regular fade",
    "module": "FadeLogo",
    "name": "zoom",
    "type": "Variable"
  },
  {
    "desc": "Factor by which to scale the image at every iteration during the zoom-and-fade. Defaults to 1.1.",
    "module": "FadeLogo",
    "name": "zoom_scale_factor",
    "type": "Variable"
  },
  {
    "desc": "Seconds between the zooming iterations",
    "module": "FadeLogo",
    "name": "zoom_scale_timer",
    "type": "Variable"
  },
  {
    "desc": "Hide and delete the canvas",
    "module": "FadeLogo",
    "name": "delete",
    "type": "Method"
  },
  {
    "desc": "Hide the image without zoom, fading it out over `fade_out_time` seconds",
    "module": "FadeLogo",
    "name": "hide",
    "type": "Method"
  },
  {
    "desc": "Display the image, fading it in over `fade_in_time` seconds",
    "module": "FadeLogo",
    "name": "show",
    "type": "Method"
  },
  {
    "desc": "Show the image, wait `run_time` seconds, and then zoom-and-fade it out.",
    "module": "FadeLogo",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Zoom-and-fade the image over `fade_out_time` seconds",
    "module": "FadeLogo",
    "name": "zoom_and_fade",
    "type": "Method"
  },
  {
    "desc": "Use Fn + `h/l/j/k` as arrow keys, `y/u/i/o` as mouse wheel, `,/.` as left/right click.",
    "name": "FnMate",
    "type": "Module"
  },
  {
    "desc": "A horizonal calendar inset into the desktop",
    "name": "HCalendar",
    "type": "Module"
  },
  {
    "desc": "Play/pause music players when headphones are connected/disconnected",
    "name": "HeadphoneAutoPause",
    "type": "Module"
  },
  {
    "desc": "Boolean value indicating if music should be automatically resumed when headphones are plugged in again. Only works if music was automatically paused when headphones were unplugged.",
    "module": "HeadphoneAutoPause",
    "name": "autoResume",
    "type": "Variable"
  },
  {
    "desc": "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause/unpause that application in response to the headphone being plugged/unplugged. The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:",
    "module": "HeadphoneAutoPause",
    "name": "control",
    "type": "Variable"
  },
  {
    "desc": "Table containing control functions for each application to control.",
    "module": "HeadphoneAutoPause",
    "name": "controlfns",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "HeadphoneAutoPause",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Callback function to use as an audio device watcher, to pause/unpause the application on headphones plugged/unplugged",
    "module": "HeadphoneAutoPause",
    "name": "audiodevwatch",
    "type": "Method"
  },
  {
    "desc": "Generate the most common set of application control definition.",
    "module": "HeadphoneAutoPause",
    "name": "defaultControlFns",
    "type": "Method"
  },
  {
    "desc": "Start headphone detection on all audio devices that support it",
    "module": "HeadphoneAutoPause",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stop headphone detection",
    "module": "HeadphoneAutoPause",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Override High Sierra behaviour and send all media keys (play/prev/next) to iTunes",
    "name": "HighSierraiTunesMediaFix",
    "type": "Module"
  },
  {
    "desc": "Starts the hs.eventtap that powers this Spoon",
    "module": "HighSierraiTunesMediaFix",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops the hs.eventtap that powers this Spoon",
    "module": "HighSierraiTunesMediaFix",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Communicate with [aria2](https://github.com/aria2/aria2), an interactive panel included.",
    "name": "HSaria2",
    "type": "Module"
  },
  {
    "desc": "How many items should be created on aria2 panel? Defaults to 5.",
    "module": "HSaria2",
    "name": "max_items",
    "type": "Variable"
  },
  {
    "desc": "How often should HSaria2 retrieve data from RPC server? Defaults to 1 (second).",
    "module": "HSaria2",
    "name": "refresh_interval",
    "type": "Variable"
  },
  {
    "desc": "Try connect to `hostaddr` with `secret`. If succeed, they will become default values for following-up oprations.",
    "module": "HSaria2",
    "name": "connectToHost",
    "type": "Method"
  },
  {
    "desc": "Create new regular/bt/metalink task, and send notification when done.",
    "module": "HSaria2",
    "name": "newTask",
    "type": "Method"
  },
  {
    "desc": "Send a command to `hostaddr`, only limited commands are supported.",
    "module": "HSaria2",
    "name": "sendCommand",
    "type": "Method"
  },
  {
    "desc": "Toggle the display of aria2 panel. The panel allows users to interact with aria2, add new tasks, pause them, or remove, purge … etc.",
    "module": "HSaria2",
    "name": "togglePanel",
    "type": "Method"
  },
  {
    "desc": "Hammerspoon Search",
    "name": "HSearch",
    "type": "Module"
  },
  {
    "desc": "Load new sources from `HSearch.search_path`, the search_path defaults to `~/.hammerspoon/private/hsearch_dir` and the HSearch Spoon directory. Only useful for debugging purposes.",
    "module": "HSearch",
    "name": "loadSources",
    "type": "Method"
  },
  {
    "desc": "Trigger new source according to `hs.chooser`'s query string and keyword. Only useful for debugging purposes.",
    "module": "HSearch",
    "name": "switchSource",
    "type": "Method"
  },
  {
    "desc": "Toggle the display of HSearch",
    "module": "HSearch",
    "name": "toggleShow",
    "type": "Method"
  },
  {
    "desc": "Display Keybindings registered with bindHotkeys() and Spoons ",
    "name": "HSKeybindings",
    "type": "Module"
  },
  {
    "desc": "Hide the cheatsheet webview",
    "module": "HSKeybindings",
    "name": "hide",
    "type": "Method"
  },
  {
    "desc": "Show current application's keybindings in a webview",
    "module": "HSKeybindings",
    "name": "show",
    "type": "Method"
  },
  {
    "desc": "Keybindings cheatsheet for current application",
    "name": "KSheet",
    "type": "Module"
  },
  {
    "desc": "Hide the cheatsheet webview",
    "module": "KSheet",
    "name": "hide",
    "type": "Method"
  },
  {
    "desc": "Show current application's keybindings in a webview",
    "module": "KSheet",
    "name": "show",
    "type": "Method"
  },
  {
    "desc": "Show a popup window with the currently selected word in lexicon, notes, online help",
    "name": "LookupSelection",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "LookupSelection",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for LookupSelection",
    "module": "LookupSelection",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages",
    "module": "LookupSelection",
    "name": "openLexicon",
    "type": "Method"
  },
  {
    "desc": "Color the menubar according to the current keyboard layout",
    "name": "MenubarFlag",
    "type": "Module"
  },
  {
    "desc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
    "module": "MenubarFlag",
    "name": "allScreens",
    "type": "Variable"
  },
  {
    "desc": "Table that contains the configuration of indicator colors",
    "module": "MenubarFlag",
    "name": "colors",
    "type": "Variable"
  },
  {
    "desc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
    "module": "MenubarFlag",
    "name": "indicatorAlpha",
    "type": "Variable"
  },
  {
    "desc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
    "module": "MenubarFlag",
    "name": "indicatorHeight",
    "type": "Variable"
  },
  {
    "desc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
    "module": "MenubarFlag",
    "name": "indicatorInAllSpaces",
    "type": "Variable"
  },
  {
    "desc": "Number to indicate how frequently (in seconds) should the menubar indicator be updated. Defaults to 1.0.",
    "module": "MenubarFlag",
    "name": "timerFreq",
    "type": "Variable"
  },
  {
    "desc": "Draw the indicators corresponding to the given layout name",
    "module": "MenubarFlag",
    "name": "drawIndicators",
    "type": "Method"
  },
  {
    "desc": "Draw indicators for the current keyboard method or layout",
    "module": "MenubarFlag",
    "name": "getLayoutAndDrawindicators",
    "type": "Method"
  },
  {
    "desc": "Start the keyboard layout watcher to draw the menubar indicators.",
    "module": "MenubarFlag",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Remove indicators and stop the keyboard layout watcher",
    "module": "MenubarFlag",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "With this script you will be able to move the window in halves and in corners using your keyboard and mainly using arrows. You would also be able to resize them by thirds, quarters, or halves.",
    "name": "MiroWindowsManager",
    "type": "Module"
  },
  {
    "desc": "The sizes that the window can have in full-screen. ",
    "module": "MiroWindowsManager",
    "name": "fullScreenSizes",
    "type": "Variable"
  },
  {
    "desc": "The screen's size using `hs.grid.setGrid()`",
    "module": "MiroWindowsManager",
    "name": "GRID",
    "type": "Variable"
  },
  {
    "desc": "The sizes that the window can have. ",
    "module": "MiroWindowsManager",
    "name": "sizes",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for Miro's Windows Manager",
    "module": "MiroWindowsManager",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Modal keybindings environment management. Just an wrapper of `hs.hotkey.modal`.",
    "name": "ModalMgr",
    "type": "Module"
  },
  {
    "desc": "Activate all modal environment in `idList`.",
    "module": "ModalMgr",
    "name": "activate",
    "type": "Method"
  },
  {
    "desc": "Deactivate modal environments in `idList`.",
    "module": "ModalMgr",
    "name": "deactivate",
    "type": "Method"
  },
  {
    "desc": "Deactivate all active modal environments.",
    "module": "ModalMgr",
    "name": "deactivateAll",
    "type": "Method"
  },
  {
    "desc": "Create a new modal keybindings environment",
    "module": "ModalMgr",
    "name": "new",
    "type": "Method"
  },
  {
    "desc": "Toggle the cheatsheet display of current modal environments's keybindings.",
    "module": "ModalMgr",
    "name": "toggleCheatsheet",
    "type": "Method"
  },
  {
    "desc": "Displays a list of mounted volumes and a pie chart for each indicating free space on the desktop",
    "name": "MountedVolumes",
    "type": "Module"
  },
  {
    "desc": "A table, as defined in `hs.drawing.color`, specifying the color of the volume lists border. Defaults to `{ alpha = .5 }`",
    "module": "MountedVolumes",
    "name": "backgroundBorder",
    "type": "Variable"
  },
  {
    "desc": "A table, as defined in `hs.drawing.color`, specifying the color of the volume lists background. Defaults to `{ alpha = .7, white = .5 }`",
    "module": "MountedVolumes",
    "name": "backgroundColor",
    "type": "Variable"
  },
  {
    "desc": "A table, as defined in `hs.drawing.color`, specifying the color to use for the in use portion of the volume's capacity pie chart. Defaults to `hs.drawing.color.x11.orangered`",
    "module": "MountedVolumes",
    "name": "capacityColor",
    "type": "Variable"
  },
  {
    "desc": "A number, default 120, specifying how often in seconds the free space on mounted volumes should be polled for current usage data.",
    "module": "MountedVolumes",
    "name": "checkInterval",
    "type": "Variable"
  },
  {
    "desc": "A number, default 5, specifying how rounded the corners of the volume list background should be.",
    "module": "MountedVolumes",
    "name": "cornerRadius",
    "type": "Variable"
  },
  {
    "desc": "A boolean, default true, indicating whether the eject button displayed next to removable volumes is enabled.",
    "module": "MountedVolumes",
    "name": "enableEjectButton",
    "type": "Variable"
  },
  {
    "desc": "A table, as defined in `hs.drawing.color`, specifying the color to use for the free portion of the volume's capacity pie chart. Defaults to `hs.drawing.color.x11.mediumspringgreen`",
    "module": "MountedVolumes",
    "name": "freeColor",
    "type": "Variable"
  },
  {
    "desc": "A boolean, default true, indicating whether the displayed list grows downwards or upwards as more volumes are mounted.",
    "module": "MountedVolumes",
    "name": "growsDownwards",
    "type": "Variable"
  },
  {
    "desc": "A table specifying the location on the screen of the starting corner of the display. Defaults to `{ x = 20, y = 22 }`.",
    "module": "MountedVolumes",
    "name": "location",
    "type": "Variable"
  },
  {
    "desc": "A table specifying the style as defined in `hs.styledtext` to display the volume name and usage details with. Defaults to:",
    "module": "MountedVolumes",
    "name": "textStyle",
    "type": "Variable"
  },
  {
    "desc": "Boolean, default false, indicating whether capacity is displayed in SI units (1 GB = 10^9 bytes) or Gibibytes (1 GiB = 2^30 bytes).",
    "module": "MountedVolumes",
    "name": "unitsInSI",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for MountedVolumes",
    "module": "MountedVolumes",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Hide the volumes panel on the background and stop watching for volume changes",
    "module": "MountedVolumes",
    "name": "hide",
    "type": "Method"
  },
  {
    "desc": "Display the volumes panel on the background and update it as volumes are mounted and unmounted.",
    "module": "MountedVolumes",
    "name": "show",
    "type": "Method"
  },
  {
    "desc": "Draws a circle around the mouse pointer when a hotkey is pressed",
    "name": "MouseCircle",
    "type": "Module"
  },
  {
    "desc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
    "module": "MouseCircle",
    "name": "color",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for MouseCircle",
    "module": "MouseCircle",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Draws a circle around the mouse",
    "module": "MouseCircle",
    "name": "show",
    "type": "Method"
  },
  {
    "desc": "Generate a password and copy to the clipboard.",
    "name": "PasswordGenerator",
    "type": "Module"
  },
  {
    "desc": "Function used to generate passwords",
    "module": "PasswordGenerator",
    "name": "password_generator_function",
    "type": "Variable"
  },
  {
    "desc": "Length of generated passwords",
    "module": "PasswordGenerator",
    "name": "password_length",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for PasswordGenerator",
    "module": "PasswordGenerator",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Generates a password and copies to clipboard",
    "module": "PasswordGenerator",
    "name": "copyPassword",
    "type": "Method"
  },
  {
    "desc": "Generates a password and types it",
    "module": "PasswordGenerator",
    "name": "pastePassword",
    "type": "Method"
  },
  {
    "desc": "Show a popup window with the translation of the currently selected (or other) text",
    "name": "PopupTranslateSelection",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "PopupTranslateSelection",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "If true, pressing ESC on the popup window will close it. Defaults to `true`",
    "module": "PopupTranslateSelection",
    "name": "popup_close_on_escape",
    "type": "Variable"
  },
  {
    "desc": "`hs.geometry` object representing the size to use for the translation popup window. Defaults to `hs.geometry.size(770, 610)`.",
    "module": "PopupTranslateSelection",
    "name": "popup_size",
    "type": "Variable"
  },
  {
    "desc": "Value representing the window style to be used for the translation popup window. This value needs to be a valid argument to [`hs.webview.setStyle()`](http://www.hammerspoon.org/docs/hs.webview.html#windowStyle) (i.e. a combination of values from [`hs.webview.windowMasks`](http://www.hammerspoon.org/docs/hs.webview.html#windowMasks[]). Default value: `hs.webview.windowMasks.utility|hs.webview.windowMasks.HUD|hs.webview.windowMasks.titled|hs.webview.windowMasks.closable`",
    "module": "PopupTranslateSelection",
    "name": "popup_style",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for PopupTranslateSelection",
    "module": "PopupTranslateSelection",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Display a translation popup with the translation of the given text between the specified languages",
    "module": "PopupTranslateSelection",
    "name": "translatePopup",
    "type": "Method"
  },
  {
    "desc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages",
    "module": "PopupTranslateSelection",
    "name": "translateSelectionPopup",
    "type": "Method"
  },
  {
    "desc": "A spoon that let you bind sequential bindings.",
    "name": "RecursiveBinder",
    "type": "Module"
  },
  {
    "desc": "key to abort, default to {keyNone, 'escape'}",
    "module": "RecursiveBinder",
    "name": "escapeKey",
    "type": "Variable"
  },
  {
    "desc": "Number of entries each line of helper. Default to 5.",
    "module": "RecursiveBinder",
    "name": "helperEntryEachLine",
    "type": "Variable"
  },
  {
    "desc": "Length of each entry in char. Default to 20.",
    "module": "RecursiveBinder",
    "name": "helperEntryLengthInChar",
    "type": "Variable"
  },
  {
    "desc": "format of helper, the helper is just a hs.alert",
    "module": "RecursiveBinder",
    "name": "helperFormat",
    "type": "Variable"
  },
  {
    "desc": "The mapping used to display modifiers on helper.",
    "module": "RecursiveBinder",
    "name": "helperModifierMapping",
    "type": "Variable"
  },
  {
    "desc": "whether to show helper, can be true of false",
    "module": "RecursiveBinder",
    "name": "showBindHelper",
    "type": "Variable"
  },
  {
    "desc": "Bind sequential keys by a nested keymap.",
    "module": "RecursiveBinder",
    "name": "recursiveBind",
    "type": "Method"
  },
  {
    "desc": "this function simply return a table with empty modifiers",
    "module": "RecursiveBinder",
    "name": "singleKey",
    "type": "Method"
  },
  {
    "desc": "Adds a hotkey to reload the hammerspoon configuration, and a pathwatcher to automatically reload on changes.",
    "name": "ReloadConfiguration",
    "type": "Module"
  },
  {
    "desc": "List of directories to watch for changes, defaults to hs.configdir",
    "module": "ReloadConfiguration",
    "name": "watch_paths",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for ReloadConfiguration",
    "module": "ReloadConfiguration",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Start ReloadConfiguration",
    "module": "ReloadConfiguration",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Give your screens rounded corners",
    "name": "RoundedCorners",
    "type": "Module"
  },
  {
    "desc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
    "module": "RoundedCorners",
    "name": "allScreens",
    "type": "Variable"
  },
  {
    "desc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
    "module": "RoundedCorners",
    "name": "level",
    "type": "Variable"
  },
  {
    "desc": "Controls the radius of the rounded corners, in points. Defaults to 6",
    "module": "RoundedCorners",
    "name": "radius",
    "type": "Variable"
  },
  {
    "desc": "Starts RoundedCorners",
    "module": "RoundedCorners",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops RoundedCorners",
    "module": "RoundedCorners",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Pluggable launch bar",
    "name": "Seal",
    "type": "Module"
  },
  {
    "desc": "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `/usr/bin/open` command.",
    "module": "Seal",
    "name": "always_open_with_safari",
    "type": "Variable"
  },
  {
    "desc": "List of directories where Seal will look for plugins. Defaults to `~/.hammerspoon/seal_plugins/` and the Seal Spoon directory.",
    "module": "Seal",
    "name": "plugin_search_paths",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for Seal",
    "module": "Seal",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Loads a plugin from a given file",
    "module": "Seal",
    "name": "loadPluginFromFile",
    "type": "Method"
  },
  {
    "desc": "Loads a list of Seal plugins",
    "module": "Seal",
    "name": "loadPlugins",
    "type": "Method"
  },
  {
    "desc": "Refresh the list of commands provided by all the currently loaded plugins.",
    "module": "Seal",
    "name": "refreshAllCommands",
    "type": "Method"
  },
  {
    "desc": "Refresh the list of commands provided by the given plugin.",
    "module": "Seal",
    "name": "refreshCommandsForPlugin",
    "type": "Method"
  },
  {
    "desc": "Shows the Seal UI",
    "module": "Seal",
    "name": "show",
    "type": "Method"
  },
  {
    "desc": "Starts Seal",
    "module": "Seal",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops Seal",
    "module": "Seal",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Shows or hides the Seal UI",
    "module": "Seal",
    "name": "toggle",
    "type": "Method"
  },
  {
    "desc": "Allow accessing user-defined bookmarks and arbitrary actions from Seal.",
    "name": "Seal.plugins.useractions",
    "type": "Module"
  },
  {
    "desc": "",
    "module": "Seal.plugins.useractions",
    "name": "actions",
    "type": "Variable"
  },
  {
    "desc": "",
    "module": "Seal.plugins.useractions",
    "name": "get_favicon",
    "type": "Variable"
  },
  {
    "desc": "Handles \"send current item to OmniFocus\" for multiple applications",
    "name": "SendToOmniFocus",
    "type": "Module"
  },
  {
    "desc": "Table containing application handlers for sending the current item to OmniFocus.",
    "module": "SendToOmniFocus",
    "name": "actions",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "SendToOmniFocus",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
    "module": "SendToOmniFocus",
    "name": "notifications",
    "type": "Variable"
  },
  {
    "desc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
    "module": "SendToOmniFocus",
    "name": "quickentrydialog",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for SendToOmniFocus",
    "module": "SendToOmniFocus",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Register a new application handler",
    "module": "SendToOmniFocus",
    "name": "registerApplication",
    "type": "Method"
  },
  {
    "desc": "Send current item in current application to OmniFocus by triggering the appropriate handler.",
    "module": "SendToOmniFocus",
    "name": "sendCurrentItem",
    "type": "Method"
  },
  {
    "desc": "Creates a semitransparent overlay to reduce screen brightness.",
    "name": "Shade",
    "type": "Module"
  },
  {
    "desc": "Flag for Shade status, 'false' means shade off, 'true' means on.",
    "module": "Shade",
    "name": "shadeIsOn",
    "type": "Variable"
  },
  {
    "desc": "Contains the alpha (transparency) of the overlay, from 0.0 (completely",
    "module": "Shade",
    "name": "shadeTransparency",
    "type": "Variable"
  },
  {
    "desc": "Turns shade on/off",
    "module": "Shade",
    "name": "toggleShade",
    "type": "Function"
  },
  {
    "desc": "Binds hotkeys for Shade",
    "module": "Shade",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Sets up the Spoon",
    "module": "Shade",
    "name": "init",
    "type": "Method"
  },
  {
    "desc": "Turn the shade on, darkening the screen",
    "module": "Shade",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Turn the shade off, brightening the screen",
    "module": "Shade",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Menubar netspeed meter",
    "name": "SpeedMenu",
    "type": "Module"
  },
  {
    "desc": "Redetect the active interface, darkmode …And redraw everything.",
    "module": "SpeedMenu",
    "name": "rescan",
    "type": "Method"
  },
  {
    "desc": "Install and manage Spoons and Spoon repositories",
    "name": "SpoonInstall",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "SpoonInstall",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Table containing the list of available Spoon repositories. The key",
    "module": "SpoonInstall",
    "name": "repos",
    "type": "Variable"
  },
  {
    "desc": "If `true`, `andUse()` will update repos and install packages synchronously. Defaults to `false`.",
    "module": "SpoonInstall",
    "name": "use_syncinstall",
    "type": "Variable"
  },
  {
    "desc": "Declaratively install, load and configure a Spoon",
    "module": "SpoonInstall",
    "name": "andUse",
    "type": "Method"
  },
  {
    "desc": "Asynchronously install a Spoon from a registered repository",
    "module": "SpoonInstall",
    "name": "asyncInstallSpoonFromRepo",
    "type": "Method"
  },
  {
    "desc": "Asynchronously download a Spoon zip file and install it.",
    "module": "SpoonInstall",
    "name": "asyncInstallSpoonFromZipURL",
    "type": "Method"
  },
  {
    "desc": "Asynchronously fetch the information about the contents of a Spoon repository",
    "module": "SpoonInstall",
    "name": "asyncUpdateRepo",
    "type": "Method"
  },
  {
    "desc": "Synchronously install a Spoon from a registered repository",
    "module": "SpoonInstall",
    "name": "installSpoonFromRepo",
    "type": "Method"
  },
  {
    "desc": "Synchronously download a Spoon zip file and install it.",
    "module": "SpoonInstall",
    "name": "installSpoonFromZipURL",
    "type": "Method"
  },
  {
    "desc": "Return a sorted list of registered Spoon repositories",
    "module": "SpoonInstall",
    "name": "repolist",
    "type": "Method"
  },
  {
    "desc": "Search repositories for a pattern",
    "module": "SpoonInstall",
    "name": "search",
    "type": "Method"
  },
  {
    "desc": "Synchronously fetch the information about the contents of all Spoon repositories registered in `SpoonInstall.repos`",
    "module": "SpoonInstall",
    "name": "updateAllRepos",
    "type": "Method"
  },
  {
    "desc": "Synchronously fetch the information about the contents of a Spoon repository",
    "module": "SpoonInstall",
    "name": "updateRepo",
    "type": "Method"
  },
  {
    "desc": "Keep a history of the clipboard, only for text entries",
    "name": "TextClipboardHistory",
    "type": "Module"
  },
  {
    "desc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
    "module": "TextClipboardHistory",
    "name": "deduplicate",
    "type": "Variable"
  },
  {
    "desc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
    "module": "TextClipboardHistory",
    "name": "frequency",
    "type": "Variable"
  },
  {
    "desc": "How many items to keep on history. Defaults to 100",
    "module": "TextClipboardHistory",
    "name": "hist_size",
    "type": "Variable"
  },
  {
    "desc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
    "module": "TextClipboardHistory",
    "name": "honor_ignoredidentifiers",
    "type": "Variable"
  },
  {
    "desc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua. Default value (don't modify unless you know what you are doing):",
    "module": "TextClipboardHistory",
    "name": "ignoredIdentifiers",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "TextClipboardHistory",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)",
    "module": "TextClipboardHistory",
    "name": "menubar_title",
    "type": "Variable"
  },
  {
    "desc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
    "module": "TextClipboardHistory",
    "name": "paste_on_select",
    "type": "Variable"
  },
  {
    "desc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
    "module": "TextClipboardHistory",
    "name": "show_in_menubar",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for TextClipboardHistory",
    "module": "TextClipboardHistory",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "If the pasteboard has changed, we add the current item to our history and update the counter",
    "module": "TextClipboardHistory",
    "name": "checkAndStorePasteboard",
    "type": "Method"
  },
  {
    "desc": "Clears the clipboard and history",
    "module": "TextClipboardHistory",
    "name": "clearAll",
    "type": "Method"
  },
  {
    "desc": "Clears the last added to the history",
    "module": "TextClipboardHistory",
    "name": "clearLastItem",
    "type": "Method"
  },
  {
    "desc": "Add the given string to the history",
    "module": "TextClipboardHistory",
    "name": "pasteboardToClipboard",
    "type": "Method"
  },
  {
    "desc": "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
    "module": "TextClipboardHistory",
    "name": "shouldBeStored",
    "type": "Method"
  },
  {
    "desc": "Display the current clipboard list in a chooser",
    "module": "TextClipboardHistory",
    "name": "showClipboard",
    "type": "Method"
  },
  {
    "desc": "Start the clipboard history collector",
    "module": "TextClipboardHistory",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Show/hide the clipboard list, depending on its current state",
    "module": "TextClipboardHistory",
    "name": "toggleClipboard",
    "type": "Method"
  },
  {
    "desc": "Toggle the value of `TextClipboardHistory.paste_on_select`",
    "module": "TextClipboardHistory",
    "name": "togglePasteOnSelect",
    "type": "Method"
  },
  {
    "desc": "A widget showing time flown in one year.",
    "name": "TimeFlow",
    "type": "Module"
  },
  {
    "desc": "Show Time Machine backup progress in a menubar indicator.",
    "name": "TimeMachineProgress",
    "type": "Module"
  },
  {
    "desc": "Image to use for the indicator. Defaults to the Time Machine application icon, obtained as `hs.image.imageFromAppBundle('com.apple.backup.launcher'):setSize({w=16,h=16})`.",
    "module": "TimeMachineProgress",
    "name": "backupIcon",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "TimeMachineProgress",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Integer specifying how often the indicator should be refreshed. Defaults to 5 seconds.",
    "module": "TimeMachineProgress",
    "name": "refresh_interval",
    "type": "Variable"
  },
  {
    "desc": "Update the indicator",
    "module": "TimeMachineProgress",
    "name": "refresh",
    "type": "Method"
  },
  {
    "desc": "Starts the indicator",
    "module": "TimeMachineProgress",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stops the indicator",
    "module": "TimeMachineProgress",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Toggle rotation on external screens",
    "name": "ToggleScreenRotation",
    "type": "Module"
  },
  {
    "desc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
    "module": "ToggleScreenRotation",
    "name": "rotating_angles",
    "type": "Variable"
  },
  {
    "desc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.",
    "module": "ToggleScreenRotation",
    "name": "screens_to_skip",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for ToggleScreenRotation.",
    "module": "ToggleScreenRotation",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Provide keybindings for muting/unmuting Skype or Skype for Business",
    "name": "ToggleSkypeMute",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "ToggleSkypeMute",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "If `true`, produce notifications when Skype is muted/unmuted. Defaults to `true`.",
    "module": "ToggleSkypeMute",
    "name": "notifications",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for ToggleSkypeMute",
    "module": "ToggleSkypeMute",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Toggle Skype between muted/unmuted, whether it is focused or not",
    "module": "ToggleSkypeMute",
    "name": "toggle",
    "type": "Method"
  },
  {
    "desc": "Handle \"archive current item\" for multiple applications using the same hotkey",
    "name": "UniversalArchive",
    "type": "Module"
  },
  {
    "desc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
    "module": "UniversalArchive",
    "name": "archive_notifications",
    "type": "Variable"
  },
  {
    "desc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
    "module": "UniversalArchive",
    "name": "evernote_archive_notebook",
    "type": "Variable"
  },
  {
    "desc": "In Evernote, archive is done by selectin \"Move note\" and then",
    "module": "UniversalArchive",
    "name": "evernote_delay_before_typing",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "UniversalArchive",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
    "module": "UniversalArchive",
    "name": "outlook_archive_folder",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for UniversalArchive",
    "module": "UniversalArchive",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Archive current note in Evernote.",
    "module": "UniversalArchive",
    "name": "evernoteArchive",
    "type": "Method"
  },
  {
    "desc": "Archive current message in Mail using the built-in Archive functionality",
    "module": "UniversalArchive",
    "name": "mailArchive",
    "type": "Method"
  },
  {
    "desc": "Archive current message in Outlook to the folder specified in",
    "module": "UniversalArchive",
    "name": "outlookArchive",
    "type": "Method"
  },
  {
    "desc": "Register a handler function for an application.",
    "module": "UniversalArchive",
    "name": "registerApplication",
    "type": "Method"
  },
  {
    "desc": "Archive current message in Spark using the built-in Archive functionality",
    "module": "UniversalArchive",
    "name": "sparkArchive",
    "type": "Method"
  },
  {
    "desc": "Main entry point for archiving an item. If a handler function is",
    "module": "UniversalArchive",
    "name": "universalArchive",
    "type": "Method"
  },
  {
    "desc": "Use unsplash images as wallpaper",
    "name": "UnsplashZ",
    "type": "Module"
  },
  {
    "desc": "Route URLs to different applications with pattern matching",
    "name": "URLDispatcher",
    "type": "Module"
  },
  {
    "desc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
    "module": "URLDispatcher",
    "name": "decode_slack_redir_urls",
    "type": "Variable"
  },
  {
    "desc": "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
    "module": "URLDispatcher",
    "name": "default_handler",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "URLDispatcher",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "URL dispatch rules.",
    "module": "URLDispatcher",
    "name": "url_patterns",
    "type": "Variable"
  },
  {
    "desc": "Dispatch a URL to an application according to the defined `url_patterns`.",
    "module": "URLDispatcher",
    "name": "dispatchURL",
    "type": "Method"
  },
  {
    "desc": "Start dispatching URLs according to the rules",
    "module": "URLDispatcher",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Receive notifications every time your wifi network changes.",
    "name": "WifiNotifier",
    "type": "Module"
  },
  {
    "desc": "Initialize the WifiNotifier spoon",
    "module": "WifiNotifier",
    "name": "init",
    "type": "Method"
  },
  {
    "desc": "Fires whenever the wifiWatcher detects an SSID change.",
    "module": "WifiNotifier",
    "name": "ssidChangedCallback",
    "type": "Method"
  },
  {
    "desc": "Starts the wifiNotifier",
    "module": "WifiNotifier",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Allow arbitrary actions when transitioning between SSIDs",
    "name": "WiFiTransitions",
    "type": "Module"
  },
  {
    "desc": "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:",
    "module": "WiFiTransitions",
    "name": "actions",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "WiFiTransitions",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Process the rules and execute any actions corresponding to the specified transition.",
    "module": "WiFiTransitions",
    "name": "processTransition",
    "type": "Method"
  },
  {
    "desc": "Start the WiFi watcher",
    "module": "WiFiTransitions",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Configure and assign hotkey for `hs.grid`",
    "name": "WindowGrid",
    "type": "Module"
  },
  {
    "desc": "Table containing a list of arguments to be passed to grid.setGrid(). Each element in the table is itself a table with 1-3 arguments as defined for [hs.grid.setGrid()](http://www.hammerspoon.org/docs/hs.grid.html#setGrid). Defaults to an empty list, which results in the default 3x3 grid for all screen from `hs.grid`.",
    "module": "WindowGrid",
    "name": "gridGeometries",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "WindowGrid",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for WindowGrid",
    "module": "WindowGrid",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Sets the grid configuration according to `WindowGrid.gridGeometries`.",
    "module": "WindowGrid",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Simple window movement and resizing, focusing on half- and third-of-screen sizes",
    "name": "WindowHalfsAndThirds",
    "type": "Module"
  },
  {
    "desc": "We don't want our undo frame cache filling all available memory. Let's clear it after it hasn't been used for a while.",
    "module": "WindowHalfsAndThirds",
    "name": "clear_cache_after_seconds",
    "type": "Variable"
  },
  {
    "desc": "Table containing a sample set of hotkeys that can be",
    "module": "WindowHalfsAndThirds",
    "name": "defaultHotkeys",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "WindowHalfsAndThirds",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "If `true`, set [setFrameCorrectness](http://www.hammerspoon.org/docs/hs.window.html#setFrameCorrectness) for some resizing operations which fail when the window extends beyonds screen boundaries. This may cause some jerkiness in the resizing, so experiment and determine if you need it. Defaults to `false`",
    "module": "WindowHalfsAndThirds",
    "name": "use_frame_correctness",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for WindowHalfsAndThirds",
    "module": "WindowHalfsAndThirds",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Center window on screen",
    "module": "WindowHalfsAndThirds",
    "name": "center",
    "type": "Method"
  },
  {
    "desc": "Make win larger than its current size",
    "module": "WindowHalfsAndThirds",
    "name": "larger",
    "type": "Method"
  },
  {
    "desc": "Resize to the left half of the screen.",
    "module": "WindowHalfsAndThirds",
    "name": "leftHalf",
    "type": "Method"
  },
  {
    "desc": "Make win smaller than its current size",
    "module": "WindowHalfsAndThirds",
    "name": "smaller",
    "type": "Method"
  },
  {
    "desc": "Toggle win between its normal size, and being maximized",
    "module": "WindowHalfsAndThirds",
    "name": "toggleMaximized",
    "type": "Method"
  },
  {
    "desc": "Undo window size changes for win if there've been any in WindowHalfsAndThirds.clear_cache_after_seconds",
    "module": "WindowHalfsAndThirds",
    "name": "undo",
    "type": "Method"
  },
  {
    "desc": "Move windows to other screens",
    "name": "WindowScreenLeftAndRight",
    "type": "Module"
  },
  {
    "desc": "Table containing a sample set of hotkeys that can be",
    "module": "WindowScreenLeftAndRight",
    "name": "defaultHotkeys",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "WindowScreenLeftAndRight",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for WindowScreenLeftAndRight",
    "module": "WindowScreenLeftAndRight",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Windows manipulation",
    "name": "WinWin",
    "type": "Module"
  },
  {
    "desc": "An integer specifying how many gridparts the screen should be divided into. Defaults to 30.",
    "module": "WinWin",
    "name": "gridparts",
    "type": "Variable"
  },
  {
    "desc": "Center the cursor on the focused window.",
    "module": "WinWin",
    "name": "centerCursor",
    "type": "Method"
  },
  {
    "desc": "Move and resize the focused window.",
    "module": "WinWin",
    "name": "moveAndResize",
    "type": "Method"
  },
  {
    "desc": "Move the focused window between all of the screens in the `direction`.",
    "module": "WinWin",
    "name": "moveToScreen",
    "type": "Method"
  },
  {
    "desc": "Move the focused window in the `direction` by on step. The step scale equals to the width/height of one gridpart.",
    "module": "WinWin",
    "name": "stepMove",
    "type": "Method"
  },
  {
    "desc": "Resize the focused window in the `direction` by on step.",
    "module": "WinWin",
    "name": "stepResize",
    "type": "Method"
  },
  {
    "desc": "Undo the last window manipulation. Only those \"moveAndResize\" manipulations can be undone.",
    "module": "WinWin",
    "name": "undo",
    "type": "Method"
  }
]