[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "BrewInfo:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for BrewInfo",
        "doc": "Binds hotkeys for BrewInfo\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show_brew_info - Show output of `brew info` using the selected text as package name\n  * open_brew_url - Open the homepage of the formula whose name is currently selected",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show_brew_info - Show output of `brew info` using the selected text as package name",
          "  * open_brew_url - Open the homepage of the formula whose name is currently selected"
        ],
        "signature": "BrewInfo:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:openBrewURL(pkg)",
        "desc": "Opens the homepage for Formula `pkg`",
        "doc": "Opens the homepage for Formula `pkg`\n\nParameters:\n * pkg - name of the package to query\n\nReturns:\n * The Spoon object",
        "name": "openBrewURL",
        "parameters": [
          " * pkg - name of the package to query"
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURL(pkg)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:openBrewURLCurSel()",
        "desc": "Display `brew info` using the selected text as the package name",
        "doc": "Display `brew info` using the selected text as the package name\n\nReturns:\n * The Spoon object",
        "name": "openBrewURLCurSel",
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURLCurSel()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfo(pkg)",
        "desc": "Displays an alert with the output of `brew info <pkg>`",
        "doc": "Displays an alert with the output of `brew info <pkg>`\n\nParameters:\n * pkg - name of the package to query\n\nReturns:\n * The Spoon object",
        "name": "showBrewInfo",
        "parameters": [
          " * pkg - name of the package to query"
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfo(pkg)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfoCurSel()",
        "desc": "Display `brew info` using the selected text as the package name",
        "doc": "Display `brew info` using the selected text as the package name\n\nReturns:\n * The Spoon object",
        "name": "showBrewInfoCurSel",
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfoCurSel()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "BrewInfo.brew_info_delay_sec",
        "desc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "doc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "name": "brew_info_delay_sec",
        "signature": "BrewInfo.brew_info_delay_sec",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo.brew_info_style",
        "desc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "doc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "name": "brew_info_style",
        "signature": "BrewInfo.brew_info_style",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Display pop-up with Homebrew Formula info, or open their URL",
    "doc": "Display pop-up with Homebrew Formula info, or open their URL\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip)\n\nYou can bind keys to automatically display the output of `brew\ninfo` of the currently-selected package name, or to open its\nhomepage. I use it to quickly explore new packages from the output\nof `brew update`.",
    "items": [
      {
        "def": "BrewInfo:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for BrewInfo",
        "doc": "Binds hotkeys for BrewInfo\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show_brew_info - Show output of `brew info` using the selected text as package name\n  * open_brew_url - Open the homepage of the formula whose name is currently selected",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show_brew_info - Show output of `brew info` using the selected text as package name",
          "  * open_brew_url - Open the homepage of the formula whose name is currently selected"
        ],
        "signature": "BrewInfo:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo.brew_info_delay_sec",
        "desc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "doc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "name": "brew_info_delay_sec",
        "signature": "BrewInfo.brew_info_delay_sec",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo.brew_info_style",
        "desc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "doc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "name": "brew_info_style",
        "signature": "BrewInfo.brew_info_style",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo:openBrewURL(pkg)",
        "desc": "Opens the homepage for Formula `pkg`",
        "doc": "Opens the homepage for Formula `pkg`\n\nParameters:\n * pkg - name of the package to query\n\nReturns:\n * The Spoon object",
        "name": "openBrewURL",
        "parameters": [
          " * pkg - name of the package to query"
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURL(pkg)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:openBrewURLCurSel()",
        "desc": "Display `brew info` using the selected text as the package name",
        "doc": "Display `brew info` using the selected text as the package name\n\nReturns:\n * The Spoon object",
        "name": "openBrewURLCurSel",
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURLCurSel()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfo(pkg)",
        "desc": "Displays an alert with the output of `brew info <pkg>`",
        "doc": "Displays an alert with the output of `brew info <pkg>`\n\nParameters:\n * pkg - name of the package to query\n\nReturns:\n * The Spoon object",
        "name": "showBrewInfo",
        "parameters": [
          " * pkg - name of the package to query"
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfo(pkg)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfoCurSel()",
        "desc": "Display `brew info` using the selected text as the package name",
        "doc": "Display `brew info` using the selected text as the package name\n\nReturns:\n * The Spoon object",
        "name": "showBrewInfoCurSel",
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfoCurSel()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "BrewInfo",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip)\n\nYou can bind keys to automatically display the output of `brew\ninfo` of the currently-selected package name, or to open its\nhomepage. I use it to quickly explore new packages from the output\nof `brew update`.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Caffeine:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Caffeine",
        "doc": "Binds hotkeys for Caffeine\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic\n\nReturns:\n * The Caffeine object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:start()",
        "desc": "Starts Caffeine",
        "doc": "Starts Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:stop()",
        "desc": "Stops Caffeine",
        "doc": "Stops Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "name": "stop",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Prevent the screen from going to sleep",
    "doc": "Prevent the screen from going to sleep\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip)",
    "items": [
      {
        "def": "Caffeine:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Caffeine",
        "doc": "Binds hotkeys for Caffeine\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic\n\nReturns:\n * The Caffeine object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:start()",
        "desc": "Starts Caffeine",
        "doc": "Starts Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:stop()",
        "desc": "Stops Caffeine",
        "doc": "Stops Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "name": "stop",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Caffeine",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Emojis:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Emojis",
        "doc": "Binds hotkeys for Emojis\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the emoji chooser\n\nReturns:\n * The Emojis object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * toggle - This will toggle the emoji chooser"
        ],
        "returns": [
          " * The Emojis object"
        ],
        "signature": "Emojis:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Let users choose emojis by name/keyword",
    "doc": "Let users choose emojis by name/keyword",
    "items": [
      {
        "def": "Emojis:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Emojis",
        "doc": "Binds hotkeys for Emojis\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the emoji chooser\n\nReturns:\n * The Emojis object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * toggle - This will toggle the emoji chooser"
        ],
        "returns": [
          " * The Emojis object"
        ],
        "signature": "Emojis:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Emojis",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MouseCircle:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for MouseCircle",
        "doc": "Binds hotkeys for MouseCircle\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will cause the mouse circle to be drawn",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show - This will cause the mouse circle to be drawn"
        ],
        "signature": "MouseCircle:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseCircle:show()",
        "desc": "Draws a circle around the mouse",
        "doc": "Draws a circle around the mouse\n\nParameters:\n * None\n\nReturns:\n * None",
        "name": "show",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "MouseCircle:show()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "MouseCircle.color",
        "desc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "doc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "name": "color",
        "signature": "MouseCircle.color",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Draws a circle around the mouse pointer when a hotkey is pressed",
    "doc": "Draws a circle around the mouse pointer when a hotkey is pressed\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip)",
    "items": [
      {
        "def": "MouseCircle:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for MouseCircle",
        "doc": "Binds hotkeys for MouseCircle\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will cause the mouse circle to be drawn",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show - This will cause the mouse circle to be drawn"
        ],
        "signature": "MouseCircle:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseCircle.color",
        "desc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "doc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "name": "color",
        "signature": "MouseCircle.color",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MouseCircle:show()",
        "desc": "Draws a circle around the mouse",
        "doc": "Draws a circle around the mouse\n\nParameters:\n * None\n\nReturns:\n * None",
        "name": "show",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "MouseCircle:show()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "MouseCircle",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "RoundedCorners:start()",
        "desc": "Starts RoundedCorners",
        "doc": "Starts RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly",
        "name": "start",
        "notes": [
          " * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "RoundedCorners:stop()",
        "desc": "Stops RoundedCorners",
        "doc": "Stops RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts",
        "name": "stop",
        "notes": [
          " * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "RoundedCorners.allScreens",
        "desc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "doc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "name": "allScreens",
        "signature": "RoundedCorners.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.level",
        "desc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "doc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "name": "level",
        "signature": "RoundedCorners.level",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.radius",
        "desc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "doc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "name": "radius",
        "signature": "RoundedCorners.radius",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Give your screens rounded corners",
    "doc": "Give your screens rounded corners\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip)",
    "items": [
      {
        "def": "RoundedCorners.allScreens",
        "desc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "doc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "name": "allScreens",
        "signature": "RoundedCorners.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.level",
        "desc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "doc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "name": "level",
        "signature": "RoundedCorners.level",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.radius",
        "desc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "doc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "name": "radius",
        "signature": "RoundedCorners.radius",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners:start()",
        "desc": "Starts RoundedCorners",
        "doc": "Starts RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly",
        "name": "start",
        "notes": [
          " * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "RoundedCorners:stop()",
        "desc": "Stops RoundedCorners",
        "doc": "Stops RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts",
        "name": "stop",
        "notes": [
          " * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "RoundedCorners",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Seal:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Seal",
        "doc": "Binds hotkeys for Seal\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will cause Seal's UI to be shown\n\nReturns:\n * The Seal object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show - This will cause Seal's UI to be shown"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:loadPlugins(plugins)",
        "desc": "Loads a list of Seal plugins",
        "doc": "Loads a list of Seal plugins\n\nParameters:\n * plugins - A list containing the names of plugins to load\n\nReturns:\n * The Seal object\n\nNotes:\n * The plugins live inside the Seal.spoon directory\n * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "name": "loadPlugins",
        "notes": [
          " * The plugins live inside the Seal.spoon directory",
          " * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * plugins - A list containing the names of plugins to load"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:loadPlugins(plugins)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:show()",
        "desc": "Shows the Seal UI",
        "doc": "Shows the Seal UI\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This may be useful if you wish to show Seal in response to something other than its hotkey",
        "name": "show",
        "notes": [
          " * This may be useful if you wish to show Seal in response to something other than its hotkey"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:start()",
        "desc": "Starts Seal",
        "doc": "Starts Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:stop()",
        "desc": "Stops Seal",
        "doc": "Stops Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)",
        "name": "stop",
        "notes": [
          " * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Pluggable launch bar",
    "doc": "Pluggable launch bar\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip)",
    "items": [
      {
        "def": "Seal:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Seal",
        "doc": "Binds hotkeys for Seal\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will cause Seal's UI to be shown\n\nReturns:\n * The Seal object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show - This will cause Seal's UI to be shown"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:loadPlugins(plugins)",
        "desc": "Loads a list of Seal plugins",
        "doc": "Loads a list of Seal plugins\n\nParameters:\n * plugins - A list containing the names of plugins to load\n\nReturns:\n * The Seal object\n\nNotes:\n * The plugins live inside the Seal.spoon directory\n * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "name": "loadPlugins",
        "notes": [
          " * The plugins live inside the Seal.spoon directory",
          " * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * plugins - A list containing the names of plugins to load"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:loadPlugins(plugins)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:show()",
        "desc": "Shows the Seal UI",
        "doc": "Shows the Seal UI\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This may be useful if you wish to show Seal in response to something other than its hotkey",
        "name": "show",
        "notes": [
          " * This may be useful if you wish to show Seal in response to something other than its hotkey"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:start()",
        "desc": "Starts Seal",
        "doc": "Starts Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:stop()",
        "desc": "Stops Seal",
        "doc": "Stops Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)",
        "name": "stop",
        "notes": [
          " * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Seal",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "SendToOmniFocus:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for SendToOmniFocus",
        "doc": "Binds hotkeys for SendToOmniFocus\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * send_to_omnifocus - file current item to OmniFocus.",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:",
          "  * send_to_omnifocus - file current item to OmniFocus."
        ],
        "signature": "SendToOmniFocus:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "desc": "Register a new application handler",
        "doc": "Register a new application handler\n\nParameters:\n * app - application name\n * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application.",
        "name": "registerApplication",
        "parameters": [
          " * app - application name",
          " * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application."
        ],
        "signature": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus:sendCurrentItem",
        "desc": "Send current item in current application to OmniFocus by triggering the appropriate handler.",
        "doc": "Send current item in current application to OmniFocus by triggering the appropriate handler.\n\nParamters:\n * None\n\nReturns:\n * The SendToOmniFocus object",
        "name": "sendCurrentItem",
        "returns": [
          " * The SendToOmniFocus object"
        ],
        "signature": "SendToOmniFocus:sendCurrentItem",
        "stripped_doc": "Paramters:\n * None",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "SendToOmniFocus.actions",
        "desc": "Table containing application handlers for sending the current item to OmniFocus.",
        "doc": "Table containing application handlers for sending the current item to OmniFocus.\nEach entry's key is the application name, and its value is another table with the following keys:\n * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".\n * One of the following, invoked to do the actual filing:\n   * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.\n   * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.\n   * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.\n   * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).\n\nThe built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.\nNew handlers can be registered using `SendToOmniFocus:registerApplication()`\n\nDefault value:\n```\n  {\n     [\"Microsoft Outlook\"] = {\n        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     },\n     Evernote = {\n        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),\n        itemname = \"note\"\n     },\n     [\"Google Chrome\"] = {\n        apptype = \"chromeapp\",\n        itemname = \"tab\"\n     },\n     Mail = {\n        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     }\n  }\n```",
        "name": "actions",
        "signature": "SendToOmniFocus.actions",
        "stripped_doc": "Each entry's key is the application name, and its value is another table with the following keys:\n * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".\n * One of the following, invoked to do the actual filing:\n   * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.\n   * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.\n   * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.\n   * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).\nThe built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.\nNew handlers can be registered using `SendToOmniFocus:registerApplication()`\nDefault value:\n```\n  {\n     [\"Microsoft Outlook\"] = {\n        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     },\n     Evernote = {\n        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),\n        itemname = \"note\"\n     },\n     [\"Google Chrome\"] = {\n        apptype = \"chromeapp\",\n        itemname = \"tab\"\n     },\n     Mail = {\n        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     }\n  }\n```",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "SendToOmniFocus.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.notifications",
        "desc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "doc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "name": "notifications",
        "signature": "SendToOmniFocus.notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.quickentrydialog",
        "desc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "doc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "name": "quickentrydialog",
        "signature": "SendToOmniFocus.quickentrydialog",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Handles \"send current item to OmniFocus\" for multiple applications",
    "doc": "Handles \"send current item to OmniFocus\" for multiple applications\n\nThe following applications are supported: out of the box: Outlook, Evernote, Mail, Chrome and any Chrome-based apps (such as SSBs created by [Epichrome](https://github.com/dmarmor/epichrome))\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip)",
    "items": [
      {
        "def": "SendToOmniFocus.actions",
        "desc": "Table containing application handlers for sending the current item to OmniFocus.",
        "doc": "Table containing application handlers for sending the current item to OmniFocus.\nEach entry's key is the application name, and its value is another table with the following keys:\n * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".\n * One of the following, invoked to do the actual filing:\n   * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.\n   * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.\n   * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.\n   * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).\n\nThe built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.\nNew handlers can be registered using `SendToOmniFocus:registerApplication()`\n\nDefault value:\n```\n  {\n     [\"Microsoft Outlook\"] = {\n        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     },\n     Evernote = {\n        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),\n        itemname = \"note\"\n     },\n     [\"Google Chrome\"] = {\n        apptype = \"chromeapp\",\n        itemname = \"tab\"\n     },\n     Mail = {\n        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     }\n  }\n```",
        "name": "actions",
        "signature": "SendToOmniFocus.actions",
        "stripped_doc": "Each entry's key is the application name, and its value is another table with the following keys:\n * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".\n * One of the following, invoked to do the actual filing:\n   * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.\n   * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.\n   * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.\n   * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).\nThe built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.\nNew handlers can be registered using `SendToOmniFocus:registerApplication()`\nDefault value:\n```\n  {\n     [\"Microsoft Outlook\"] = {\n        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     },\n     Evernote = {\n        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),\n        itemname = \"note\"\n     },\n     [\"Google Chrome\"] = {\n        apptype = \"chromeapp\",\n        itemname = \"tab\"\n     },\n     Mail = {\n        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     }\n  }\n```",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for SendToOmniFocus",
        "doc": "Binds hotkeys for SendToOmniFocus\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * send_to_omnifocus - file current item to OmniFocus.",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:",
          "  * send_to_omnifocus - file current item to OmniFocus."
        ],
        "signature": "SendToOmniFocus:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "SendToOmniFocus.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.notifications",
        "desc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "doc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "name": "notifications",
        "signature": "SendToOmniFocus.notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.quickentrydialog",
        "desc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "doc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "name": "quickentrydialog",
        "signature": "SendToOmniFocus.quickentrydialog",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "desc": "Register a new application handler",
        "doc": "Register a new application handler\n\nParameters:\n * app - application name\n * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application.",
        "name": "registerApplication",
        "parameters": [
          " * app - application name",
          " * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application."
        ],
        "signature": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus:sendCurrentItem",
        "desc": "Send current item in current application to OmniFocus by triggering the appropriate handler.",
        "doc": "Send current item in current application to OmniFocus by triggering the appropriate handler.\n\nParamters:\n * None\n\nReturns:\n * The SendToOmniFocus object",
        "name": "sendCurrentItem",
        "returns": [
          " * The SendToOmniFocus object"
        ],
        "signature": "SendToOmniFocus:sendCurrentItem",
        "stripped_doc": "Paramters:\n * None",
        "type": "Method"
      }
    ],
    "name": "SendToOmniFocus",
    "stripped_doc": "\nThe following applications are supported: out of the box: Outlook, Evernote, Mail, Chrome and any Chrome-based apps (such as SSBs created by [Epichrome](https://github.com/dmarmor/epichrome))\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "ToggleScreenRotation:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ToggleScreenRotation.",
        "doc": "Binds hotkeys for ToggleScreenRotation.\n\nParameters:\n * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen):\n   ```\n     [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" }\n   ```",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen):",
          "   ```",
          "     [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" }",
          "   ```"
        ],
        "signature": "ToggleScreenRotation:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "ToggleScreenRotation.rotating_angles",
        "desc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "doc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "name": "rotating_angles",
        "signature": "ToggleScreenRotation.rotating_angles",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ToggleScreenRotation.screens_to_skip",
        "desc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.",
        "doc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.\nDefaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs.",
        "name": "screens_to_skip",
        "signature": "ToggleScreenRotation.screens_to_skip",
        "stripped_doc": "Defaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs.",
        "type": "Variable"
      }
    ],
    "desc": "Toggle rotation on external screens",
    "doc": "Toggle rotation on external screens\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip)\n\nMakes the following simplifying assumptions:\n* That you only toggle between two positions for rotated/not\n  rotated (configured in `rotating_angles`, and which apply to all\n  screens)\n* That \"rotated\" means \"taller than wider\", for the purposes of\n  determining if the screen is rotated upon initialization.",
    "items": [
      {
        "def": "ToggleScreenRotation:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ToggleScreenRotation.",
        "doc": "Binds hotkeys for ToggleScreenRotation.\n\nParameters:\n * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen):\n   ```\n     [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" }\n   ```",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen):",
          "   ```",
          "     [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" }",
          "   ```"
        ],
        "signature": "ToggleScreenRotation:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ToggleScreenRotation.rotating_angles",
        "desc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "doc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "name": "rotating_angles",
        "signature": "ToggleScreenRotation.rotating_angles",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ToggleScreenRotation.screens_to_skip",
        "desc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.",
        "doc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.\nDefaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs.",
        "name": "screens_to_skip",
        "signature": "ToggleScreenRotation.screens_to_skip",
        "stripped_doc": "Defaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs.",
        "type": "Variable"
      }
    ],
    "name": "ToggleScreenRotation",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip)\n\nMakes the following simplifying assumptions:\n* That you only toggle between two positions for rotated/not\n  rotated (configured in `rotating_angles`, and which apply to all\n  screens)\n* That \"rotated\" means \"taller than wider\", for the purposes of\n  determining if the screen is rotated upon initialization.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "UniversalArchive:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for UniversalArchive",
        "doc": "Binds hotkeys for UniversalArchive\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.\n  * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations.",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.",
          "  * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations."
        ],
        "signature": "UniversalArchive:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:evernoteArchive(where)",
        "desc": "Archive current note in Evernote.",
        "doc": "Archive current note in Evernote.\n\nParameters:\n * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`.",
        "name": "evernoteArchive",
        "parameters": [
          " * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`."
        ],
        "signature": "UniversalArchive:evernoteArchive(where)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:mailArchive()",
        "desc": "Archive current message in Mail using the built-in Archive functionality",
        "doc": "Archive current message in Mail using the built-in Archive functionality\n\nParameters:\n * none",
        "name": "mailArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:mailArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:outlookArchive()",
        "desc": "Archive current message in Outlook to the folder specified in",
        "doc": "Archive current message in Outlook to the folder specified in\n`UniversalArchive.outlook_archive_folder`. The folder has to\nappear in the Message -> Move submenu for this to work. Since this\nsubmenu only lists the last few destination folders, you have to\nmove a message by hand the first time (or periodically if you\ndon't archive very often).\n\nParameters:\n * none",
        "name": "outlookArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:outlookArchive()",
        "stripped_doc": "`UniversalArchive.outlook_archive_folder`. The folder has to\nappear in the Message -> Move submenu for this to work. Since this\nsubmenu only lists the last few destination folders, you have to\nmove a message by hand the first time (or periodically if you\ndon't archive very often).",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:registerApplication(appname, fn)",
        "desc": "Register a handler function for an application.",
        "doc": "Register a handler function for an application.\n\nParameters:\n * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.\n * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:\n   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.\n   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler.",
        "name": "registerApplication",
        "parameters": [
          " * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.",
          " * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:",
          "   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.",
          "   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler."
        ],
        "signature": "UniversalArchive:registerApplication(appname, fn)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:sparkArchive()",
        "desc": "Archive current message in Spark using the built-in Archive functionality",
        "doc": "Archive current message in Spark using the built-in Archive functionality\n\nParameters:\n * none",
        "name": "sparkArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:sparkArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:universalArchive(where)",
        "desc": "Main entry point for archiving an item. If a handler function is",
        "doc": "Main entry point for archiving an item. If a handler function is\ndefined for the current application, it is called with the\n`UniversalArchive` object as its first argument, and the archive\ndestination (if provided) as the second. Handlers must have a\n\"default destination\" that gets used when no destination is\nprovided. Not all handlers support specifying a destination. New\nhandlers can be registered using the `registerApplication()`\nmethod.",
        "name": "universalArchive",
        "signature": "UniversalArchive:universalArchive(where)",
        "stripped_doc": "defined for the current application, it is called with the\n`UniversalArchive` object as its first argument, and the archive\ndestination (if provided) as the second. Handlers must have a\n\"default destination\" that gets used when no destination is\nprovided. Not all handlers support specifying a destination. New\nhandlers can be registered using the `registerApplication()`\nmethod.",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "UniversalArchive.archive_notifications",
        "desc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "doc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "name": "archive_notifications",
        "signature": "UniversalArchive.archive_notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.evernote_archive_notebook",
        "desc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "doc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "name": "evernote_archive_notebook",
        "signature": "UniversalArchive.evernote_archive_notebook",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.evernote_delay_before_typing",
        "desc": "In Evernote, archive is done by selectin \"Move note\" and then",
        "doc": "In Evernote, archive is done by selectin \"Move note\" and then\nsimulating typing of the notebook name. A short pause in between\nmakes it more reliable for Evernote to recognize the notebook name\ncorrectly. This variable controls how much to wait, in seconds.\nDo not change this unless you know what you are doing",
        "name": "evernote_delay_before_typing",
        "signature": "UniversalArchive.evernote_delay_before_typing",
        "stripped_doc": "simulating typing of the notebook name. A short pause in between\nmakes it more reliable for Evernote to recognize the notebook name\ncorrectly. This variable controls how much to wait, in seconds.\nDo not change this unless you know what you are doing",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "UniversalArchive.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.outlook_archive_folder",
        "desc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "doc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "name": "outlook_archive_folder",
        "signature": "UniversalArchive.outlook_archive_folder",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Handle \"archive current item\" for multiple applications using the same hotkey",
    "doc": "Handle \"archive current item\" for multiple applications using the same hotkey\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip)\n\nUsing this Spoon enables you to use a single hotkey to archive an\nitem in multiple applications.  Out of the box the following\napplications are supported: Evernote, Mail, Spark and Outlook. You\ncan easily register handlers for new applications (or override the\nbuilt-in ones) using the `registerApplication()` method. If you\nwrite a new handler and feel others could benefit from it, please\nsubmit a pull request!\n\nHandlers can also provide support for archiving to multiple\nlocations, and you can bind different hotkeys for each\ndestination. At the moment only Evernote supports this. See the\ndocumentation for `bindHotkeys()` for the details on how to\nspecify multiple-destination filing hotkeys.",
    "items": [
      {
        "def": "UniversalArchive.archive_notifications",
        "desc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "doc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "name": "archive_notifications",
        "signature": "UniversalArchive.archive_notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for UniversalArchive",
        "doc": "Binds hotkeys for UniversalArchive\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.\n  * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations.",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.",
          "  * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations."
        ],
        "signature": "UniversalArchive:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive.evernote_archive_notebook",
        "desc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "doc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "name": "evernote_archive_notebook",
        "signature": "UniversalArchive.evernote_archive_notebook",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.evernote_delay_before_typing",
        "desc": "In Evernote, archive is done by selectin \"Move note\" and then",
        "doc": "In Evernote, archive is done by selectin \"Move note\" and then\nsimulating typing of the notebook name. A short pause in between\nmakes it more reliable for Evernote to recognize the notebook name\ncorrectly. This variable controls how much to wait, in seconds.\nDo not change this unless you know what you are doing",
        "name": "evernote_delay_before_typing",
        "signature": "UniversalArchive.evernote_delay_before_typing",
        "stripped_doc": "simulating typing of the notebook name. A short pause in between\nmakes it more reliable for Evernote to recognize the notebook name\ncorrectly. This variable controls how much to wait, in seconds.\nDo not change this unless you know what you are doing",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:evernoteArchive(where)",
        "desc": "Archive current note in Evernote.",
        "doc": "Archive current note in Evernote.\n\nParameters:\n * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`.",
        "name": "evernoteArchive",
        "parameters": [
          " * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`."
        ],
        "signature": "UniversalArchive:evernoteArchive(where)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "UniversalArchive.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:mailArchive()",
        "desc": "Archive current message in Mail using the built-in Archive functionality",
        "doc": "Archive current message in Mail using the built-in Archive functionality\n\nParameters:\n * none",
        "name": "mailArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:mailArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive.outlook_archive_folder",
        "desc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "doc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "name": "outlook_archive_folder",
        "signature": "UniversalArchive.outlook_archive_folder",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:outlookArchive()",
        "desc": "Archive current message in Outlook to the folder specified in",
        "doc": "Archive current message in Outlook to the folder specified in\n`UniversalArchive.outlook_archive_folder`. The folder has to\nappear in the Message -> Move submenu for this to work. Since this\nsubmenu only lists the last few destination folders, you have to\nmove a message by hand the first time (or periodically if you\ndon't archive very often).\n\nParameters:\n * none",
        "name": "outlookArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:outlookArchive()",
        "stripped_doc": "`UniversalArchive.outlook_archive_folder`. The folder has to\nappear in the Message -> Move submenu for this to work. Since this\nsubmenu only lists the last few destination folders, you have to\nmove a message by hand the first time (or periodically if you\ndon't archive very often).",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:registerApplication(appname, fn)",
        "desc": "Register a handler function for an application.",
        "doc": "Register a handler function for an application.\n\nParameters:\n * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.\n * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:\n   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.\n   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler.",
        "name": "registerApplication",
        "parameters": [
          " * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.",
          " * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:",
          "   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.",
          "   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler."
        ],
        "signature": "UniversalArchive:registerApplication(appname, fn)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:sparkArchive()",
        "desc": "Archive current message in Spark using the built-in Archive functionality",
        "doc": "Archive current message in Spark using the built-in Archive functionality\n\nParameters:\n * none",
        "name": "sparkArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:sparkArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:universalArchive(where)",
        "desc": "Main entry point for archiving an item. If a handler function is",
        "doc": "Main entry point for archiving an item. If a handler function is\ndefined for the current application, it is called with the\n`UniversalArchive` object as its first argument, and the archive\ndestination (if provided) as the second. Handlers must have a\n\"default destination\" that gets used when no destination is\nprovided. Not all handlers support specifying a destination. New\nhandlers can be registered using the `registerApplication()`\nmethod.",
        "name": "universalArchive",
        "signature": "UniversalArchive:universalArchive(where)",
        "stripped_doc": "defined for the current application, it is called with the\n`UniversalArchive` object as its first argument, and the archive\ndestination (if provided) as the second. Handlers must have a\n\"default destination\" that gets used when no destination is\nprovided. Not all handlers support specifying a destination. New\nhandlers can be registered using the `registerApplication()`\nmethod.",
        "type": "Method"
      }
    ],
    "name": "UniversalArchive",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip)\n\nUsing this Spoon enables you to use a single hotkey to archive an\nitem in multiple applications.  Out of the box the following\napplications are supported: Evernote, Mail, Spark and Outlook. You\ncan easily register handlers for new applications (or override the\nbuilt-in ones) using the `registerApplication()` method. If you\nwrite a new handler and feel others could benefit from it, please\nsubmit a pull request!\n\nHandlers can also provide support for archiving to multiple\nlocations, and you can bind different hotkeys for each\ndestination. At the moment only Evernote supports this. See the\ndocumentation for `bindHotkeys()` for the details on how to\nspecify multiple-destination filing hotkeys.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "desc": "Dispatch a URL to an application according to the defined `url_patterns`.",
        "doc": "Dispatch a URL to an application according to the defined `url_patterns`.\n\nParameters (according to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification):\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL",
        "name": "dispatchURL",
        "signature": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "stripped_doc": "Parameters (according to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification):\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL",
        "type": "Method"
      },
      {
        "def": "URLDispatcher:start()",
        "desc": "Start dispatching URLs according to the rules",
        "doc": "Start dispatching URLs according to the rules",
        "name": "start",
        "signature": "URLDispatcher:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "URLDispatcher.decode_slack_redir_urls",
        "desc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "doc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "name": "decode_slack_redir_urls",
        "signature": "URLDispatcher.decode_slack_redir_urls",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.default_handler",
        "desc": "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "doc": "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "name": "default_handler",
        "signature": "URLDispatcher.default_handler",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.url_patterns",
        "desc": "URL dispatch rules.",
        "doc": "URL dispatch rules.\nA table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`.",
        "name": "url_patterns",
        "signature": "URLDispatcher.url_patterns",
        "stripped_doc": "A table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`.",
        "type": "Variable"
      }
    ],
    "desc": "Route URLs to different applications with pattern matching",
    "doc": "Route URLs to different applications with pattern matching\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip)\n\nSets Hammerspoon as the default browser for HTTP/HTTPS links, and\ndispatches them to different apps according to the patterns defined\nin the config. If no pattern matches, `default_handler` is used.",
    "items": [
      {
        "def": "URLDispatcher.decode_slack_redir_urls",
        "desc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "doc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "name": "decode_slack_redir_urls",
        "signature": "URLDispatcher.decode_slack_redir_urls",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.default_handler",
        "desc": "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "doc": "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "name": "default_handler",
        "signature": "URLDispatcher.default_handler",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "desc": "Dispatch a URL to an application according to the defined `url_patterns`.",
        "doc": "Dispatch a URL to an application according to the defined `url_patterns`.\n\nParameters (according to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification):\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL",
        "name": "dispatchURL",
        "signature": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "stripped_doc": "Parameters (according to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification):\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL",
        "type": "Method"
      },
      {
        "def": "URLDispatcher:start()",
        "desc": "Start dispatching URLs according to the rules",
        "doc": "Start dispatching URLs according to the rules",
        "name": "start",
        "signature": "URLDispatcher:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "URLDispatcher.url_patterns",
        "desc": "URL dispatch rules.",
        "doc": "URL dispatch rules.\nA table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`.",
        "name": "url_patterns",
        "signature": "URLDispatcher.url_patterns",
        "stripped_doc": "A table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`.",
        "type": "Variable"
      }
    ],
    "name": "URLDispatcher",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip)\n\nSets Hammerspoon as the default browser for HTTP/HTTPS links, and\ndispatches them to different apps according to the patterns defined\nin the config. If no pattern matches, `default_handler` is used.",
    "submodules": [],
    "type": "Module"
  }
]