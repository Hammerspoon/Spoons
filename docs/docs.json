[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "BrewInfo:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for BrewInfo",
        "doc": "Binds hotkeys for BrewInfo\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show_brew_info - Show output of `brew info` using the selected text as package name\n  * open_brew_url - Open the homepage of the formula whose name is currently selected",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show_brew_info - Show output of `brew info` using the selected text as package name",
          "  * open_brew_url - Open the homepage of the formula whose name is currently selected"
        ],
        "signature": "BrewInfo:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:openBrewURL(pkg)",
        "desc": "Opens the homepage for Formula `pkg`",
        "doc": "Opens the homepage for Formula `pkg`\n\nParameters:\n * pkg - name of the package to query\n\nReturns:\n * The Spoon object",
        "name": "openBrewURL",
        "parameters": [
          " * pkg - name of the package to query"
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURL(pkg)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:openBrewURLCurSel()",
        "desc": "Display `brew info` using the selected text as the package name",
        "doc": "Display `brew info` using the selected text as the package name\n\nReturns:\n * The Spoon object",
        "name": "openBrewURLCurSel",
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURLCurSel()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfo(pkg)",
        "desc": "Displays an alert with the output of `brew info <pkg>`",
        "doc": "Displays an alert with the output of `brew info <pkg>`\n\nParameters:\n * pkg - name of the package to query\n\nReturns:\n * The Spoon object",
        "name": "showBrewInfo",
        "parameters": [
          " * pkg - name of the package to query"
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfo(pkg)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfoCurSel()",
        "desc": "Display `brew info` using the selected text as the package name",
        "doc": "Display `brew info` using the selected text as the package name\n\nReturns:\n * The Spoon object",
        "name": "showBrewInfoCurSel",
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfoCurSel()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "BrewInfo.brew_info_delay_sec",
        "desc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "doc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "name": "brew_info_delay_sec",
        "signature": "BrewInfo.brew_info_delay_sec",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo.brew_info_style",
        "desc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "doc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "name": "brew_info_style",
        "signature": "BrewInfo.brew_info_style",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Display pop-up with Homebrew Formula info, or open their URL",
    "doc": "Display pop-up with Homebrew Formula info, or open their URL\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip)\n\nYou can bind keys to automatically display the output of `brew\ninfo` of the currently-selected package name, or to open its\nhomepage. I use it to quickly explore new packages from the output\nof `brew update`.",
    "items": [
      {
        "def": "BrewInfo:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for BrewInfo",
        "doc": "Binds hotkeys for BrewInfo\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show_brew_info - Show output of `brew info` using the selected text as package name\n  * open_brew_url - Open the homepage of the formula whose name is currently selected",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show_brew_info - Show output of `brew info` using the selected text as package name",
          "  * open_brew_url - Open the homepage of the formula whose name is currently selected"
        ],
        "signature": "BrewInfo:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo.brew_info_delay_sec",
        "desc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "doc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "name": "brew_info_delay_sec",
        "signature": "BrewInfo.brew_info_delay_sec",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo.brew_info_style",
        "desc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "doc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "name": "brew_info_style",
        "signature": "BrewInfo.brew_info_style",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo:openBrewURL(pkg)",
        "desc": "Opens the homepage for Formula `pkg`",
        "doc": "Opens the homepage for Formula `pkg`\n\nParameters:\n * pkg - name of the package to query\n\nReturns:\n * The Spoon object",
        "name": "openBrewURL",
        "parameters": [
          " * pkg - name of the package to query"
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURL(pkg)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:openBrewURLCurSel()",
        "desc": "Display `brew info` using the selected text as the package name",
        "doc": "Display `brew info` using the selected text as the package name\n\nReturns:\n * The Spoon object",
        "name": "openBrewURLCurSel",
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURLCurSel()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfo(pkg)",
        "desc": "Displays an alert with the output of `brew info <pkg>`",
        "doc": "Displays an alert with the output of `brew info <pkg>`\n\nParameters:\n * pkg - name of the package to query\n\nReturns:\n * The Spoon object",
        "name": "showBrewInfo",
        "parameters": [
          " * pkg - name of the package to query"
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfo(pkg)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfoCurSel()",
        "desc": "Display `brew info` using the selected text as the package name",
        "doc": "Display `brew info` using the selected text as the package name\n\nReturns:\n * The Spoon object",
        "name": "showBrewInfoCurSel",
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfoCurSel()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "BrewInfo",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip)\n\nYou can bind keys to automatically display the output of `brew\ninfo` of the currently-selected package name, or to open its\nhomepage. I use it to quickly explore new packages from the output\nof `brew update`.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Caffeine:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Caffeine",
        "doc": "Binds hotkeys for Caffeine\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic\n\nReturns:\n * The Caffeine object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:start()",
        "desc": "Starts Caffeine",
        "doc": "Starts Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:stop()",
        "desc": "Stops Caffeine",
        "doc": "Stops Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "name": "stop",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Prevent the screen from going to sleep",
    "doc": "Prevent the screen from going to sleep\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip)",
    "items": [
      {
        "def": "Caffeine:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Caffeine",
        "doc": "Binds hotkeys for Caffeine\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic\n\nReturns:\n * The Caffeine object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:start()",
        "desc": "Starts Caffeine",
        "doc": "Starts Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:stop()",
        "desc": "Stops Caffeine",
        "doc": "Stops Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "name": "stop",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Caffeine",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Emojis:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Emojis",
        "doc": "Binds hotkeys for Emojis\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the emoji chooser\n\nReturns:\n * The Emojis object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * toggle - This will toggle the emoji chooser"
        ],
        "returns": [
          " * The Emojis object"
        ],
        "signature": "Emojis:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Let users choose emojis by name/keyword",
    "doc": "Let users choose emojis by name/keyword",
    "items": [
      {
        "def": "Emojis:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Emojis",
        "doc": "Binds hotkeys for Emojis\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the emoji chooser\n\nReturns:\n * The Emojis object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * toggle - This will toggle the emoji chooser"
        ],
        "returns": [
          " * The Emojis object"
        ],
        "signature": "Emojis:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Emojis",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MouseCircle:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for MouseCircle",
        "doc": "Binds hotkeys for MouseCircle\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will cause the mouse circle to be drawn",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show - This will cause the mouse circle to be drawn"
        ],
        "signature": "MouseCircle:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseCircle:show()",
        "desc": "Draws a circle around the mouse",
        "doc": "Draws a circle around the mouse\n\nParameters:\n * None\n\nReturns:\n * None",
        "name": "show",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "MouseCircle:show()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "MouseCircle.color",
        "desc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "doc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "name": "color",
        "signature": "MouseCircle.color",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Draws a circle around the mouse pointer when a hotkey is pressed",
    "doc": "Draws a circle around the mouse pointer when a hotkey is pressed\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip)",
    "items": [
      {
        "def": "MouseCircle:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for MouseCircle",
        "doc": "Binds hotkeys for MouseCircle\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will cause the mouse circle to be drawn",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show - This will cause the mouse circle to be drawn"
        ],
        "signature": "MouseCircle:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseCircle.color",
        "desc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "doc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "name": "color",
        "signature": "MouseCircle.color",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MouseCircle:show()",
        "desc": "Draws a circle around the mouse",
        "doc": "Draws a circle around the mouse\n\nParameters:\n * None\n\nReturns:\n * None",
        "name": "show",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "MouseCircle:show()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "MouseCircle",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "RoundedCorners:start()",
        "desc": "Starts RoundedCorners",
        "doc": "Starts RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly",
        "name": "start",
        "notes": [
          " * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "RoundedCorners:stop()",
        "desc": "Stops RoundedCorners",
        "doc": "Stops RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts",
        "name": "stop",
        "notes": [
          " * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "RoundedCorners.allScreens",
        "desc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "doc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "name": "allScreens",
        "signature": "RoundedCorners.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.level",
        "desc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "doc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "name": "level",
        "signature": "RoundedCorners.level",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.radius",
        "desc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "doc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "name": "radius",
        "signature": "RoundedCorners.radius",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Give your screens rounded corners",
    "doc": "Give your screens rounded corners\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip)",
    "items": [
      {
        "def": "RoundedCorners.allScreens",
        "desc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "doc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "name": "allScreens",
        "signature": "RoundedCorners.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.level",
        "desc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "doc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "name": "level",
        "signature": "RoundedCorners.level",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.radius",
        "desc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "doc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "name": "radius",
        "signature": "RoundedCorners.radius",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners:start()",
        "desc": "Starts RoundedCorners",
        "doc": "Starts RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly",
        "name": "start",
        "notes": [
          " * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "RoundedCorners:stop()",
        "desc": "Stops RoundedCorners",
        "doc": "Stops RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts",
        "name": "stop",
        "notes": [
          " * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "RoundedCorners",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Seal:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Seal",
        "doc": "Binds hotkeys for Seal\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will cause Seal's UI to be shown\n\nReturns:\n * The Seal object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show - This will cause Seal's UI to be shown"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:loadPlugins(plugins)",
        "desc": "Loads a list of Seal plugins",
        "doc": "Loads a list of Seal plugins\n\nParameters:\n * plugins - A list containing the names of plugins to load\n\nReturns:\n * The Seal object\n\nNotes:\n * The plugins live inside the Seal.spoon directory\n * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "name": "loadPlugins",
        "notes": [
          " * The plugins live inside the Seal.spoon directory",
          " * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * plugins - A list containing the names of plugins to load"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:loadPlugins(plugins)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:show()",
        "desc": "Shows the Seal UI",
        "doc": "Shows the Seal UI\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This may be useful if you wish to show Seal in response to something other than its hotkey",
        "name": "show",
        "notes": [
          " * This may be useful if you wish to show Seal in response to something other than its hotkey"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:start()",
        "desc": "Starts Seal",
        "doc": "Starts Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:stop()",
        "desc": "Stops Seal",
        "doc": "Stops Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)",
        "name": "stop",
        "notes": [
          " * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Pluggable launch bar",
    "doc": "Pluggable launch bar\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip)",
    "items": [
      {
        "def": "Seal:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Seal",
        "doc": "Binds hotkeys for Seal\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will cause Seal's UI to be shown\n\nReturns:\n * The Seal object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show - This will cause Seal's UI to be shown"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:loadPlugins(plugins)",
        "desc": "Loads a list of Seal plugins",
        "doc": "Loads a list of Seal plugins\n\nParameters:\n * plugins - A list containing the names of plugins to load\n\nReturns:\n * The Seal object\n\nNotes:\n * The plugins live inside the Seal.spoon directory\n * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "name": "loadPlugins",
        "notes": [
          " * The plugins live inside the Seal.spoon directory",
          " * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * plugins - A list containing the names of plugins to load"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:loadPlugins(plugins)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:show()",
        "desc": "Shows the Seal UI",
        "doc": "Shows the Seal UI\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This may be useful if you wish to show Seal in response to something other than its hotkey",
        "name": "show",
        "notes": [
          " * This may be useful if you wish to show Seal in response to something other than its hotkey"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:start()",
        "desc": "Starts Seal",
        "doc": "Starts Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:stop()",
        "desc": "Stops Seal",
        "doc": "Stops Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)",
        "name": "stop",
        "notes": [
          " * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Seal",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "ToggleScreenRotation:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ToggleScreenRotation.",
        "doc": "Binds hotkeys for ToggleScreenRotation.\n\nParameters:\n * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen):\n   ```\n     [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" }\n   ```",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen):",
          "   ```",
          "     [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" }",
          "   ```"
        ],
        "signature": "ToggleScreenRotation:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "ToggleScreenRotation.rotating_angles",
        "desc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "doc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "name": "rotating_angles",
        "signature": "ToggleScreenRotation.rotating_angles",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ToggleScreenRotation.screens_to_skip",
        "desc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.",
        "doc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.\nDefaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs.",
        "name": "screens_to_skip",
        "signature": "ToggleScreenRotation.screens_to_skip",
        "stripped_doc": "Defaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs.",
        "type": "Variable"
      }
    ],
    "desc": "Toggle rotation on external screens",
    "doc": "Toggle rotation on external screens\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip)\n\nMakes the following simplifying assumptions:\n* That you only toggle between two positions for rotated/not\n  rotated (configured in `rotating_angles`, and which apply to all\n  screens)\n* That \"rotated\" means \"taller than wider\", for the purposes of\n  determining if the screen is rotated upon initialization.",
    "items": [
      {
        "def": "ToggleScreenRotation:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ToggleScreenRotation.",
        "doc": "Binds hotkeys for ToggleScreenRotation.\n\nParameters:\n * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen):\n   ```\n     [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" }\n   ```",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen):",
          "   ```",
          "     [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" }",
          "   ```"
        ],
        "signature": "ToggleScreenRotation:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ToggleScreenRotation.rotating_angles",
        "desc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "doc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "name": "rotating_angles",
        "signature": "ToggleScreenRotation.rotating_angles",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ToggleScreenRotation.screens_to_skip",
        "desc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.",
        "doc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.\nDefaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs.",
        "name": "screens_to_skip",
        "signature": "ToggleScreenRotation.screens_to_skip",
        "stripped_doc": "Defaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs.",
        "type": "Variable"
      }
    ],
    "name": "ToggleScreenRotation",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip)\n\nMakes the following simplifying assumptions:\n* That you only toggle between two positions for rotated/not\n  rotated (configured in `rotating_angles`, and which apply to all\n  screens)\n* That \"rotated\" means \"taller than wider\", for the purposes of\n  determining if the screen is rotated upon initialization.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "desc": "Dispatch a URL to an application according to the defined `url_patterns`.",
        "doc": "Dispatch a URL to an application according to the defined `url_patterns`.\n\nParameters (according to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification):\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL",
        "name": "dispatchURL",
        "signature": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "stripped_doc": "Parameters (according to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification):\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL",
        "type": "Method"
      },
      {
        "def": "URLDispatcher:start()",
        "desc": "Start dispatching URLs according to the rules",
        "doc": "Start dispatching URLs according to the rules",
        "name": "start",
        "signature": "URLDispatcher:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "URLDispatcher.decode_slack_redir_urls",
        "desc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "doc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "name": "decode_slack_redir_urls",
        "signature": "URLDispatcher.decode_slack_redir_urls",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.default_handler",
        "desc": "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "doc": "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "name": "default_handler",
        "signature": "URLDispatcher.default_handler",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.url_patterns",
        "desc": "URL dispatch rules.",
        "doc": "URL dispatch rules.\nA table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`.",
        "name": "url_patterns",
        "signature": "URLDispatcher.url_patterns",
        "stripped_doc": "A table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`.",
        "type": "Variable"
      }
    ],
    "desc": "Route URLs to different applications with pattern matching",
    "doc": "Route URLs to different applications with pattern matching\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip)\n\nSets Hammerspoon as the default browser for HTTP/HTTPS links, and\ndispatches them to different apps according to the patterns defined\nin the config. If no pattern matches, `default_handler` is used.",
    "items": [
      {
        "def": "URLDispatcher.decode_slack_redir_urls",
        "desc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "doc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "name": "decode_slack_redir_urls",
        "signature": "URLDispatcher.decode_slack_redir_urls",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.default_handler",
        "desc": "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "doc": "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "name": "default_handler",
        "signature": "URLDispatcher.default_handler",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "desc": "Dispatch a URL to an application according to the defined `url_patterns`.",
        "doc": "Dispatch a URL to an application according to the defined `url_patterns`.\n\nParameters (according to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification):\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL",
        "name": "dispatchURL",
        "signature": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "stripped_doc": "Parameters (according to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification):\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL",
        "type": "Method"
      },
      {
        "def": "URLDispatcher:start()",
        "desc": "Start dispatching URLs according to the rules",
        "doc": "Start dispatching URLs according to the rules",
        "name": "start",
        "signature": "URLDispatcher:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "URLDispatcher.url_patterns",
        "desc": "URL dispatch rules.",
        "doc": "URL dispatch rules.\nA table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`.",
        "name": "url_patterns",
        "signature": "URLDispatcher.url_patterns",
        "stripped_doc": "A table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`.",
        "type": "Variable"
      }
    ],
    "name": "URLDispatcher",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip)\n\nSets Hammerspoon as the default browser for HTTP/HTTPS links, and\ndispatches them to different apps according to the patterns defined\nin the config. If no pattern matches, `default_handler` is used.",
    "submodules": [],
    "type": "Module"
  }
]