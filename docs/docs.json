[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "AClock:hide()",
        "desc": "Hide AClock.",
        "doc": "Hide AClock.\n\nParameters:\n * None\n\nReturns:\n * The AClock object",
        "examples": [],
        "file": "Source/AClock.spoon/init.lua",
        "lineno": "116",
        "name": "hide",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The AClock object"
        ],
        "signature": "AClock:hide()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "AClock:init()",
        "desc": "init.",
        "doc": "init.\n\nParameters:\n * None\n\nReturns:\n * The AClock object",
        "examples": [],
        "file": "Source/AClock.spoon/init.lua",
        "lineno": "54",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The AClock object"
        ],
        "signature": "AClock:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "AClock:show()",
        "desc": "Show AClock.",
        "doc": "Show AClock.\n\nParameters:\n * None\n\nReturns:\n * The AClock object",
        "examples": [],
        "file": "Source/AClock.spoon/init.lua",
        "lineno": "97",
        "name": "show",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The AClock object"
        ],
        "signature": "AClock:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "AClock:toggleShow()",
        "desc": "Show AClock for 4 seconds. If already showing, hide it.",
        "doc": "Show AClock for 4 seconds. If already showing, hide it.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/AClock.spoon/init.lua",
        "lineno": "133",
        "name": "toggleShow",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "AClock:toggleShow()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "AClock:toggleShowPersistent()",
        "desc": "Show AClock. If already showing, hide it.",
        "doc": "Show AClock. If already showing, hide it.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/AClock.spoon/init.lua",
        "lineno": "154",
        "name": "toggleShowPersistent",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "AClock:toggleShowPersistent()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Just another clock, floating above all.",
    "doc": "Just another clock, floating above all.\n\nConfigurable properties (with default values):\n    format = \"%H:%M\",\n    textFont = \"Impact\",\n    textSize = 135,\n    textColor = {hex=\"#1891C3\"},\n    width = 320,\n    height = 230,\n    showDuration = 4,  -- seconds\n    hotkey = 'escape',\n    hotkeyMods = {},\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AClock.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AClock.spoon.zip)",
    "items": [
      {
        "def": "AClock:hide()",
        "desc": "Hide AClock.",
        "doc": "Hide AClock.\n\nParameters:\n * None\n\nReturns:\n * The AClock object",
        "examples": [],
        "file": "Source/AClock.spoon/init.lua",
        "lineno": "116",
        "name": "hide",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The AClock object"
        ],
        "signature": "AClock:hide()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "AClock:init()",
        "desc": "init.",
        "doc": "init.\n\nParameters:\n * None\n\nReturns:\n * The AClock object",
        "examples": [],
        "file": "Source/AClock.spoon/init.lua",
        "lineno": "54",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The AClock object"
        ],
        "signature": "AClock:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "AClock:show()",
        "desc": "Show AClock.",
        "doc": "Show AClock.\n\nParameters:\n * None\n\nReturns:\n * The AClock object",
        "examples": [],
        "file": "Source/AClock.spoon/init.lua",
        "lineno": "97",
        "name": "show",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The AClock object"
        ],
        "signature": "AClock:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "AClock:toggleShow()",
        "desc": "Show AClock for 4 seconds. If already showing, hide it.",
        "doc": "Show AClock for 4 seconds. If already showing, hide it.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/AClock.spoon/init.lua",
        "lineno": "133",
        "name": "toggleShow",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "AClock:toggleShow()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "AClock:toggleShowPersistent()",
        "desc": "Show AClock. If already showing, hide it.",
        "doc": "Show AClock. If already showing, hide it.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/AClock.spoon/init.lua",
        "lineno": "154",
        "name": "toggleShowPersistent",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "AClock:toggleShowPersistent()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "AClock",
    "stripped_doc": "\nConfigurable properties (with default values):\n    format = \"%H:%M\",\n    textFont = \"Impact\",\n    textSize = 135,\n    textColor = {hex=\"#1891C3\"},\n    width = 320,\n    height = 230,\n    showDuration = 4,  -- seconds\n    hotkey = 'escape',\n    hotkeyMods = {},\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AClock.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AClock.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "Listens for keyboard brightness keypresses and alters brightness on all supported displays.",
    "doc": "Listens for keyboard brightness keypresses and alters brightness on all supported displays.\nNote: This is primarily intended for Macs with no internal display, but should work for those with an internal display.\nNote: External displays will only respond to brightness change requests if they were either made by Apple, or are LG UltraFine displays (which were designed by Apple).\nNote: If your keyboard brightness keys aren't triggering this Spoon, use Karabiner Elements to set them to `display_brightness_decrement` and `display_brightness_increment`.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AllBrightness.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AllBrightness.spoon.zip)",
    "items": [],
    "name": "AllBrightness",
    "stripped_doc": "Note: This is primarily intended for Macs with no internal display, but should work for those with an internal display.\nNote: External displays will only respond to brightness change requests if they were either made by Apple, or are LG UltraFine displays (which were designed by Apple).\nNote: If your keyboard brightness keys aren't triggering this Spoon, use Karabiner Elements to set them to `display_brightness_decrement` and `display_brightness_increment`.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AllBrightness.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AllBrightness.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "AppLauncher:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for AppLauncher",
        "doc": "Binds hotkeys for AppLauncher\n\nParameters:\n * mapping - A table containing single characters with their associated app",
        "examples": [],
        "file": "Source/AppLauncher.spoon/init.lua",
        "lineno": "41",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing single characters with their associated app"
        ],
        "returns": [],
        "signature": "AppLauncher:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "AppLauncher.modifiers",
        "desc": "Modifier keys used when launching apps",
        "doc": "Modifier keys used when launching apps\n\nNotes:\n * Default value: `{\"ctrl\", \"alt\"}`",
        "file": "Source/AppLauncher.spoon/init.lua",
        "lineno": "33",
        "name": "modifiers",
        "notes": [
          " * Default value: `{\"ctrl\", \"alt\"}`"
        ],
        "signature": "AppLauncher.modifiers",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Simple spoon for launching apps with single letter hotkeys.",
    "doc": "Simple spoon for launching apps with single letter hotkeys.\n\nExample configuration using SpoonInstall.spoon:\n```\nspoon.SpoonInstall:andUse(\"AppLauncher\", {\n  hotkeys = {\n    c = \"Calendar\",\n    d = \"Discord\",\n    f = \"Firefox Developer Edition\",\n    n = \"Notes\",\n    p = \"1Password 7\",\n    r = \"Reeder\",\n    t = \"Kitty\",\n    z = \"Zoom.us\",\n  }\n})\n```\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AppLauncher.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AppLauncher.spoon.zip)",
    "items": [
      {
        "def": "AppLauncher:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for AppLauncher",
        "doc": "Binds hotkeys for AppLauncher\n\nParameters:\n * mapping - A table containing single characters with their associated app",
        "examples": [],
        "file": "Source/AppLauncher.spoon/init.lua",
        "lineno": "41",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing single characters with their associated app"
        ],
        "returns": [],
        "signature": "AppLauncher:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "AppLauncher.modifiers",
        "desc": "Modifier keys used when launching apps",
        "doc": "Modifier keys used when launching apps\n\nNotes:\n * Default value: `{\"ctrl\", \"alt\"}`",
        "file": "Source/AppLauncher.spoon/init.lua",
        "lineno": "33",
        "name": "modifiers",
        "notes": [
          " * Default value: `{\"ctrl\", \"alt\"}`"
        ],
        "signature": "AppLauncher.modifiers",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "AppLauncher",
    "stripped_doc": "\nExample configuration using SpoonInstall.spoon:\n```\nspoon.SpoonInstall:andUse(\"AppLauncher\", {\n  hotkeys = {\n    c = \"Calendar\",\n    d = \"Discord\",\n    f = \"Firefox Developer Edition\",\n    n = \"Notes\",\n    p = \"1Password 7\",\n    r = \"Reeder\",\n    t = \"Kitty\",\n    z = \"Zoom.us\",\n  }\n})\n```\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AppLauncher.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AppLauncher.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "AppWindowSwitcher:bindHotkeys(mapping) -> self",
        "desc": "Binds hotkeys for AppWindowSwitcher",
        "doc": "Binds hotkeys for AppWindowSwitcher\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for each application to manage \n\nNotes:\nThe mapping table accepts these formats per table element:\n* A single text to match:\n  `[\"<matchtext>\"] = {mods, key}` \n* A list of texts, to assign multiple applications to one hotkey:\n  `[{\"<matchtext>\", \"<matchtext>\", ...}] = {mods, key}`\n* `<matchtext>` can be either a bundleID, or a text which is substring matched against a windows application title start. \n\nReturns:\n * The AppWindowSwitcher object",
        "examples": [],
        "file": "Source/AppWindowSwitcher.spoon/init.lua",
        "lineno": "94",
        "name": "bindHotkeys",
        "notes": [
          "The mapping table accepts these formats per table element:",
          "* A single text to match:",
          "  `[\"<matchtext>\"] = {mods, key}` ",
          "* A list of texts, to assign multiple applications to one hotkey:",
          "  `[{\"<matchtext>\", \"<matchtext>\", ...}] = {mods, key}`",
          "* `<matchtext>` can be either a bundleID, or a text which is substring matched against a windows application title start. "
        ],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for each application to manage"
        ],
        "returns": [
          " * The AppWindowSwitcher object"
        ],
        "signature": "AppWindowSwitcher:bindHotkeys(mapping) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "AppWindowSwitcher:setLogLevel(level) -> self",
        "desc": "Set the log level of the spoon logger.",
        "doc": "Set the log level of the spoon logger.\n\nParameters:\n * Log level - `\"debug\"` to enable console debug output\n\nReturns:\n * The AppWindowSwitcher object",
        "examples": [],
        "file": "Source/AppWindowSwitcher.spoon/init.lua",
        "lineno": "153",
        "name": "setLogLevel",
        "notes": [],
        "parameters": [
          " * Log level - `\"debug\"` to enable console debug output"
        ],
        "returns": [
          " * The AppWindowSwitcher object"
        ],
        "signature": "AppWindowSwitcher:setLogLevel(level) -> self",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "macOS application aware, keyboard driven window switcher. Spoon ",
    "doc": "macOS application aware, keyboard driven window switcher. Spoon \non top of Hammerspoon.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AppWindowSwitcher.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AppWindowSwitcher.spoon.zip)\n\nSwitches windows by focusing and raising them. All windows matching a \nbundelID, a list of bundleID's, an application name matchtext, \nor a list of application name matchtexts are switched by cycling \nthem. Cycling applies to visible windows of currently focused space \nonly. The spoon does not launch applications, it operates on open \nwindows of running applications.\n\nExample `~/.hammerspoon/init.lua` configuration:\n\n```\nhs.loadSpoon(\"AppWindowSwitcher\")\n    -- :setLogLevel(\"debug\") -- uncomment for console debug log\n    :bindHotkeys({\n        [\"com.apple.Terminal\"]        = {hyper, \"t\"},\n        [{\"com.apple.Safari\",\n          \"com.google.Chrome\",\n          \"com.kagi.kagimacOS\",\n          \"com.microsoft.edgemac\", \n          \"org.mozilla.firefox\"}]     = {hyper, \"q\"},\n        [\"Hammerspoon\"]               = {hyper, \"h\"},\n        [{\"O\", \"o\"}]                  = {hyper, \"o\"},\n    })\n```\nIn this example, \n* `hyper-t` cycles all terminal windows (matching a single bundleID),\n* `hyper-q` cycles all windows of the five browsers (matching either \n  of the bundleIDs)\n* `hyper-h` brings the Hammerspoon console forward (matching the \n  application title),\n* `hyper-o` cycles all windows whose application title starts \n  with \"O\" or \"o\".\n\nThe cycling logic works as follows:\n* If the focused window is part of the application matching a hotkey,\n  then the last window (in terms of macOS windows stacking) of the matching \n  application(s) will be brought forward and focused.\n* If the focused window is not part of the application matching a\n  hotkey, then the first window (in terms of macOS windows stacking) i\n  of the matching applications will be brought forward and focused.",
    "items": [
      {
        "def": "AppWindowSwitcher:bindHotkeys(mapping) -> self",
        "desc": "Binds hotkeys for AppWindowSwitcher",
        "doc": "Binds hotkeys for AppWindowSwitcher\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for each application to manage \n\nNotes:\nThe mapping table accepts these formats per table element:\n* A single text to match:\n  `[\"<matchtext>\"] = {mods, key}` \n* A list of texts, to assign multiple applications to one hotkey:\n  `[{\"<matchtext>\", \"<matchtext>\", ...}] = {mods, key}`\n* `<matchtext>` can be either a bundleID, or a text which is substring matched against a windows application title start. \n\nReturns:\n * The AppWindowSwitcher object",
        "examples": [],
        "file": "Source/AppWindowSwitcher.spoon/init.lua",
        "lineno": "94",
        "name": "bindHotkeys",
        "notes": [
          "The mapping table accepts these formats per table element:",
          "* A single text to match:",
          "  `[\"<matchtext>\"] = {mods, key}` ",
          "* A list of texts, to assign multiple applications to one hotkey:",
          "  `[{\"<matchtext>\", \"<matchtext>\", ...}] = {mods, key}`",
          "* `<matchtext>` can be either a bundleID, or a text which is substring matched against a windows application title start. "
        ],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for each application to manage"
        ],
        "returns": [
          " * The AppWindowSwitcher object"
        ],
        "signature": "AppWindowSwitcher:bindHotkeys(mapping) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "AppWindowSwitcher:setLogLevel(level) -> self",
        "desc": "Set the log level of the spoon logger.",
        "doc": "Set the log level of the spoon logger.\n\nParameters:\n * Log level - `\"debug\"` to enable console debug output\n\nReturns:\n * The AppWindowSwitcher object",
        "examples": [],
        "file": "Source/AppWindowSwitcher.spoon/init.lua",
        "lineno": "153",
        "name": "setLogLevel",
        "notes": [],
        "parameters": [
          " * Log level - `\"debug\"` to enable console debug output"
        ],
        "returns": [
          " * The AppWindowSwitcher object"
        ],
        "signature": "AppWindowSwitcher:setLogLevel(level) -> self",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "AppWindowSwitcher",
    "stripped_doc": "on top of Hammerspoon.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AppWindowSwitcher.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/AppWindowSwitcher.spoon.zip)\n\nSwitches windows by focusing and raising them. All windows matching a \nbundelID, a list of bundleID's, an application name matchtext, \nor a list of application name matchtexts are switched by cycling \nthem. Cycling applies to visible windows of currently focused space \nonly. The spoon does not launch applications, it operates on open \nwindows of running applications.\n\nExample `~/.hammerspoon/init.lua` configuration:\n\n```\nhs.loadSpoon(\"AppWindowSwitcher\")\n    -- :setLogLevel(\"debug\") -- uncomment for console debug log\n    :bindHotkeys({\n        [\"com.apple.Terminal\"]        = {hyper, \"t\"},\n        [{\"com.apple.Safari\",\n          \"com.google.Chrome\",\n          \"com.kagi.kagimacOS\",\n          \"com.microsoft.edgemac\", \n          \"org.mozilla.firefox\"}]     = {hyper, \"q\"},\n        [\"Hammerspoon\"]               = {hyper, \"h\"},\n        [{\"O\", \"o\"}]                  = {hyper, \"o\"},\n    })\n```\nIn this example, \n* `hyper-t` cycles all terminal windows (matching a single bundleID),\n* `hyper-q` cycles all windows of the five browsers (matching either \n  of the bundleIDs)\n* `hyper-h` brings the Hammerspoon console forward (matching the \n  application title),\n* `hyper-o` cycles all windows whose application title starts \n  with \"O\" or \"o\".\n\nThe cycling logic works as follows:\n* If the focused window is part of the application matching a hotkey,\n  then the last window (in terms of macOS windows stacking) of the matching \n  application(s) will be brought forward and focused.\n* If the focused window is not part of the application matching a\n  hotkey, then the first window (in terms of macOS windows stacking) i\n  of the matching applications will be brought forward and focused.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [
      {
        "def": "ArrangeDesktop._buildArrangement() -> table",
        "desc": "Builds the configuration for the current desktop arrangement.",
        "doc": "Builds the configuration for the current desktop arrangement.\n\nParameters:\n * None\n\nReturns:\n * A table containing the configuration data for the current desktop arrangement",
        "examples": [],
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "72",
        "name": "_buildArrangement",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * A table containing the configuration data for the current desktop arrangement"
        ],
        "signature": "ArrangeDesktop._buildArrangement() -> table",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ArrangeDesktop._loadConfiguration() -> table or nil",
        "desc": "Loads the configuration file.",
        "doc": "Loads the configuration file.\n\nParameters:\n * None\n\nReturns:\n * A table containing the configured desktop arrangements, or nil if an error occurred",
        "examples": [],
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "31",
        "name": "_loadConfiguration",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * A table containing the configured desktop arrangements, or nil if an error occurred"
        ],
        "signature": "ArrangeDesktop._loadConfiguration() -> table or nil",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ArrangeDesktop._positionApp(app, appTitle, screen, frame)",
        "desc": "Positions all windows for an application based on the given configuration.",
        "doc": "Positions all windows for an application based on the given configuration.\n\nParameters:\n * app - A table of the application instance\n * appTitle - The name of the application, e.g., Slack, Firefox, etc.\n * screen - A table of the position of the screen (x, y integer pair) to place the application window into\n * frame - A table of the frame details for the application window, e.g., {w=12, h=12, x=12, y=12}",
        "examples": [],
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "113",
        "name": "_positionApp",
        "notes": [],
        "parameters": [
          " * app - A table of the application instance",
          " * appTitle - The name of the application, e.g., Slack, Firefox, etc.",
          " * screen - A table of the position of the screen (x, y integer pair) to place the application window into",
          " * frame - A table of the frame details for the application window, e.g., {w=12, h=12, x=12, y=12}"
        ],
        "returns": [],
        "signature": "ArrangeDesktop._positionApp(app, appTitle, screen, frame)",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ArrangeDesktop._writeConfiguration(config) -> bool",
        "desc": "Writes the configuration to a file.",
        "doc": "Writes the configuration to a file.\n\nParameters:\n * config - A table containing the configuration to write\n\nReturns:\n * A boolean indicating if the write was successful",
        "examples": [],
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "59",
        "name": "_writeConfiguration",
        "notes": [],
        "parameters": [
          " * config - A table containing the configuration to write"
        ],
        "returns": [
          " * A boolean indicating if the write was successful"
        ],
        "signature": "ArrangeDesktop._writeConfiguration(config) -> bool",
        "stripped_doc": "",
        "type": "Function"
      }
    ],
    "Method": [
      {
        "def": "ArrangeDesktop:addMenuItems(menuItems) -> table",
        "desc": "Add menu items to a table for each configured desktop arrangement.",
        "doc": "Add menu items to a table for each configured desktop arrangement.\n\nParameters:\n * menuItems - A table of menu items to append to\n\nReturns:\n * A table of menu items",
        "examples": [],
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "154",
        "name": "addMenuItems",
        "notes": [],
        "parameters": [
          " * menuItems - A table of menu items to append to"
        ],
        "returns": [
          " * A table of menu items"
        ],
        "signature": "ArrangeDesktop:addMenuItems(menuItems) -> table",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ArrangeDesktop:arrange(arrangement)",
        "desc": "Arrange the desktop based on a given configuration",
        "doc": "Arrange the desktop based on a given configuration\n\nParameters:\n * arrangement - A table of arrangement data",
        "examples": [],
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "135",
        "name": "arrange",
        "notes": [],
        "parameters": [
          " * arrangement - A table of arrangement data"
        ],
        "returns": [],
        "signature": "ArrangeDesktop:arrange(arrangement)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ArrangeDesktop:createArrangement()",
        "desc": "Creates the desktop arrangement and saves it to the configuration file.",
        "doc": "Creates the desktop arrangement and saves it to the configuration file.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "186",
        "name": "createArrangement",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ArrangeDesktop:createArrangement()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "ArrangeDesktop.arrangements",
        "desc": "Contains the configured desktop arrangements",
        "doc": "Contains the configured desktop arrangements",
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "21",
        "name": "arrangements",
        "signature": "ArrangeDesktop.arrangements",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ArrangeDesktop.configFile",
        "desc": "Defines where the config file is stored. Defaults to hs.spoons.scriptPath()/config.json",
        "doc": "Defines where the config file is stored. Defaults to hs.spoons.scriptPath()/config.json",
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "26",
        "name": "configFile",
        "signature": "ArrangeDesktop.configFile",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ArrangeDesktop.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "16",
        "name": "logger",
        "signature": "ArrangeDesktop.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Easily create, save, and use desktop arrangements.",
    "doc": "Easily create, save, and use desktop arrangements.\n\nPositioning logic adapted from https://github.com/dploeger/hammerspoon-window-manager",
    "items": [
      {
        "def": "ArrangeDesktop._buildArrangement() -> table",
        "desc": "Builds the configuration for the current desktop arrangement.",
        "doc": "Builds the configuration for the current desktop arrangement.\n\nParameters:\n * None\n\nReturns:\n * A table containing the configuration data for the current desktop arrangement",
        "examples": [],
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "72",
        "name": "_buildArrangement",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * A table containing the configuration data for the current desktop arrangement"
        ],
        "signature": "ArrangeDesktop._buildArrangement() -> table",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ArrangeDesktop._loadConfiguration() -> table or nil",
        "desc": "Loads the configuration file.",
        "doc": "Loads the configuration file.\n\nParameters:\n * None\n\nReturns:\n * A table containing the configured desktop arrangements, or nil if an error occurred",
        "examples": [],
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "31",
        "name": "_loadConfiguration",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * A table containing the configured desktop arrangements, or nil if an error occurred"
        ],
        "signature": "ArrangeDesktop._loadConfiguration() -> table or nil",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ArrangeDesktop._positionApp(app, appTitle, screen, frame)",
        "desc": "Positions all windows for an application based on the given configuration.",
        "doc": "Positions all windows for an application based on the given configuration.\n\nParameters:\n * app - A table of the application instance\n * appTitle - The name of the application, e.g., Slack, Firefox, etc.\n * screen - A table of the position of the screen (x, y integer pair) to place the application window into\n * frame - A table of the frame details for the application window, e.g., {w=12, h=12, x=12, y=12}",
        "examples": [],
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "113",
        "name": "_positionApp",
        "notes": [],
        "parameters": [
          " * app - A table of the application instance",
          " * appTitle - The name of the application, e.g., Slack, Firefox, etc.",
          " * screen - A table of the position of the screen (x, y integer pair) to place the application window into",
          " * frame - A table of the frame details for the application window, e.g., {w=12, h=12, x=12, y=12}"
        ],
        "returns": [],
        "signature": "ArrangeDesktop._positionApp(app, appTitle, screen, frame)",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ArrangeDesktop._writeConfiguration(config) -> bool",
        "desc": "Writes the configuration to a file.",
        "doc": "Writes the configuration to a file.\n\nParameters:\n * config - A table containing the configuration to write\n\nReturns:\n * A boolean indicating if the write was successful",
        "examples": [],
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "59",
        "name": "_writeConfiguration",
        "notes": [],
        "parameters": [
          " * config - A table containing the configuration to write"
        ],
        "returns": [
          " * A boolean indicating if the write was successful"
        ],
        "signature": "ArrangeDesktop._writeConfiguration(config) -> bool",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "ArrangeDesktop:addMenuItems(menuItems) -> table",
        "desc": "Add menu items to a table for each configured desktop arrangement.",
        "doc": "Add menu items to a table for each configured desktop arrangement.\n\nParameters:\n * menuItems - A table of menu items to append to\n\nReturns:\n * A table of menu items",
        "examples": [],
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "154",
        "name": "addMenuItems",
        "notes": [],
        "parameters": [
          " * menuItems - A table of menu items to append to"
        ],
        "returns": [
          " * A table of menu items"
        ],
        "signature": "ArrangeDesktop:addMenuItems(menuItems) -> table",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ArrangeDesktop:arrange(arrangement)",
        "desc": "Arrange the desktop based on a given configuration",
        "doc": "Arrange the desktop based on a given configuration\n\nParameters:\n * arrangement - A table of arrangement data",
        "examples": [],
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "135",
        "name": "arrange",
        "notes": [],
        "parameters": [
          " * arrangement - A table of arrangement data"
        ],
        "returns": [],
        "signature": "ArrangeDesktop:arrange(arrangement)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ArrangeDesktop.arrangements",
        "desc": "Contains the configured desktop arrangements",
        "doc": "Contains the configured desktop arrangements",
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "21",
        "name": "arrangements",
        "signature": "ArrangeDesktop.arrangements",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ArrangeDesktop.configFile",
        "desc": "Defines where the config file is stored. Defaults to hs.spoons.scriptPath()/config.json",
        "doc": "Defines where the config file is stored. Defaults to hs.spoons.scriptPath()/config.json",
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "26",
        "name": "configFile",
        "signature": "ArrangeDesktop.configFile",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ArrangeDesktop:createArrangement()",
        "desc": "Creates the desktop arrangement and saves it to the configuration file.",
        "doc": "Creates the desktop arrangement and saves it to the configuration file.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "186",
        "name": "createArrangement",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ArrangeDesktop:createArrangement()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ArrangeDesktop.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/ArrangeDesktop.spoon/init.lua",
        "lineno": "16",
        "name": "logger",
        "signature": "ArrangeDesktop.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "ArrangeDesktop",
    "stripped_doc": "\nPositioning logic adapted from https://github.com/dploeger/hammerspoon-window-manager",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Asana:createTask(taskName, workspaceName) -> Self",
        "desc": "Creates a new task named `taskName` in the workspace `workspaceName`.",
        "doc": "Creates a new task named `taskName` in the workspace `workspaceName`.\n\nParameters:\n * taskName (String)      - The title of the Asana task.\n * WorkspaceName (String) - The name of the workspace in which to create the task.\n\nReturns:\n * Self\n\nExamples:\n ```\n spoon.Asana.createTask(\"Do that thing I forgot about\", \"My Company Workspace\")\n ```",
        "examples": [
          " ```",
          " spoon.Asana.createTask(\"Do that thing I forgot about\", \"My Company Workspace\")",
          " ```"
        ],
        "file": "Source/Asana.spoon/init.lua",
        "lineno": "98",
        "name": "createTask",
        "notes": [],
        "parameters": [
          " * taskName (String)      - The title of the Asana task.",
          " * WorkspaceName (String) - The name of the workspace in which to create the task."
        ],
        "returns": [
          " * Self"
        ],
        "signature": "Asana:createTask(taskName, workspaceName) -> Self",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Asana.apiKey (String)",
        "desc": "A \"personal access token\" for Asana. You can create one here: https://app.asana.com/0/developer-console",
        "doc": "A \"personal access token\" for Asana. You can create one here: https://app.asana.com/0/developer-console",
        "file": "Source/Asana.spoon/init.lua",
        "lineno": "93",
        "name": "apiKey",
        "signature": "Asana.apiKey (String)",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Simple spoon that creates a new task in Asana with a given name in a given workspace.",
    "doc": "Simple spoon that creates a new task in Asana with a given name in a given workspace.\n\nExample configuration (using SpoonInstall.spoon and Seal.spoon):\n```\n-- Load configuration constants used throughout the code\nconsts = require \"configConsts\" -- just a table\n\n-- Load Asana spoon and configure it with API key\nspoon.SpoonInstall:andUse(\"Asana\", { config = { apiKey = consts.asanaApiKey } })\n\n-- Load Seal and setup user actions to add task to Asana workspaces\nspoon.SpoonInstall:andUse(\n  \"Seal\",\n  {\n    fn = function(x)\n      x:loadPlugins({\"apps\", \"calc\", \"useractions\", \"rot13\"})\n      x.plugins.useractions.actions = {\n        [\"New Asana task in \" .. consts.asanaWorkWorkspaceName] = {\n          fn = function(y) spoon.Asana:createTask(y, consts.asanaWorkWorkspaceName) end,\n          keyword = \"awork\"\n        },\n        [\"New Asana task in \" .. consts.asanaPersonalWorkspaceName] = {\n          fn = function(y) spoon.Asana:createTask(y, consts.asanaPersonalWorkspaceName) end,\n          keyword = \"ahome\"\n        }\n      }\n      x:refreshAllCommands()\n    end,\n    start = true,\n    hotkeys = { toggle = { \"cmd\", \"space\" } }\n  }\n)\n```\n\nWith this setup, adding a new task to Asana is as easy pressing `Command + Space` to launch Seal and entering, e.g., \"awork Do that thing I forgot to do\".",
    "items": [
      {
        "def": "Asana.apiKey (String)",
        "desc": "A \"personal access token\" for Asana. You can create one here: https://app.asana.com/0/developer-console",
        "doc": "A \"personal access token\" for Asana. You can create one here: https://app.asana.com/0/developer-console",
        "file": "Source/Asana.spoon/init.lua",
        "lineno": "93",
        "name": "apiKey",
        "signature": "Asana.apiKey (String)",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Asana:createTask(taskName, workspaceName) -> Self",
        "desc": "Creates a new task named `taskName` in the workspace `workspaceName`.",
        "doc": "Creates a new task named `taskName` in the workspace `workspaceName`.\n\nParameters:\n * taskName (String)      - The title of the Asana task.\n * WorkspaceName (String) - The name of the workspace in which to create the task.\n\nReturns:\n * Self\n\nExamples:\n ```\n spoon.Asana.createTask(\"Do that thing I forgot about\", \"My Company Workspace\")\n ```",
        "examples": [
          " ```",
          " spoon.Asana.createTask(\"Do that thing I forgot about\", \"My Company Workspace\")",
          " ```"
        ],
        "file": "Source/Asana.spoon/init.lua",
        "lineno": "98",
        "name": "createTask",
        "notes": [],
        "parameters": [
          " * taskName (String)      - The title of the Asana task.",
          " * WorkspaceName (String) - The name of the workspace in which to create the task."
        ],
        "returns": [
          " * Self"
        ],
        "signature": "Asana:createTask(taskName, workspaceName) -> Self",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Asana",
    "stripped_doc": "\nExample configuration (using SpoonInstall.spoon and Seal.spoon):\n```\n-- Load configuration constants used throughout the code\nconsts = require \"configConsts\" -- just a table\n\n-- Load Asana spoon and configure it with API key\nspoon.SpoonInstall:andUse(\"Asana\", { config = { apiKey = consts.asanaApiKey } })\n\n-- Load Seal and setup user actions to add task to Asana workspaces\nspoon.SpoonInstall:andUse(\n  \"Seal\",\n  {\n    fn = function(x)\n      x:loadPlugins({\"apps\", \"calc\", \"useractions\", \"rot13\"})\n      x.plugins.useractions.actions = {\n        [\"New Asana task in \" .. consts.asanaWorkWorkspaceName] = {\n          fn = function(y) spoon.Asana:createTask(y, consts.asanaWorkWorkspaceName) end,\n          keyword = \"awork\"\n        },\n        [\"New Asana task in \" .. consts.asanaPersonalWorkspaceName] = {\n          fn = function(y) spoon.Asana:createTask(y, consts.asanaPersonalWorkspaceName) end,\n          keyword = \"ahome\"\n        }\n      }\n      x:refreshAllCommands()\n    end,\n    start = true,\n    hotkeys = { toggle = { \"cmd\", \"space\" } }\n  }\n)\n```\n\nWith this setup, adding a new task to Asana is as easy pressing `Command + Space` to launch Seal and entering, e.g., \"awork Do that thing I forgot to do\".",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [
      {
        "def": "BingDaily.runAt",
        "desc": "Set this to a time at which the wallpaper should be refreshed daily, eg,",
        "doc": "Set this to a time at which the wallpaper should be refreshed daily, eg,\n`\"06:00\"`. If this is not set, the wallpaper will be updated every 3 hours. If\nthis is used, you must call `spoon.BingDaily:start()` after configuring.",
        "file": "Source/BingDaily.spoon/init.lua",
        "lineno": "28",
        "name": "runAt",
        "signature": "BingDaily.runAt",
        "stripped_doc": "`\"06:00\"`. If this is not set, the wallpaper will be updated every 3 hours. If\nthis is used, you must call `spoon.BingDaily:start()` after configuring.",
        "type": "Variable"
      },
      {
        "def": "BingDaily.screens",
        "desc": "Set this to a function that returns a list of screens on which to configure",
        "doc": "Set this to a function that returns a list of screens on which to configure\nthe desktop image, instead of hs.screen.allScreens",
        "file": "Source/BingDaily.spoon/init.lua",
        "lineno": "22",
        "name": "screens",
        "signature": "BingDaily.screens",
        "stripped_doc": "the desktop image, instead of hs.screen.allScreens",
        "type": "Variable"
      },
      {
        "def": "BingDaily.uhd_resolution",
        "desc": "If `true`, download image in UHD resolution instead of HD. Defaults to `false`.",
        "doc": "If `true`, download image in UHD resolution instead of HD. Defaults to `false`.",
        "file": "Source/BingDaily.spoon/init.lua",
        "lineno": "17",
        "name": "uhd_resolution",
        "signature": "BingDaily.uhd_resolution",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Use Bing daily picture as your wallpaper, automatically.",
    "doc": "Use Bing daily picture as your wallpaper, automatically.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BingDaily.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BingDaily.spoon.zip)",
    "items": [
      {
        "def": "BingDaily.runAt",
        "desc": "Set this to a time at which the wallpaper should be refreshed daily, eg,",
        "doc": "Set this to a time at which the wallpaper should be refreshed daily, eg,\n`\"06:00\"`. If this is not set, the wallpaper will be updated every 3 hours. If\nthis is used, you must call `spoon.BingDaily:start()` after configuring.",
        "file": "Source/BingDaily.spoon/init.lua",
        "lineno": "28",
        "name": "runAt",
        "signature": "BingDaily.runAt",
        "stripped_doc": "`\"06:00\"`. If this is not set, the wallpaper will be updated every 3 hours. If\nthis is used, you must call `spoon.BingDaily:start()` after configuring.",
        "type": "Variable"
      },
      {
        "def": "BingDaily.screens",
        "desc": "Set this to a function that returns a list of screens on which to configure",
        "doc": "Set this to a function that returns a list of screens on which to configure\nthe desktop image, instead of hs.screen.allScreens",
        "file": "Source/BingDaily.spoon/init.lua",
        "lineno": "22",
        "name": "screens",
        "signature": "BingDaily.screens",
        "stripped_doc": "the desktop image, instead of hs.screen.allScreens",
        "type": "Variable"
      },
      {
        "def": "BingDaily.uhd_resolution",
        "desc": "If `true`, download image in UHD resolution instead of HD. Defaults to `false`.",
        "doc": "If `true`, download image in UHD resolution instead of HD. Defaults to `false`.",
        "file": "Source/BingDaily.spoon/init.lua",
        "lineno": "17",
        "name": "uhd_resolution",
        "signature": "BingDaily.uhd_resolution",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "BingDaily",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BingDaily.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BingDaily.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "BonjourLauncher:addRecipes(recipe...) -> self",
        "desc": "Add predefined recipes to [BonjourLauncher.templates](#templates) for display by the BonjourLauncher chooser.",
        "doc": "Add predefined recipes to [BonjourLauncher.templates](#templates) for display by the BonjourLauncher chooser.\n\nParameters:\n * `recipe`, ... - One or more string values matching a variable name in `BonjourLauncher.recipes` which define basic templates for common services which you may wish to add to your BonjourLauncer chooser window.\n\nReturns:\n * the BonjourLauncer object\n\nNotes:\n * This method is basically a wrapper which performs `table.insert(spoon.BonjourLauncher.templates, spoon.BonjourLauncher.recipes.*recipe*)` for each of the recipe names specified as a parameter to this method. You may invoke this method multiple times or combine multiple recipes into one invocation by specifying more thane one string, each separated by a comma.",
        "examples": [],
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "791",
        "name": "addRecipes",
        "notes": [
          " * This method is basically a wrapper which performs `table.insert(spoon.BonjourLauncher.templates, spoon.BonjourLauncher.recipes.*recipe*)` for each of the recipe names specified as a parameter to this method. You may invoke this method multiple times or combine multiple recipes into one invocation by specifying more thane one string, each separated by a comma."
        ],
        "parameters": [
          " * `recipe`, ... - One or more string values matching a variable name in `BonjourLauncher.recipes` which define basic templates for common services which you may wish to add to your BonjourLauncer chooser window."
        ],
        "returns": [
          " * the BonjourLauncer object"
        ],
        "signature": "BonjourLauncher:addRecipes(recipe...) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BonjourLauncher:bindHotkeys(mapping) -> self",
        "desc": "Binds hotkeys for the BonjourLauncher spoon",
        "doc": "Binds hotkeys for the BonjourLauncher spoon\n\nParameters:\n * `mapping` - A table containing hotkey modifier/key details for one or more of the following commands:\n  * \"show\"   - Show the BonjourLauncher chooser window\n  * \"hide\"   - Hide the BonjourLauncher chooser window\n  * \"toggle\" - Toggles the visibility of the BonjourLauncher window\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:\n   * `command`   - is one of the commands listed above\n   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`\n   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`\n * Psuedo keys for `show` and `toggle` are also supported which can be used to generate hotkeys which will take you to a specific list of services when the BonjourLauncher chooser is displayed. The format of these psuedo keys is `<function>_<label>` where `<label>` matches the `label` field of a specific entry in [BonjourLauncher.templates](#templates); for example:\n        BonjourLauncher:bindHotkeys({\n            -- create a general toggle hotkey\n            toggle     = { { \"cmd\", \"ctrl\", \"alt\"}, \"=\" },\n            -- create a hotkey which will open the chooser to the SSH display, or\n            -- change to it if another service type is currently being viewed. If the\n            -- SSH display is currently being viewed, closes the chooser window (i.e.\n            -- \"toggle\")\n            toggle_SSH = { { \"cmd\", \"ctrl\", \"alt\" }, \"s\" }\n        })\n",
        "examples": [],
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "739",
        "name": "bindHotkeys",
        "notes": [
          " * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:",
          "   * `command`   - is one of the commands listed above",
          "   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`",
          "   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`",
          " * Psuedo keys for `show` and `toggle` are also supported which can be used to generate hotkeys which will take you to a specific list of services when the BonjourLauncher chooser is displayed. The format of these psuedo keys is `<function>_<label>` where `<label>` matches the `label` field of a specific entry in [BonjourLauncher.templates](#templates); for example:",
          "        BonjourLauncher:bindHotkeys({",
          "            -- create a general toggle hotkey",
          "            toggle     = { { \"cmd\", \"ctrl\", \"alt\"}, \"=\" },",
          "            -- create a hotkey which will open the chooser to the SSH display, or",
          "            -- change to it if another service type is currently being viewed. If the",
          "            -- SSH display is currently being viewed, closes the chooser window (i.e.",
          "            -- \"toggle\")",
          "            toggle_SSH = { { \"cmd\", \"ctrl\", \"alt\" }, \"s\" }",
          "        })"
        ],
        "parameters": [
          " * `mapping` - A table containing hotkey modifier/key details for one or more of the following commands:\n   * \"show\"   - Show the BonjourLauncher chooser window\n   * \"hide\"   - Hide the BonjourLauncher chooser window\n   * \"toggle\" - Toggles the visibility of the BonjourLauncher window"
        ],
        "returns": [
          " * the BonjourLauncher spoon object"
        ],
        "signature": "BonjourLauncher:bindHotkeys(mapping) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BonjourLauncher:hide() -> self",
        "desc": "Hides the BonjourLauncher chooser window and clears any active service queries.",
        "doc": "Hides the BonjourLauncher chooser window and clears any active service queries.\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object",
        "examples": [],
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "673",
        "name": "hide",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * the BonjourLauncher spoon object"
        ],
        "signature": "BonjourLauncher:hide() -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BonjourLauncher:show([label]) -> self",
        "desc": "Shows the BonjourLauncher chooser window and begins queries for the currently selected service type.",
        "doc": "Shows the BonjourLauncher chooser window and begins queries for the currently selected service type.\n\nParameters:\n * `label` - an optional string specifying the `label` field of a template defined in [BonjourLauncher.templates](#templates) for a specific service type to show in the chooser window. Defaults to the last selected service type previously viewed or the first one defined in [BonjourLauncher.templates](#templates) if this is the first invocation.\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * Automatically invokes [BonjourLauncher:start()](#start) if this has not already been done.\n * Service queries are grouped by type and the currently visible items can be changed by clicking on the type icon or label in the chooser toolbar if [BonjourLauncher.displayToolbar](#displayToolbar) is true.",
        "examples": [],
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "628",
        "name": "show",
        "notes": [
          " * Automatically invokes [BonjourLauncher:start()](#start) if this has not already been done.",
          " * Service queries are grouped by type and the currently visible items can be changed by clicking on the type icon or label in the chooser toolbar if [BonjourLauncher.displayToolbar](#displayToolbar) is true."
        ],
        "parameters": [
          " * `label` - an optional string specifying the `label` field of a template defined in [BonjourLauncher.templates](#templates) for a specific service type to show in the chooser window. Defaults to the last selected service type previously viewed or the first one defined in [BonjourLauncher.templates](#templates) if this is the first invocation."
        ],
        "returns": [
          " * the BonjourLauncher spoon object"
        ],
        "signature": "BonjourLauncher:show([label]) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BonjourLauncher:start() -> self",
        "desc": "Readys the chooser interface for the BonjourLauncher spoon",
        "doc": "Readys the chooser interface for the BonjourLauncher spoon\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * This method is included to conform to the expected Spoon format; it will automatically be invoked by [BonjourLauncher:show](#show) if necessary.",
        "examples": [],
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "567",
        "name": "start",
        "notes": [
          " * This method is included to conform to the expected Spoon format; it will automatically be invoked by [BonjourLauncher:show](#show) if necessary."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * the BonjourLauncher spoon object"
        ],
        "signature": "BonjourLauncher:start() -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BonjourLauncher:stop() -> self",
        "desc": "Removes the chooser interface for the NonjourLauncher spoon and any lingering service queries",
        "doc": "Removes the chooser interface for the NonjourLauncher spoon and any lingering service queries\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * This method is included to conform to the expected Spoon format; in general, it should be unnecessary to invoke this method directly as service queries are cleared any time an item is selected from the chooser window or the window closes.",
        "examples": [],
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "598",
        "name": "stop",
        "notes": [
          " * This method is included to conform to the expected Spoon format; in general, it should be unnecessary to invoke this method directly as service queries are cleared any time an item is selected from the chooser window or the window closes."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * the BonjourLauncher spoon object"
        ],
        "signature": "BonjourLauncher:stop() -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BonjourLauncher:toggle([label]) -> self",
        "desc": "Toggles the visibility of the BonjourLauncher chooser window.",
        "doc": "Toggles the visibility of the BonjourLauncher chooser window.\n\nParameters:\n * `label` - an optional string specifying the `label` field of a template defined in [BonjourLauncher.templates](#templates) for a specific service type to show or switch to in the chooser window, if the window is already open and the label of the service type currently on display differs.\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * If the chooser window is currently visible, this method will invoke [BonjourLauncher:hide](#hide); otherwise invokes [BonjourLauncher:show](#show).",
        "examples": [],
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "694",
        "name": "toggle",
        "notes": [
          " * If the chooser window is currently visible, this method will invoke [BonjourLauncher:hide](#hide); otherwise invokes [BonjourLauncher:show](#show)."
        ],
        "parameters": [
          " * `label` - an optional string specifying the `label` field of a template defined in [BonjourLauncher.templates](#templates) for a specific service type to show or switch to in the chooser window, if the window is already open and the label of the service type currently on display differs."
        ],
        "returns": [
          " * the BonjourLauncher spoon object"
        ],
        "signature": "BonjourLauncher:toggle([label]) -> self",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "BonjourLauncher.darkMode",
        "desc": "Set whether the BonjourLauncher chooser window should apoear dark themed, aqua themed (light) or track the current system settings for Dark mode. Defaults to nil.",
        "doc": "Set whether the BonjourLauncher chooser window should apoear dark themed, aqua themed (light) or track the current system settings for Dark mode. Defaults to nil.\n\nNotes:\n * This should be a boolean specifying whether the BonjourLauncher chooser window should appear in dark mode (true) or not (false). If set to `nil`, the chooser will track the current system settings for Dark mode.",
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "550",
        "name": "darkMode",
        "notes": [
          " * This should be a boolean specifying whether the BonjourLauncher chooser window should appear in dark mode (true) or not (false). If set to `nil`, the chooser will track the current system settings for Dark mode."
        ],
        "signature": "BonjourLauncher.darkMode",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.displayToolbar",
        "desc": "Whether or not to display a toolbar at the top of the BonjourLauncher chooser window. Defaults to true.",
        "doc": "Whether or not to display a toolbar at the top of the BonjourLauncher chooser window. Defaults to true.\n\nNotes:\n * This boolean variable determines if the toolbar which allows changing the currently visible service type is displayed when the BonjourLauncher chooser window is presented. If you set this to `false` then you will only be able to change the currently visible services with the [BonjourLauncher:show(serviceType)](#show) and [BonjourLauncher:toggle(serviceType)](#toggle) methods.",
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "508",
        "name": "displayToolbar",
        "notes": [
          " * This boolean variable determines if the toolbar which allows changing the currently visible service type is displayed when the BonjourLauncher chooser window is presented. If you set this to `false` then you will only be able to change the currently visible services with the [BonjourLauncher:show(serviceType)](#show) and [BonjourLauncher:toggle(serviceType)](#toggle) methods."
        ],
        "signature": "BonjourLauncher.displayToolbar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.rows",
        "desc": "The number of rows to display when the chooser is visible. Defaults to 10.",
        "doc": "The number of rows to display when the chooser is visible. Defaults to 10.\n\nNotes:\n * Set this variable to an integer to specify the number of rows of choices to display when the BonjourLauncher chooser window is visible. Set it to `nil` to revert to the default.",
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "516",
        "name": "rows",
        "notes": [
          " * Set this variable to an integer to specify the number of rows of choices to display when the BonjourLauncher chooser window is visible. Set it to `nil` to revert to the default."
        ],
        "signature": "BonjourLauncher.rows",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.subTextColor",
        "desc": "Sets the color of the subText for each service listed in the BonjourLauncher chooser window. Defaults to nil.",
        "doc": "Sets the color of the subText for each service listed in the BonjourLauncher chooser window. Defaults to nil.\n\nNotes:\n * This should be a table representing a color as defined by the `hs.drawing.color` module documentation, or nil to revert to the `hs.chooser` module default.\n * You can override this on a per template basis by including the `subTextColor` field in the service type definition. See [BonjourLauncher.templates](#templates).",
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "541",
        "name": "subTextColor",
        "notes": [
          " * This should be a table representing a color as defined by the `hs.drawing.color` module documentation, or nil to revert to the `hs.chooser` module default.",
          " * You can override this on a per template basis by including the `subTextColor` field in the service type definition. See [BonjourLauncher.templates](#templates)."
        ],
        "signature": "BonjourLauncher.subTextColor",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.templates",
        "desc": "A table specifying the service types which the BonjourLauncher looks for on your network and defines how to display and launch discovered services.",
        "doc": "A table specifying the service types which the BonjourLauncher looks for on your network and defines how to display and launch discovered services.\n\nNotes:\n * This table should be an array of tables, with each table in the array specifying a service type.\n * Changes to this variable will be reflected the next time the BonjourLauncher chooser window is shown -- if it is currently visible when changes are made, the new changes will *NOT* be reflected in the currently open chooser.\n * Each service type table entry should contain one or more of the following keys:\n   * `type`         - a required string specifying the type of advertisement to search for with this entry. Example service types can be seen in `hs.bonjour.serviceTypes`.\n   * `label`        - an optional string, defaulting to the value for `type`, specifying the label for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customized the toolbar's visual properties. Note that this field is used for internally identifying different template views, so it must be unique among the template entries where `disabled` is false or undefined.\n   * `image`        - an optional `hs.image` object specifying the image to display for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customized the toolbar's visual properties.\n   * `text`         - an optional string, defaulting to \"%name%\", specifying the text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.\n   * `subText`      - an optional string, specifying the sub-text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.\n   * `filter`       - an optional function which can be used to filter out advertised services which you do not wish to include in the chooser window. The function should expect two parameters, the `hs.bonjour.service` object for the discovered service and a table containing all of the key-value pairs of the service template with values expanded to describe what is known about this specific service. The filter function should return `true` if the service is to be included or `false` if the service is to be omitted.\n   * `fn`           - The function to invoke. This function should expect two arguments, the `hs.bonjour.service` object for the selected service and a table containing all of the key-value pairs of the service template with values expanded to describe what is known about this specific service. Any return value for the function is ignored. If this is present, `url` and `cmd` will be ignored by the default handler, though they may be accessed through the second argument to the function.\n   * `url`          - The url to open with `hs.urlevent.openURL`. If this is present, `cmd` is ignored.\n   * `cmd`          - The command to execute with `hs.execute`.\n   * `hidden`       - an optional boolean, default false, that can be used to specify that the service list should not be displayed in the toolbar by default. You can still access these service types by specifying them as arguments to the [BonjourLauncher:show](#show) or [BonjourLauncher:toggle](#toggle) methods, or by creating a psuedo-key for the service type with [BonjourLauncher:bindHotkeys](#bindHotkeys). If the user customizes the toolbar by right-clicking on it, they can add this service to the toolbar, but it won't be in the default list.\n   * `disabled`      - an optional boolean, default false, specifying that this service should be skipped entirely is not available for viewing by any means.\n   * `textColor`    - an optional color table as defined in the `hs.drawing.color` module documentation to be used for the text displayed for each discovered service when this template is being displayed in the BonjourLauncher chooser. If not present, the color specified for [BonjourLauncher.textColor](#textColor) will be used.\n   * `subTextColor` - an optional color table as defined in the `hs.drawing.color` module documentation to be used for the sub-text displayed for each discovered service when this template is being displayed in the BonjourLauncher chooser. If not present, the color specified for [BonjourLauncher.subTextColor](#subTextColor) will be used.\n   * Additional key-value pairs do not have special meaning for this spoon but kay-value pairs with a string for the value will be included in the second argument passwd to `fn`, if present.\n * Note that only `type` and one of `url`, `cmd`, or `fn` must be provided -- everything else is optional.\n * For all keys, except for `type` and `label`, in the template definition which have string values, the following substring patterns will be matched and replaced as described below:\n   * `%address%`   - Will be replaced with the first address discovered for the service when it is resolved.\n     * `%address4%` - Variant of `%address%` which is replaced with the first IPv4 address or \"n/a\" if one cannot be found or has not been discovered yet.\n     * `%address6%` - Variant of `%address%` which is replaced with the first IPv6 address or \"n/a\" if one cannot be found or has not been discovered yet.\n   * `%domain%`    - Will be replaced with the domain the service was found in, usually \"local.\"\n   * `%hostname%`  - Will be replaced with the hostname on which the service is being offered\n   * `%name%`      - Will be replaced with the name of the advertised service.\n   * `%port%`      - Will be replaced with the port number on the machine that the service is provided on.\n   * `%txt:<key>%` - Will be replaced with the value for the specified `<key>` of the text records associated with the service, or an empty string if no such key is present. To see the list of text record key-value pairs for a specific service, you can right click on it while it is being displayed in the BonjourLauncher chooser window (press the `escape` key to clear it).",
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "429",
        "name": "templates",
        "notes": [
          " * This table should be an array of tables, with each table in the array specifying a service type.",
          " * Changes to this variable will be reflected the next time the BonjourLauncher chooser window is shown -- if it is currently visible when changes are made, the new changes will *NOT* be reflected in the currently open chooser.",
          " * Each service type table entry should contain one or more of the following keys:",
          "   * `type`         - a required string specifying the type of advertisement to search for with this entry. Example service types can be seen in `hs.bonjour.serviceTypes`.",
          "   * `label`        - an optional string, defaulting to the value for `type`, specifying the label for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customized the toolbar's visual properties. Note that this field is used for internally identifying different template views, so it must be unique among the template entries where `disabled` is false or undefined.",
          "   * `image`        - an optional `hs.image` object specifying the image to display for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customized the toolbar's visual properties.",
          "   * `text`         - an optional string, defaulting to \"%name%\", specifying the text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.",
          "   * `subText`      - an optional string, specifying the sub-text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.",
          "   * `filter`       - an optional function which can be used to filter out advertised services which you do not wish to include in the chooser window. The function should expect two parameters, the `hs.bonjour.service` object for the discovered service and a table containing all of the key-value pairs of the service template with values expanded to describe what is known about this specific service. The filter function should return `true` if the service is to be included or `false` if the service is to be omitted.",
          "   * `fn`           - The function to invoke. This function should expect two arguments, the `hs.bonjour.service` object for the selected service and a table containing all of the key-value pairs of the service template with values expanded to describe what is known about this specific service. Any return value for the function is ignored. If this is present, `url` and `cmd` will be ignored by the default handler, though they may be accessed through the second argument to the function.",
          "   * `url`          - The url to open with `hs.urlevent.openURL`. If this is present, `cmd` is ignored.",
          "   * `cmd`          - The command to execute with `hs.execute`.",
          "   * `hidden`       - an optional boolean, default false, that can be used to specify that the service list should not be displayed in the toolbar by default. You can still access these service types by specifying them as arguments to the [BonjourLauncher:show](#show) or [BonjourLauncher:toggle](#toggle) methods, or by creating a psuedo-key for the service type with [BonjourLauncher:bindHotkeys](#bindHotkeys). If the user customizes the toolbar by right-clicking on it, they can add this service to the toolbar, but it won't be in the default list.",
          "   * `disabled`      - an optional boolean, default false, specifying that this service should be skipped entirely is not available for viewing by any means.",
          "   * `textColor`    - an optional color table as defined in the `hs.drawing.color` module documentation to be used for the text displayed for each discovered service when this template is being displayed in the BonjourLauncher chooser. If not present, the color specified for [BonjourLauncher.textColor](#textColor) will be used.",
          "   * `subTextColor` - an optional color table as defined in the `hs.drawing.color` module documentation to be used for the sub-text displayed for each discovered service when this template is being displayed in the BonjourLauncher chooser. If not present, the color specified for [BonjourLauncher.subTextColor](#subTextColor) will be used.",
          "   * Additional key-value pairs do not have special meaning for this spoon but kay-value pairs with a string for the value will be included in the second argument passwd to `fn`, if present.",
          " * Note that only `type` and one of `url`, `cmd`, or `fn` must be provided -- everything else is optional.",
          " * For all keys, except for `type` and `label`, in the template definition which have string values, the following substring patterns will be matched and replaced as described below:",
          "   * `%address%`   - Will be replaced with the first address discovered for the service when it is resolved.",
          "     * `%address4%` - Variant of `%address%` which is replaced with the first IPv4 address or \"n/a\" if one cannot be found or has not been discovered yet.",
          "     * `%address6%` - Variant of `%address%` which is replaced with the first IPv6 address or \"n/a\" if one cannot be found or has not been discovered yet.",
          "   * `%domain%`    - Will be replaced with the domain the service was found in, usually \"local.\"",
          "   * `%hostname%`  - Will be replaced with the hostname on which the service is being offered",
          "   * `%name%`      - Will be replaced with the name of the advertised service.",
          "   * `%port%`      - Will be replaced with the port number on the machine that the service is provided on.",
          "   * `%txt:<key>%` - Will be replaced with the value for the specified `<key>` of the text records associated with the service, or an empty string if no such key is present. To see the list of text record key-value pairs for a specific service, you can right click on it while it is being displayed in the BonjourLauncher chooser window (press the `escape` key to clear it)."
        ],
        "signature": "BonjourLauncher.templates",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.textColor",
        "desc": "Sets the color of the primary text for each service listed in the BonjourLauncher chooser window. Defaults to nil.",
        "doc": "Sets the color of the primary text for each service listed in the BonjourLauncher chooser window. Defaults to nil.\n\nNotes:\n * This should be a table representing a color as defined by the `hs.drawing.color` module documentation, or nil to revert to the `hs.chooser` module default.\n * You can override this on a per template basis by including the `textColor` field in the service type definition. See [BonjourLauncher.templates](#templates).",
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "532",
        "name": "textColor",
        "notes": [
          " * This should be a table representing a color as defined by the `hs.drawing.color` module documentation, or nil to revert to the `hs.chooser` module default.",
          " * You can override this on a per template basis by including the `textColor` field in the service type definition. See [BonjourLauncher.templates](#templates)."
        ],
        "signature": "BonjourLauncher.textColor",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.width",
        "desc": "The width of the BonjourLauncher chooser window as a percentage of the screen size. Defaults to 40.",
        "doc": "The width of the BonjourLauncher chooser window as a percentage of the screen size. Defaults to 40.\n\nNotes:\n * Set this variable to a numeric value between 1 and 100 to specify the percentage of screen the screen's width the BonjourLauncher window should occupy when visible. Set it to `nil` to revert to the default.",
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "524",
        "name": "width",
        "notes": [
          " * Set this variable to a numeric value between 1 and 100 to specify the percentage of screen the screen's width the BonjourLauncher window should occupy when visible. Set it to `nil` to revert to the default."
        ],
        "signature": "BonjourLauncher.width",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "List advertised services on your network that match defined templates and provide a list for the user to access them.",
    "doc": "List advertised services on your network that match defined templates and provide a list for the user to access them.\n\nSafari used to provide a list of web servers which advertised themselves via Bonjour in the Bookmarks menu or in a pop-up menu off of the toolbar. This feature was removed some time ago, for reasons best known to Apple.\n\nBecause I always found it useful to use these advertised web servers to check on the status of printer ink levels, etc. on my network, the `hs.bonjour` module and this spoon bring back an easy way to see what devices on your network are advertising a web server, and many other services which can use Bonjour (also sometimes referred to as ZeroConf or Avahi, especially on Linux servers) to advertise their presence.",
    "items": [
      {
        "def": "BonjourLauncher:addRecipes(recipe...) -> self",
        "desc": "Add predefined recipes to [BonjourLauncher.templates](#templates) for display by the BonjourLauncher chooser.",
        "doc": "Add predefined recipes to [BonjourLauncher.templates](#templates) for display by the BonjourLauncher chooser.\n\nParameters:\n * `recipe`, ... - One or more string values matching a variable name in `BonjourLauncher.recipes` which define basic templates for common services which you may wish to add to your BonjourLauncer chooser window.\n\nReturns:\n * the BonjourLauncer object\n\nNotes:\n * This method is basically a wrapper which performs `table.insert(spoon.BonjourLauncher.templates, spoon.BonjourLauncher.recipes.*recipe*)` for each of the recipe names specified as a parameter to this method. You may invoke this method multiple times or combine multiple recipes into one invocation by specifying more thane one string, each separated by a comma.",
        "examples": [],
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "791",
        "name": "addRecipes",
        "notes": [
          " * This method is basically a wrapper which performs `table.insert(spoon.BonjourLauncher.templates, spoon.BonjourLauncher.recipes.*recipe*)` for each of the recipe names specified as a parameter to this method. You may invoke this method multiple times or combine multiple recipes into one invocation by specifying more thane one string, each separated by a comma."
        ],
        "parameters": [
          " * `recipe`, ... - One or more string values matching a variable name in `BonjourLauncher.recipes` which define basic templates for common services which you may wish to add to your BonjourLauncer chooser window."
        ],
        "returns": [
          " * the BonjourLauncer object"
        ],
        "signature": "BonjourLauncher:addRecipes(recipe...) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BonjourLauncher:bindHotkeys(mapping) -> self",
        "desc": "Binds hotkeys for the BonjourLauncher spoon",
        "doc": "Binds hotkeys for the BonjourLauncher spoon\n\nParameters:\n * `mapping` - A table containing hotkey modifier/key details for one or more of the following commands:\n  * \"show\"   - Show the BonjourLauncher chooser window\n  * \"hide\"   - Hide the BonjourLauncher chooser window\n  * \"toggle\" - Toggles the visibility of the BonjourLauncher window\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:\n   * `command`   - is one of the commands listed above\n   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`\n   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`\n * Psuedo keys for `show` and `toggle` are also supported which can be used to generate hotkeys which will take you to a specific list of services when the BonjourLauncher chooser is displayed. The format of these psuedo keys is `<function>_<label>` where `<label>` matches the `label` field of a specific entry in [BonjourLauncher.templates](#templates); for example:\n        BonjourLauncher:bindHotkeys({\n            -- create a general toggle hotkey\n            toggle     = { { \"cmd\", \"ctrl\", \"alt\"}, \"=\" },\n            -- create a hotkey which will open the chooser to the SSH display, or\n            -- change to it if another service type is currently being viewed. If the\n            -- SSH display is currently being viewed, closes the chooser window (i.e.\n            -- \"toggle\")\n            toggle_SSH = { { \"cmd\", \"ctrl\", \"alt\" }, \"s\" }\n        })\n",
        "examples": [],
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "739",
        "name": "bindHotkeys",
        "notes": [
          " * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:",
          "   * `command`   - is one of the commands listed above",
          "   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`",
          "   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`",
          " * Psuedo keys for `show` and `toggle` are also supported which can be used to generate hotkeys which will take you to a specific list of services when the BonjourLauncher chooser is displayed. The format of these psuedo keys is `<function>_<label>` where `<label>` matches the `label` field of a specific entry in [BonjourLauncher.templates](#templates); for example:",
          "        BonjourLauncher:bindHotkeys({",
          "            -- create a general toggle hotkey",
          "            toggle     = { { \"cmd\", \"ctrl\", \"alt\"}, \"=\" },",
          "            -- create a hotkey which will open the chooser to the SSH display, or",
          "            -- change to it if another service type is currently being viewed. If the",
          "            -- SSH display is currently being viewed, closes the chooser window (i.e.",
          "            -- \"toggle\")",
          "            toggle_SSH = { { \"cmd\", \"ctrl\", \"alt\" }, \"s\" }",
          "        })"
        ],
        "parameters": [
          " * `mapping` - A table containing hotkey modifier/key details for one or more of the following commands:\n   * \"show\"   - Show the BonjourLauncher chooser window\n   * \"hide\"   - Hide the BonjourLauncher chooser window\n   * \"toggle\" - Toggles the visibility of the BonjourLauncher window"
        ],
        "returns": [
          " * the BonjourLauncher spoon object"
        ],
        "signature": "BonjourLauncher:bindHotkeys(mapping) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BonjourLauncher.darkMode",
        "desc": "Set whether the BonjourLauncher chooser window should apoear dark themed, aqua themed (light) or track the current system settings for Dark mode. Defaults to nil.",
        "doc": "Set whether the BonjourLauncher chooser window should apoear dark themed, aqua themed (light) or track the current system settings for Dark mode. Defaults to nil.\n\nNotes:\n * This should be a boolean specifying whether the BonjourLauncher chooser window should appear in dark mode (true) or not (false). If set to `nil`, the chooser will track the current system settings for Dark mode.",
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "550",
        "name": "darkMode",
        "notes": [
          " * This should be a boolean specifying whether the BonjourLauncher chooser window should appear in dark mode (true) or not (false). If set to `nil`, the chooser will track the current system settings for Dark mode."
        ],
        "signature": "BonjourLauncher.darkMode",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.displayToolbar",
        "desc": "Whether or not to display a toolbar at the top of the BonjourLauncher chooser window. Defaults to true.",
        "doc": "Whether or not to display a toolbar at the top of the BonjourLauncher chooser window. Defaults to true.\n\nNotes:\n * This boolean variable determines if the toolbar which allows changing the currently visible service type is displayed when the BonjourLauncher chooser window is presented. If you set this to `false` then you will only be able to change the currently visible services with the [BonjourLauncher:show(serviceType)](#show) and [BonjourLauncher:toggle(serviceType)](#toggle) methods.",
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "508",
        "name": "displayToolbar",
        "notes": [
          " * This boolean variable determines if the toolbar which allows changing the currently visible service type is displayed when the BonjourLauncher chooser window is presented. If you set this to `false` then you will only be able to change the currently visible services with the [BonjourLauncher:show(serviceType)](#show) and [BonjourLauncher:toggle(serviceType)](#toggle) methods."
        ],
        "signature": "BonjourLauncher.displayToolbar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher:hide() -> self",
        "desc": "Hides the BonjourLauncher chooser window and clears any active service queries.",
        "doc": "Hides the BonjourLauncher chooser window and clears any active service queries.\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object",
        "examples": [],
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "673",
        "name": "hide",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * the BonjourLauncher spoon object"
        ],
        "signature": "BonjourLauncher:hide() -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BonjourLauncher.rows",
        "desc": "The number of rows to display when the chooser is visible. Defaults to 10.",
        "doc": "The number of rows to display when the chooser is visible. Defaults to 10.\n\nNotes:\n * Set this variable to an integer to specify the number of rows of choices to display when the BonjourLauncher chooser window is visible. Set it to `nil` to revert to the default.",
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "516",
        "name": "rows",
        "notes": [
          " * Set this variable to an integer to specify the number of rows of choices to display when the BonjourLauncher chooser window is visible. Set it to `nil` to revert to the default."
        ],
        "signature": "BonjourLauncher.rows",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher:show([label]) -> self",
        "desc": "Shows the BonjourLauncher chooser window and begins queries for the currently selected service type.",
        "doc": "Shows the BonjourLauncher chooser window and begins queries for the currently selected service type.\n\nParameters:\n * `label` - an optional string specifying the `label` field of a template defined in [BonjourLauncher.templates](#templates) for a specific service type to show in the chooser window. Defaults to the last selected service type previously viewed or the first one defined in [BonjourLauncher.templates](#templates) if this is the first invocation.\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * Automatically invokes [BonjourLauncher:start()](#start) if this has not already been done.\n * Service queries are grouped by type and the currently visible items can be changed by clicking on the type icon or label in the chooser toolbar if [BonjourLauncher.displayToolbar](#displayToolbar) is true.",
        "examples": [],
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "628",
        "name": "show",
        "notes": [
          " * Automatically invokes [BonjourLauncher:start()](#start) if this has not already been done.",
          " * Service queries are grouped by type and the currently visible items can be changed by clicking on the type icon or label in the chooser toolbar if [BonjourLauncher.displayToolbar](#displayToolbar) is true."
        ],
        "parameters": [
          " * `label` - an optional string specifying the `label` field of a template defined in [BonjourLauncher.templates](#templates) for a specific service type to show in the chooser window. Defaults to the last selected service type previously viewed or the first one defined in [BonjourLauncher.templates](#templates) if this is the first invocation."
        ],
        "returns": [
          " * the BonjourLauncher spoon object"
        ],
        "signature": "BonjourLauncher:show([label]) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BonjourLauncher:start() -> self",
        "desc": "Readys the chooser interface for the BonjourLauncher spoon",
        "doc": "Readys the chooser interface for the BonjourLauncher spoon\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * This method is included to conform to the expected Spoon format; it will automatically be invoked by [BonjourLauncher:show](#show) if necessary.",
        "examples": [],
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "567",
        "name": "start",
        "notes": [
          " * This method is included to conform to the expected Spoon format; it will automatically be invoked by [BonjourLauncher:show](#show) if necessary."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * the BonjourLauncher spoon object"
        ],
        "signature": "BonjourLauncher:start() -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BonjourLauncher:stop() -> self",
        "desc": "Removes the chooser interface for the NonjourLauncher spoon and any lingering service queries",
        "doc": "Removes the chooser interface for the NonjourLauncher spoon and any lingering service queries\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * This method is included to conform to the expected Spoon format; in general, it should be unnecessary to invoke this method directly as service queries are cleared any time an item is selected from the chooser window or the window closes.",
        "examples": [],
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "598",
        "name": "stop",
        "notes": [
          " * This method is included to conform to the expected Spoon format; in general, it should be unnecessary to invoke this method directly as service queries are cleared any time an item is selected from the chooser window or the window closes."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * the BonjourLauncher spoon object"
        ],
        "signature": "BonjourLauncher:stop() -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BonjourLauncher.subTextColor",
        "desc": "Sets the color of the subText for each service listed in the BonjourLauncher chooser window. Defaults to nil.",
        "doc": "Sets the color of the subText for each service listed in the BonjourLauncher chooser window. Defaults to nil.\n\nNotes:\n * This should be a table representing a color as defined by the `hs.drawing.color` module documentation, or nil to revert to the `hs.chooser` module default.\n * You can override this on a per template basis by including the `subTextColor` field in the service type definition. See [BonjourLauncher.templates](#templates).",
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "541",
        "name": "subTextColor",
        "notes": [
          " * This should be a table representing a color as defined by the `hs.drawing.color` module documentation, or nil to revert to the `hs.chooser` module default.",
          " * You can override this on a per template basis by including the `subTextColor` field in the service type definition. See [BonjourLauncher.templates](#templates)."
        ],
        "signature": "BonjourLauncher.subTextColor",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.templates",
        "desc": "A table specifying the service types which the BonjourLauncher looks for on your network and defines how to display and launch discovered services.",
        "doc": "A table specifying the service types which the BonjourLauncher looks for on your network and defines how to display and launch discovered services.\n\nNotes:\n * This table should be an array of tables, with each table in the array specifying a service type.\n * Changes to this variable will be reflected the next time the BonjourLauncher chooser window is shown -- if it is currently visible when changes are made, the new changes will *NOT* be reflected in the currently open chooser.\n * Each service type table entry should contain one or more of the following keys:\n   * `type`         - a required string specifying the type of advertisement to search for with this entry. Example service types can be seen in `hs.bonjour.serviceTypes`.\n   * `label`        - an optional string, defaulting to the value for `type`, specifying the label for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customized the toolbar's visual properties. Note that this field is used for internally identifying different template views, so it must be unique among the template entries where `disabled` is false or undefined.\n   * `image`        - an optional `hs.image` object specifying the image to display for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customized the toolbar's visual properties.\n   * `text`         - an optional string, defaulting to \"%name%\", specifying the text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.\n   * `subText`      - an optional string, specifying the sub-text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.\n   * `filter`       - an optional function which can be used to filter out advertised services which you do not wish to include in the chooser window. The function should expect two parameters, the `hs.bonjour.service` object for the discovered service and a table containing all of the key-value pairs of the service template with values expanded to describe what is known about this specific service. The filter function should return `true` if the service is to be included or `false` if the service is to be omitted.\n   * `fn`           - The function to invoke. This function should expect two arguments, the `hs.bonjour.service` object for the selected service and a table containing all of the key-value pairs of the service template with values expanded to describe what is known about this specific service. Any return value for the function is ignored. If this is present, `url` and `cmd` will be ignored by the default handler, though they may be accessed through the second argument to the function.\n   * `url`          - The url to open with `hs.urlevent.openURL`. If this is present, `cmd` is ignored.\n   * `cmd`          - The command to execute with `hs.execute`.\n   * `hidden`       - an optional boolean, default false, that can be used to specify that the service list should not be displayed in the toolbar by default. You can still access these service types by specifying them as arguments to the [BonjourLauncher:show](#show) or [BonjourLauncher:toggle](#toggle) methods, or by creating a psuedo-key for the service type with [BonjourLauncher:bindHotkeys](#bindHotkeys). If the user customizes the toolbar by right-clicking on it, they can add this service to the toolbar, but it won't be in the default list.\n   * `disabled`      - an optional boolean, default false, specifying that this service should be skipped entirely is not available for viewing by any means.\n   * `textColor`    - an optional color table as defined in the `hs.drawing.color` module documentation to be used for the text displayed for each discovered service when this template is being displayed in the BonjourLauncher chooser. If not present, the color specified for [BonjourLauncher.textColor](#textColor) will be used.\n   * `subTextColor` - an optional color table as defined in the `hs.drawing.color` module documentation to be used for the sub-text displayed for each discovered service when this template is being displayed in the BonjourLauncher chooser. If not present, the color specified for [BonjourLauncher.subTextColor](#subTextColor) will be used.\n   * Additional key-value pairs do not have special meaning for this spoon but kay-value pairs with a string for the value will be included in the second argument passwd to `fn`, if present.\n * Note that only `type` and one of `url`, `cmd`, or `fn` must be provided -- everything else is optional.\n * For all keys, except for `type` and `label`, in the template definition which have string values, the following substring patterns will be matched and replaced as described below:\n   * `%address%`   - Will be replaced with the first address discovered for the service when it is resolved.\n     * `%address4%` - Variant of `%address%` which is replaced with the first IPv4 address or \"n/a\" if one cannot be found or has not been discovered yet.\n     * `%address6%` - Variant of `%address%` which is replaced with the first IPv6 address or \"n/a\" if one cannot be found or has not been discovered yet.\n   * `%domain%`    - Will be replaced with the domain the service was found in, usually \"local.\"\n   * `%hostname%`  - Will be replaced with the hostname on which the service is being offered\n   * `%name%`      - Will be replaced with the name of the advertised service.\n   * `%port%`      - Will be replaced with the port number on the machine that the service is provided on.\n   * `%txt:<key>%` - Will be replaced with the value for the specified `<key>` of the text records associated with the service, or an empty string if no such key is present. To see the list of text record key-value pairs for a specific service, you can right click on it while it is being displayed in the BonjourLauncher chooser window (press the `escape` key to clear it).",
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "429",
        "name": "templates",
        "notes": [
          " * This table should be an array of tables, with each table in the array specifying a service type.",
          " * Changes to this variable will be reflected the next time the BonjourLauncher chooser window is shown -- if it is currently visible when changes are made, the new changes will *NOT* be reflected in the currently open chooser.",
          " * Each service type table entry should contain one or more of the following keys:",
          "   * `type`         - a required string specifying the type of advertisement to search for with this entry. Example service types can be seen in `hs.bonjour.serviceTypes`.",
          "   * `label`        - an optional string, defaulting to the value for `type`, specifying the label for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customized the toolbar's visual properties. Note that this field is used for internally identifying different template views, so it must be unique among the template entries where `disabled` is false or undefined.",
          "   * `image`        - an optional `hs.image` object specifying the image to display for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customized the toolbar's visual properties.",
          "   * `text`         - an optional string, defaulting to \"%name%\", specifying the text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.",
          "   * `subText`      - an optional string, specifying the sub-text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.",
          "   * `filter`       - an optional function which can be used to filter out advertised services which you do not wish to include in the chooser window. The function should expect two parameters, the `hs.bonjour.service` object for the discovered service and a table containing all of the key-value pairs of the service template with values expanded to describe what is known about this specific service. The filter function should return `true` if the service is to be included or `false` if the service is to be omitted.",
          "   * `fn`           - The function to invoke. This function should expect two arguments, the `hs.bonjour.service` object for the selected service and a table containing all of the key-value pairs of the service template with values expanded to describe what is known about this specific service. Any return value for the function is ignored. If this is present, `url` and `cmd` will be ignored by the default handler, though they may be accessed through the second argument to the function.",
          "   * `url`          - The url to open with `hs.urlevent.openURL`. If this is present, `cmd` is ignored.",
          "   * `cmd`          - The command to execute with `hs.execute`.",
          "   * `hidden`       - an optional boolean, default false, that can be used to specify that the service list should not be displayed in the toolbar by default. You can still access these service types by specifying them as arguments to the [BonjourLauncher:show](#show) or [BonjourLauncher:toggle](#toggle) methods, or by creating a psuedo-key for the service type with [BonjourLauncher:bindHotkeys](#bindHotkeys). If the user customizes the toolbar by right-clicking on it, they can add this service to the toolbar, but it won't be in the default list.",
          "   * `disabled`      - an optional boolean, default false, specifying that this service should be skipped entirely is not available for viewing by any means.",
          "   * `textColor`    - an optional color table as defined in the `hs.drawing.color` module documentation to be used for the text displayed for each discovered service when this template is being displayed in the BonjourLauncher chooser. If not present, the color specified for [BonjourLauncher.textColor](#textColor) will be used.",
          "   * `subTextColor` - an optional color table as defined in the `hs.drawing.color` module documentation to be used for the sub-text displayed for each discovered service when this template is being displayed in the BonjourLauncher chooser. If not present, the color specified for [BonjourLauncher.subTextColor](#subTextColor) will be used.",
          "   * Additional key-value pairs do not have special meaning for this spoon but kay-value pairs with a string for the value will be included in the second argument passwd to `fn`, if present.",
          " * Note that only `type` and one of `url`, `cmd`, or `fn` must be provided -- everything else is optional.",
          " * For all keys, except for `type` and `label`, in the template definition which have string values, the following substring patterns will be matched and replaced as described below:",
          "   * `%address%`   - Will be replaced with the first address discovered for the service when it is resolved.",
          "     * `%address4%` - Variant of `%address%` which is replaced with the first IPv4 address or \"n/a\" if one cannot be found or has not been discovered yet.",
          "     * `%address6%` - Variant of `%address%` which is replaced with the first IPv6 address or \"n/a\" if one cannot be found or has not been discovered yet.",
          "   * `%domain%`    - Will be replaced with the domain the service was found in, usually \"local.\"",
          "   * `%hostname%`  - Will be replaced with the hostname on which the service is being offered",
          "   * `%name%`      - Will be replaced with the name of the advertised service.",
          "   * `%port%`      - Will be replaced with the port number on the machine that the service is provided on.",
          "   * `%txt:<key>%` - Will be replaced with the value for the specified `<key>` of the text records associated with the service, or an empty string if no such key is present. To see the list of text record key-value pairs for a specific service, you can right click on it while it is being displayed in the BonjourLauncher chooser window (press the `escape` key to clear it)."
        ],
        "signature": "BonjourLauncher.templates",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.textColor",
        "desc": "Sets the color of the primary text for each service listed in the BonjourLauncher chooser window. Defaults to nil.",
        "doc": "Sets the color of the primary text for each service listed in the BonjourLauncher chooser window. Defaults to nil.\n\nNotes:\n * This should be a table representing a color as defined by the `hs.drawing.color` module documentation, or nil to revert to the `hs.chooser` module default.\n * You can override this on a per template basis by including the `textColor` field in the service type definition. See [BonjourLauncher.templates](#templates).",
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "532",
        "name": "textColor",
        "notes": [
          " * This should be a table representing a color as defined by the `hs.drawing.color` module documentation, or nil to revert to the `hs.chooser` module default.",
          " * You can override this on a per template basis by including the `textColor` field in the service type definition. See [BonjourLauncher.templates](#templates)."
        ],
        "signature": "BonjourLauncher.textColor",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher:toggle([label]) -> self",
        "desc": "Toggles the visibility of the BonjourLauncher chooser window.",
        "doc": "Toggles the visibility of the BonjourLauncher chooser window.\n\nParameters:\n * `label` - an optional string specifying the `label` field of a template defined in [BonjourLauncher.templates](#templates) for a specific service type to show or switch to in the chooser window, if the window is already open and the label of the service type currently on display differs.\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * If the chooser window is currently visible, this method will invoke [BonjourLauncher:hide](#hide); otherwise invokes [BonjourLauncher:show](#show).",
        "examples": [],
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "694",
        "name": "toggle",
        "notes": [
          " * If the chooser window is currently visible, this method will invoke [BonjourLauncher:hide](#hide); otherwise invokes [BonjourLauncher:show](#show)."
        ],
        "parameters": [
          " * `label` - an optional string specifying the `label` field of a template defined in [BonjourLauncher.templates](#templates) for a specific service type to show or switch to in the chooser window, if the window is already open and the label of the service type currently on display differs."
        ],
        "returns": [
          " * the BonjourLauncher spoon object"
        ],
        "signature": "BonjourLauncher:toggle([label]) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BonjourLauncher.width",
        "desc": "The width of the BonjourLauncher chooser window as a percentage of the screen size. Defaults to 40.",
        "doc": "The width of the BonjourLauncher chooser window as a percentage of the screen size. Defaults to 40.\n\nNotes:\n * Set this variable to a numeric value between 1 and 100 to specify the percentage of screen the screen's width the BonjourLauncher window should occupy when visible. Set it to `nil` to revert to the default.",
        "file": "Source/BonjourLauncher.spoon/init.lua",
        "lineno": "524",
        "name": "width",
        "notes": [
          " * Set this variable to a numeric value between 1 and 100 to specify the percentage of screen the screen's width the BonjourLauncher window should occupy when visible. Set it to `nil` to revert to the default."
        ],
        "signature": "BonjourLauncher.width",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "BonjourLauncher",
    "stripped_doc": "\nSafari used to provide a list of web servers which advertised themselves via Bonjour in the Bookmarks menu or in a pop-up menu off of the toolbar. This feature was removed some time ago, for reasons best known to Apple.\n\nBecause I always found it useful to use these advertised web servers to check on the status of printer ink levels, etc. on my network, the `hs.bonjour` module and this spoon bring back an easy way to see what devices on your network are advertising a web server, and many other services which can use Bonjour (also sometimes referred to as ZeroConf or Avahi, especially on Linux servers) to advertise their presence.",
    "submodules": [
      "recipes"
    ],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [
      {
        "def": "BonjourLauncher.recipes.AFP",
        "desc": "Display computers and servers advertising AppleShare file server services advertised with the `_afpovertcp._tcp.` service type. This was the default with earlier versions of MacOS and is still used by Apple AirPort and Time Machine file servers.",
        "doc": "Display computers and servers advertising AppleShare file server services advertised with the `_afpovertcp._tcp.` service type. This was the default with earlier versions of MacOS and is still used by Apple AirPort and Time Machine file servers.\n\nNotes:\n * AppleShare connections are initiated by the URL `afp://%hostname%:%port%`, which usually opens up a dialog in the Finder which may prompt you for login credentials.\n * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"AFP\")` after the spoon has loaded, and is defined as follows:\n    {\n        image   = hs.canvas.new{ h = 128, w = 128 }:appendElements(\n                      { type=\"image\", image = hs.image.imageFromName(\"NSNetwork\"), imageAlpha = 0.5 },\n                      { type=\"image\", image = hs.image.imageFromName(\"NSTouchBarColorPickerFont\") }\n                  ):imageFromCanvas(),\n        label   = \"AFP\",\n        type    = \"_afpovertcp._tcp.\",\n        text    = \"%name%\",\n        subText = \"afp://%hostname%:%port%\",\n        url     = \"afp://%hostname%:%port%\",\n    }",
        "file": "Source/BonjourLauncher.spoon/recipes.lua",
        "lineno": "79",
        "name": "AFP",
        "notes": [
          " * AppleShare connections are initiated by the URL `afp://%hostname%:%port%`, which usually opens up a dialog in the Finder which may prompt you for login credentials.",
          " * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"AFP\")` after the spoon has loaded, and is defined as follows:",
          "    {",
          "        image   = hs.canvas.new{ h = 128, w = 128 }:appendElements(",
          "                      { type=\"image\", image = hs.image.imageFromName(\"NSNetwork\"), imageAlpha = 0.5 },",
          "                      { type=\"image\", image = hs.image.imageFromName(\"NSTouchBarColorPickerFont\") }",
          "                  ):imageFromCanvas(),",
          "        label   = \"AFP\",",
          "        type    = \"_afpovertcp._tcp.\",",
          "        text    = \"%name%\",",
          "        subText = \"afp://%hostname%:%port%\",",
          "        url     = \"afp://%hostname%:%port%\",",
          "    }"
        ],
        "signature": "BonjourLauncher.recipes.AFP",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.recipes.SMB",
        "desc": "Display computers and servers advertising Windows or Samba file server services advertised with the `_smb._tcp.` service type. Most Apple Macintosh computers and Laptops will also advertise file sharing with this service type.",
        "doc": "Display computers and servers advertising Windows or Samba file server services advertised with the `_smb._tcp.` service type. Most Apple Macintosh computers and Laptops will also advertise file sharing with this service type.\n\nNotes:\n * SMB connections are initiated by the URL `smb://%hostname%:%port%`, which usually opens up a dialog in the Finder which may prompt you for login credentials.\n * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"SMB\")` after the spoon has loaded, and is defined as follows:\n    {\n        image   = hs.image.imageFromName(\"NSNetwork\"),\n        label   = \"SMB\",\n        type    = \"_smb._tcp.\",\n        text    = \"%name%\",\n        subText = \"smb://%hostname%:%port%\",\n        url     = \"smb://%hostname%:%port%\",\n    }\n * On Linux servers, Samba advertises this by default if Avahi is installed.",
        "file": "Source/BonjourLauncher.spoon/recipes.lua",
        "lineno": "54",
        "name": "SMB",
        "notes": [
          " * SMB connections are initiated by the URL `smb://%hostname%:%port%`, which usually opens up a dialog in the Finder which may prompt you for login credentials.",
          " * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"SMB\")` after the spoon has loaded, and is defined as follows:",
          "    {",
          "        image   = hs.image.imageFromName(\"NSNetwork\"),",
          "        label   = \"SMB\",",
          "        type    = \"_smb._tcp.\",",
          "        text    = \"%name%\",",
          "        subText = \"smb://%hostname%:%port%\",",
          "        url     = \"smb://%hostname%:%port%\",",
          "    }",
          " * On Linux servers, Samba advertises this by default if Avahi is installed."
        ],
        "signature": "BonjourLauncher.recipes.SMB",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.recipes.SSH",
        "desc": "Display computers and servers advertising Secure Shell services advertised with the `_ssh._tcp.` service type. This is advertised by MacOS machines with Remote Login enabled in the Sharing panel of System Preferences.",
        "doc": "Display computers and servers advertising Secure Shell services advertised with the `_ssh._tcp.` service type. This is advertised by MacOS machines with Remote Login enabled in the Sharing panel of System Preferences.\n\nNotes:\n * SSH connections are initiated by the URL `ssh://%hostname%:%port%`, which usually opens up a Terminal window with the SSH session, and assumes that the username matches your username on your Mac. At present there is no way to prompt for a different username at the time of connection -- you will need to modify your `~/.ssh/config` file if a different username is required for a specific host. See `man ssh_config` in a terminal window.\n * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"SSH\")` after the spoon has loaded, and is defined as follows:\n    {\n        image   = hs.image.imageFromAppBundle(\"com.apple.Terminal\"),\n        label   = \"SSH\",\n        type    = \"_ssh._tcp.\",\n        text    = \"%name%\",\n        subText = \"%hostname%:%port% (%address4%/%address6%)\",\n        url     = \"ssh://%hostname%:%port%\",\n    }\n * On Linux servers, you can advertise this by installing Avahi and saving the following in `/etc/avahi/services/ssh.service`:\n    ~~~\n    <?xml version=\"1.0\" standalone='no'?>\n    <!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">\n    <service-group>\n      <name replace-wildcards=\"yes\">%h</name>\n      <service>\n        <type>_ssh._tcp</type>\n        <port>22</port>\n      </service>\n    </service-group>\n    ~~~",
        "file": "Source/BonjourLauncher.spoon/recipes.lua",
        "lineno": "18",
        "name": "SSH",
        "notes": [
          " * SSH connections are initiated by the URL `ssh://%hostname%:%port%`, which usually opens up a Terminal window with the SSH session, and assumes that the username matches your username on your Mac. At present there is no way to prompt for a different username at the time of connection -- you will need to modify your `~/.ssh/config` file if a different username is required for a specific host. See `man ssh_config` in a terminal window.",
          " * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"SSH\")` after the spoon has loaded, and is defined as follows:",
          "    {",
          "        image   = hs.image.imageFromAppBundle(\"com.apple.Terminal\"),",
          "        label   = \"SSH\",",
          "        type    = \"_ssh._tcp.\",",
          "        text    = \"%name%\",",
          "        subText = \"%hostname%:%port% (%address4%/%address6%)\",",
          "        url     = \"ssh://%hostname%:%port%\",",
          "    }",
          " * On Linux servers, you can advertise this by installing Avahi and saving the following in `/etc/avahi/services/ssh.service`:",
          "    ~~~",
          "    <?xml version=\"1.0\" standalone='no'?>",
          "    <!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">",
          "    <service-group>",
          "      <name replace-wildcards=\"yes\">%h</name>",
          "      <service>",
          "        <type>_ssh._tcp</type>",
          "        <port>22</port>",
          "      </service>",
          "    </service-group>",
          "    ~~~"
        ],
        "signature": "BonjourLauncher.recipes.SSH",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.recipes.VNC",
        "desc": "Display computers and servers advertising screen sharing or VNC services advertised with the `_rfb._tcp.` service type. This is advertised by MacOS machines with Screen Sharing enabled in the Sharing panel of System Preferences.",
        "doc": "Display computers and servers advertising screen sharing or VNC services advertised with the `_rfb._tcp.` service type. This is advertised by MacOS machines with Screen Sharing enabled in the Sharing panel of System Preferences.\n\nNotes:\n * Screen Sharing connections are initiated by the URL `vnc://%hostname%:%port%`, which usually opens up Screen Sharing which will prompt you for login credentials.\n * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"VNC\")` after the spoon has loaded, and is defined as follows:\n    {\n        image   = hs.image.imageFromAppBundle(\"com.apple.ScreenSharing\"),\n        label   = \"VNC\",\n        type    = \"_rfb._tcp.\",\n        text    = \"%name%\",\n        subText = \"vnc://%hostname%:%port%\",\n        url     = \"vnc://%hostname%:%port%\",\n    }\n * The built in MacOS Screen Sharing application works with MacOS Screen Sharing clients as well as more traditional VNC implementations that do not implement encryption. This does *not* include the RealVNC implementation that is commonly included with Raspberry Pi's Raspbian installations.\n * See also [BonjourLauncher.recipes.VNC_RealVNC_Alternate](#VNC_RealVNC_Alternate) for an example that can use an alternate launcher for RealVNC clients. Note that you sould use only one of these recipes, as they share the same label.\n * On Linux servers, some X Windows installations provide built in VNC support while others require you to configure your own with third party software (e.g. RealVNC or TigerVNC to name just a couple). Determining how to set this up is beyond the scope of these instructions, but if you find that whatever solution you have available does *not* provide ZeroConf or Bonjour advertisements, you can do so yourself by installing Avahi and saving the following in `/etc/avahi/services/vnc.service` (change 5900 to match the port number your windowing environment uses for VNC, commonly a number between 5900 and 5910 inclusive, but theoretically any available port on the machine):\n    ~~~\n    <?xml version=\"1.0\" standalone='no'?>\n    <!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">\n    <service-group>\n      <name replace-wildcards=\"yes\">%h</name>\n      <service>\n        <type>_rfb._tcp</type>\n        <port>5900</port>\n      </service>\n    </service-group>\n    ~~~",
        "file": "Source/BonjourLauncher.spoon/recipes.lua",
        "lineno": "109",
        "name": "VNC",
        "notes": [
          " * Screen Sharing connections are initiated by the URL `vnc://%hostname%:%port%`, which usually opens up Screen Sharing which will prompt you for login credentials.",
          " * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"VNC\")` after the spoon has loaded, and is defined as follows:",
          "    {",
          "        image   = hs.image.imageFromAppBundle(\"com.apple.ScreenSharing\"),",
          "        label   = \"VNC\",",
          "        type    = \"_rfb._tcp.\",",
          "        text    = \"%name%\",",
          "        subText = \"vnc://%hostname%:%port%\",",
          "        url     = \"vnc://%hostname%:%port%\",",
          "    }",
          " * The built in MacOS Screen Sharing application works with MacOS Screen Sharing clients as well as more traditional VNC implementations that do not implement encryption. This does *not* include the RealVNC implementation that is commonly included with Raspberry Pi's Raspbian installations.",
          " * See also [BonjourLauncher.recipes.VNC_RealVNC_Alternate](#VNC_RealVNC_Alternate) for an example that can use an alternate launcher for RealVNC clients. Note that you sould use only one of these recipes, as they share the same label.",
          " * On Linux servers, some X Windows installations provide built in VNC support while others require you to configure your own with third party software (e.g. RealVNC or TigerVNC to name just a couple). Determining how to set this up is beyond the scope of these instructions, but if you find that whatever solution you have available does *not* provide ZeroConf or Bonjour advertisements, you can do so yourself by installing Avahi and saving the following in `/etc/avahi/services/vnc.service` (change 5900 to match the port number your windowing environment uses for VNC, commonly a number between 5900 and 5910 inclusive, but theoretically any available port on the machine):",
          "    ~~~",
          "    <?xml version=\"1.0\" standalone='no'?>",
          "    <!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">",
          "    <service-group>",
          "      <name replace-wildcards=\"yes\">%h</name>",
          "      <service>",
          "        <type>_rfb._tcp</type>",
          "        <port>5900</port>",
          "      </service>",
          "    </service-group>",
          "    ~~~"
        ],
        "signature": "BonjourLauncher.recipes.VNC",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.recipes.VNC_RealVNC_Alternate",
        "desc": "Display computers and servers advertising screen sharing or VNC services advertised with the `_rfb._tcp.` service type. This is advertised by MacOS machines with Screen Sharing enabled in the Sharing panel of System Preferences.",
        "doc": "Display computers and servers advertising screen sharing or VNC services advertised with the `_rfb._tcp.` service type. This is advertised by MacOS machines with Screen Sharing enabled in the Sharing panel of System Preferences.\n\nNotes:\n * This version of a template for `_rfb._tcp.` differs from [BonjourLauncher.recipes.VNC](#VNC) in that it uses a function which examines the text records for the service to determine which launcher to use for the chosen server: because RealVNC uses an encryption scheme that is not recognized by the macOS Screen Sharing application, if a text record indicating that RealVNC is in use is detected, an alternate launcher is used.\n * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"VNC_RealVNC_Alternate\")` after the spoon has loaded, and is defined as follows:\n    {\n        image   = hs.image.imageFromAppBundle(\"com.apple.ScreenSharing\"),\n        label   = \"VNC\",\n        type    = \"_rfb._tcp.\",\n        text    = \"%name%\",\n        subText = \"vnc://%hostname%:%port%\",\n        url     = \"vnc://%hostname%:%port%\", -- used in fn when RealVNC not set ; see below\n        cmd     = \"open -a \\\"VNC Viewer\\\" --args %hostname%:%port%\", -- used in fn when RealVNC set; see below\n        fn      = function(svc, choice)\n            local tr = svc:txtRecord()\n            if tr and tr.RealVNC then\n                hs.execute(choice.cmd)\n            else\n                hs.urlevent.openURL(choice.url)\n            end\n        end,\n    }\n * Note that `fn` is defined, so it will be invoked in favor of `url` or `cmd` by the BonjourLauncer spoon when a VNC service is selected; however, the second argument to the function invoked will include all key-value pairs with string values from the template, so the function can utilizes the `url` and `cmd` keys based on its own logic to determine which applies.\n * This variant was developed to address the fact that the macOS Screen Sharing application does not recognize the encryption used by the RealVNC implemntataion found in the Raspbian distribution installed on most Raspberry Pi computers. By adding text record to the Avahi advertisement from the Raspberry Pi, we can determine whether or not to utilize the built in screen sharing app or launch the RealVNC client to view the specified service.\n * See also [BonjourLauncher.recipes.VNC](#VNC) for a simpler implementation if you are only connecting to other Mac computers or if none of your servers require RealVNC's specific viewer application.\n * To create the advertisement on the Raspbian installation which includes the text record entry we need to make this template work, install Avahi on your Raspbian machine and save the following as `/etc/avahi/services/vnc.service`:\n    ~~~\n    <?xml version=\"1.0\" standalone='no'?>\n    <!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">\n    <service-group>\n      <name replace-wildcards=\"yes\">%h</name>\n      <service>\n        <type>_rfb._tcp</type>\n        <port>5900</port>\n        <txt-record>RealVNC=True</txt-record>\n      </service>\n    </service-group>\n    ~~~",
        "file": "Source/BonjourLauncher.spoon/recipes.lua",
        "lineno": "147",
        "name": "VNC_RealVNC_Alternate",
        "notes": [
          " * This version of a template for `_rfb._tcp.` differs from [BonjourLauncher.recipes.VNC](#VNC) in that it uses a function which examines the text records for the service to determine which launcher to use for the chosen server: because RealVNC uses an encryption scheme that is not recognized by the macOS Screen Sharing application, if a text record indicating that RealVNC is in use is detected, an alternate launcher is used.",
          " * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"VNC_RealVNC_Alternate\")` after the spoon has loaded, and is defined as follows:",
          "    {",
          "        image   = hs.image.imageFromAppBundle(\"com.apple.ScreenSharing\"),",
          "        label   = \"VNC\",",
          "        type    = \"_rfb._tcp.\",",
          "        text    = \"%name%\",",
          "        subText = \"vnc://%hostname%:%port%\",",
          "        url     = \"vnc://%hostname%:%port%\", -- used in fn when RealVNC not set ; see below",
          "        cmd     = \"open -a \\\"VNC Viewer\\\" --args %hostname%:%port%\", -- used in fn when RealVNC set; see below",
          "        fn      = function(svc, choice)",
          "            local tr = svc:txtRecord()",
          "            if tr and tr.RealVNC then",
          "                hs.execute(choice.cmd)",
          "            else",
          "                hs.urlevent.openURL(choice.url)",
          "            end",
          "        end,",
          "    }",
          " * Note that `fn` is defined, so it will be invoked in favor of `url` or `cmd` by the BonjourLauncer spoon when a VNC service is selected; however, the second argument to the function invoked will include all key-value pairs with string values from the template, so the function can utilizes the `url` and `cmd` keys based on its own logic to determine which applies.",
          " * This variant was developed to address the fact that the macOS Screen Sharing application does not recognize the encryption used by the RealVNC implemntataion found in the Raspbian distribution installed on most Raspberry Pi computers. By adding text record to the Avahi advertisement from the Raspberry Pi, we can determine whether or not to utilize the built in screen sharing app or launch the RealVNC client to view the specified service.",
          " * See also [BonjourLauncher.recipes.VNC](#VNC) for a simpler implementation if you are only connecting to other Mac computers or if none of your servers require RealVNC's specific viewer application.",
          " * To create the advertisement on the Raspbian installation which includes the text record entry we need to make this template work, install Avahi on your Raspbian machine and save the following as `/etc/avahi/services/vnc.service`:",
          "    ~~~",
          "    <?xml version=\"1.0\" standalone='no'?>",
          "    <!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">",
          "    <service-group>",
          "      <name replace-wildcards=\"yes\">%h</name>",
          "      <service>",
          "        <type>_rfb._tcp</type>",
          "        <port>5900</port>",
          "        <txt-record>RealVNC=True</txt-record>",
          "      </service>",
          "    </service-group>",
          "    ~~~"
        ],
        "signature": "BonjourLauncher.recipes.VNC_RealVNC_Alternate",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Sample recipes for various service types that you can use with the BonjourLauncher spoon.",
    "doc": "Sample recipes for various service types that you can use with the BonjourLauncher spoon.\n\nThis submodule includes sample templates for a variety of advertised services which may be of interest when used with the BonjourLauncher spoon. Each template can be displayed in the Hammerspoon console for reference by typing `help.spoon.BonjourLauncher.recipes.*name*` into the console input field, or added as is to the active templates of the BonjourLauncher by doing the following either in the Hammerspoon console or in your configuration `init.ua` file:\n\n    hs.loadSpoon(\"BonjourLauncher\")\n    spoon.BonjourLauncher:addRecipes(*name*)\n\nwhere *name* is one of the variables described within this submodule.",
    "items": [
      {
        "def": "BonjourLauncher.recipes.AFP",
        "desc": "Display computers and servers advertising AppleShare file server services advertised with the `_afpovertcp._tcp.` service type. This was the default with earlier versions of MacOS and is still used by Apple AirPort and Time Machine file servers.",
        "doc": "Display computers and servers advertising AppleShare file server services advertised with the `_afpovertcp._tcp.` service type. This was the default with earlier versions of MacOS and is still used by Apple AirPort and Time Machine file servers.\n\nNotes:\n * AppleShare connections are initiated by the URL `afp://%hostname%:%port%`, which usually opens up a dialog in the Finder which may prompt you for login credentials.\n * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"AFP\")` after the spoon has loaded, and is defined as follows:\n    {\n        image   = hs.canvas.new{ h = 128, w = 128 }:appendElements(\n                      { type=\"image\", image = hs.image.imageFromName(\"NSNetwork\"), imageAlpha = 0.5 },\n                      { type=\"image\", image = hs.image.imageFromName(\"NSTouchBarColorPickerFont\") }\n                  ):imageFromCanvas(),\n        label   = \"AFP\",\n        type    = \"_afpovertcp._tcp.\",\n        text    = \"%name%\",\n        subText = \"afp://%hostname%:%port%\",\n        url     = \"afp://%hostname%:%port%\",\n    }",
        "file": "Source/BonjourLauncher.spoon/recipes.lua",
        "lineno": "79",
        "name": "AFP",
        "notes": [
          " * AppleShare connections are initiated by the URL `afp://%hostname%:%port%`, which usually opens up a dialog in the Finder which may prompt you for login credentials.",
          " * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"AFP\")` after the spoon has loaded, and is defined as follows:",
          "    {",
          "        image   = hs.canvas.new{ h = 128, w = 128 }:appendElements(",
          "                      { type=\"image\", image = hs.image.imageFromName(\"NSNetwork\"), imageAlpha = 0.5 },",
          "                      { type=\"image\", image = hs.image.imageFromName(\"NSTouchBarColorPickerFont\") }",
          "                  ):imageFromCanvas(),",
          "        label   = \"AFP\",",
          "        type    = \"_afpovertcp._tcp.\",",
          "        text    = \"%name%\",",
          "        subText = \"afp://%hostname%:%port%\",",
          "        url     = \"afp://%hostname%:%port%\",",
          "    }"
        ],
        "signature": "BonjourLauncher.recipes.AFP",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.recipes.SMB",
        "desc": "Display computers and servers advertising Windows or Samba file server services advertised with the `_smb._tcp.` service type. Most Apple Macintosh computers and Laptops will also advertise file sharing with this service type.",
        "doc": "Display computers and servers advertising Windows or Samba file server services advertised with the `_smb._tcp.` service type. Most Apple Macintosh computers and Laptops will also advertise file sharing with this service type.\n\nNotes:\n * SMB connections are initiated by the URL `smb://%hostname%:%port%`, which usually opens up a dialog in the Finder which may prompt you for login credentials.\n * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"SMB\")` after the spoon has loaded, and is defined as follows:\n    {\n        image   = hs.image.imageFromName(\"NSNetwork\"),\n        label   = \"SMB\",\n        type    = \"_smb._tcp.\",\n        text    = \"%name%\",\n        subText = \"smb://%hostname%:%port%\",\n        url     = \"smb://%hostname%:%port%\",\n    }\n * On Linux servers, Samba advertises this by default if Avahi is installed.",
        "file": "Source/BonjourLauncher.spoon/recipes.lua",
        "lineno": "54",
        "name": "SMB",
        "notes": [
          " * SMB connections are initiated by the URL `smb://%hostname%:%port%`, which usually opens up a dialog in the Finder which may prompt you for login credentials.",
          " * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"SMB\")` after the spoon has loaded, and is defined as follows:",
          "    {",
          "        image   = hs.image.imageFromName(\"NSNetwork\"),",
          "        label   = \"SMB\",",
          "        type    = \"_smb._tcp.\",",
          "        text    = \"%name%\",",
          "        subText = \"smb://%hostname%:%port%\",",
          "        url     = \"smb://%hostname%:%port%\",",
          "    }",
          " * On Linux servers, Samba advertises this by default if Avahi is installed."
        ],
        "signature": "BonjourLauncher.recipes.SMB",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.recipes.SSH",
        "desc": "Display computers and servers advertising Secure Shell services advertised with the `_ssh._tcp.` service type. This is advertised by MacOS machines with Remote Login enabled in the Sharing panel of System Preferences.",
        "doc": "Display computers and servers advertising Secure Shell services advertised with the `_ssh._tcp.` service type. This is advertised by MacOS machines with Remote Login enabled in the Sharing panel of System Preferences.\n\nNotes:\n * SSH connections are initiated by the URL `ssh://%hostname%:%port%`, which usually opens up a Terminal window with the SSH session, and assumes that the username matches your username on your Mac. At present there is no way to prompt for a different username at the time of connection -- you will need to modify your `~/.ssh/config` file if a different username is required for a specific host. See `man ssh_config` in a terminal window.\n * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"SSH\")` after the spoon has loaded, and is defined as follows:\n    {\n        image   = hs.image.imageFromAppBundle(\"com.apple.Terminal\"),\n        label   = \"SSH\",\n        type    = \"_ssh._tcp.\",\n        text    = \"%name%\",\n        subText = \"%hostname%:%port% (%address4%/%address6%)\",\n        url     = \"ssh://%hostname%:%port%\",\n    }\n * On Linux servers, you can advertise this by installing Avahi and saving the following in `/etc/avahi/services/ssh.service`:\n    ~~~\n    <?xml version=\"1.0\" standalone='no'?>\n    <!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">\n    <service-group>\n      <name replace-wildcards=\"yes\">%h</name>\n      <service>\n        <type>_ssh._tcp</type>\n        <port>22</port>\n      </service>\n    </service-group>\n    ~~~",
        "file": "Source/BonjourLauncher.spoon/recipes.lua",
        "lineno": "18",
        "name": "SSH",
        "notes": [
          " * SSH connections are initiated by the URL `ssh://%hostname%:%port%`, which usually opens up a Terminal window with the SSH session, and assumes that the username matches your username on your Mac. At present there is no way to prompt for a different username at the time of connection -- you will need to modify your `~/.ssh/config` file if a different username is required for a specific host. See `man ssh_config` in a terminal window.",
          " * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"SSH\")` after the spoon has loaded, and is defined as follows:",
          "    {",
          "        image   = hs.image.imageFromAppBundle(\"com.apple.Terminal\"),",
          "        label   = \"SSH\",",
          "        type    = \"_ssh._tcp.\",",
          "        text    = \"%name%\",",
          "        subText = \"%hostname%:%port% (%address4%/%address6%)\",",
          "        url     = \"ssh://%hostname%:%port%\",",
          "    }",
          " * On Linux servers, you can advertise this by installing Avahi and saving the following in `/etc/avahi/services/ssh.service`:",
          "    ~~~",
          "    <?xml version=\"1.0\" standalone='no'?>",
          "    <!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">",
          "    <service-group>",
          "      <name replace-wildcards=\"yes\">%h</name>",
          "      <service>",
          "        <type>_ssh._tcp</type>",
          "        <port>22</port>",
          "      </service>",
          "    </service-group>",
          "    ~~~"
        ],
        "signature": "BonjourLauncher.recipes.SSH",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.recipes.VNC",
        "desc": "Display computers and servers advertising screen sharing or VNC services advertised with the `_rfb._tcp.` service type. This is advertised by MacOS machines with Screen Sharing enabled in the Sharing panel of System Preferences.",
        "doc": "Display computers and servers advertising screen sharing or VNC services advertised with the `_rfb._tcp.` service type. This is advertised by MacOS machines with Screen Sharing enabled in the Sharing panel of System Preferences.\n\nNotes:\n * Screen Sharing connections are initiated by the URL `vnc://%hostname%:%port%`, which usually opens up Screen Sharing which will prompt you for login credentials.\n * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"VNC\")` after the spoon has loaded, and is defined as follows:\n    {\n        image   = hs.image.imageFromAppBundle(\"com.apple.ScreenSharing\"),\n        label   = \"VNC\",\n        type    = \"_rfb._tcp.\",\n        text    = \"%name%\",\n        subText = \"vnc://%hostname%:%port%\",\n        url     = \"vnc://%hostname%:%port%\",\n    }\n * The built in MacOS Screen Sharing application works with MacOS Screen Sharing clients as well as more traditional VNC implementations that do not implement encryption. This does *not* include the RealVNC implementation that is commonly included with Raspberry Pi's Raspbian installations.\n * See also [BonjourLauncher.recipes.VNC_RealVNC_Alternate](#VNC_RealVNC_Alternate) for an example that can use an alternate launcher for RealVNC clients. Note that you sould use only one of these recipes, as they share the same label.\n * On Linux servers, some X Windows installations provide built in VNC support while others require you to configure your own with third party software (e.g. RealVNC or TigerVNC to name just a couple). Determining how to set this up is beyond the scope of these instructions, but if you find that whatever solution you have available does *not* provide ZeroConf or Bonjour advertisements, you can do so yourself by installing Avahi and saving the following in `/etc/avahi/services/vnc.service` (change 5900 to match the port number your windowing environment uses for VNC, commonly a number between 5900 and 5910 inclusive, but theoretically any available port on the machine):\n    ~~~\n    <?xml version=\"1.0\" standalone='no'?>\n    <!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">\n    <service-group>\n      <name replace-wildcards=\"yes\">%h</name>\n      <service>\n        <type>_rfb._tcp</type>\n        <port>5900</port>\n      </service>\n    </service-group>\n    ~~~",
        "file": "Source/BonjourLauncher.spoon/recipes.lua",
        "lineno": "109",
        "name": "VNC",
        "notes": [
          " * Screen Sharing connections are initiated by the URL `vnc://%hostname%:%port%`, which usually opens up Screen Sharing which will prompt you for login credentials.",
          " * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"VNC\")` after the spoon has loaded, and is defined as follows:",
          "    {",
          "        image   = hs.image.imageFromAppBundle(\"com.apple.ScreenSharing\"),",
          "        label   = \"VNC\",",
          "        type    = \"_rfb._tcp.\",",
          "        text    = \"%name%\",",
          "        subText = \"vnc://%hostname%:%port%\",",
          "        url     = \"vnc://%hostname%:%port%\",",
          "    }",
          " * The built in MacOS Screen Sharing application works with MacOS Screen Sharing clients as well as more traditional VNC implementations that do not implement encryption. This does *not* include the RealVNC implementation that is commonly included with Raspberry Pi's Raspbian installations.",
          " * See also [BonjourLauncher.recipes.VNC_RealVNC_Alternate](#VNC_RealVNC_Alternate) for an example that can use an alternate launcher for RealVNC clients. Note that you sould use only one of these recipes, as they share the same label.",
          " * On Linux servers, some X Windows installations provide built in VNC support while others require you to configure your own with third party software (e.g. RealVNC or TigerVNC to name just a couple). Determining how to set this up is beyond the scope of these instructions, but if you find that whatever solution you have available does *not* provide ZeroConf or Bonjour advertisements, you can do so yourself by installing Avahi and saving the following in `/etc/avahi/services/vnc.service` (change 5900 to match the port number your windowing environment uses for VNC, commonly a number between 5900 and 5910 inclusive, but theoretically any available port on the machine):",
          "    ~~~",
          "    <?xml version=\"1.0\" standalone='no'?>",
          "    <!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">",
          "    <service-group>",
          "      <name replace-wildcards=\"yes\">%h</name>",
          "      <service>",
          "        <type>_rfb._tcp</type>",
          "        <port>5900</port>",
          "      </service>",
          "    </service-group>",
          "    ~~~"
        ],
        "signature": "BonjourLauncher.recipes.VNC",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BonjourLauncher.recipes.VNC_RealVNC_Alternate",
        "desc": "Display computers and servers advertising screen sharing or VNC services advertised with the `_rfb._tcp.` service type. This is advertised by MacOS machines with Screen Sharing enabled in the Sharing panel of System Preferences.",
        "doc": "Display computers and servers advertising screen sharing or VNC services advertised with the `_rfb._tcp.` service type. This is advertised by MacOS machines with Screen Sharing enabled in the Sharing panel of System Preferences.\n\nNotes:\n * This version of a template for `_rfb._tcp.` differs from [BonjourLauncher.recipes.VNC](#VNC) in that it uses a function which examines the text records for the service to determine which launcher to use for the chosen server: because RealVNC uses an encryption scheme that is not recognized by the macOS Screen Sharing application, if a text record indicating that RealVNC is in use is detected, an alternate launcher is used.\n * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"VNC_RealVNC_Alternate\")` after the spoon has loaded, and is defined as follows:\n    {\n        image   = hs.image.imageFromAppBundle(\"com.apple.ScreenSharing\"),\n        label   = \"VNC\",\n        type    = \"_rfb._tcp.\",\n        text    = \"%name%\",\n        subText = \"vnc://%hostname%:%port%\",\n        url     = \"vnc://%hostname%:%port%\", -- used in fn when RealVNC not set ; see below\n        cmd     = \"open -a \\\"VNC Viewer\\\" --args %hostname%:%port%\", -- used in fn when RealVNC set; see below\n        fn      = function(svc, choice)\n            local tr = svc:txtRecord()\n            if tr and tr.RealVNC then\n                hs.execute(choice.cmd)\n            else\n                hs.urlevent.openURL(choice.url)\n            end\n        end,\n    }\n * Note that `fn` is defined, so it will be invoked in favor of `url` or `cmd` by the BonjourLauncer spoon when a VNC service is selected; however, the second argument to the function invoked will include all key-value pairs with string values from the template, so the function can utilizes the `url` and `cmd` keys based on its own logic to determine which applies.\n * This variant was developed to address the fact that the macOS Screen Sharing application does not recognize the encryption used by the RealVNC implemntataion found in the Raspbian distribution installed on most Raspberry Pi computers. By adding text record to the Avahi advertisement from the Raspberry Pi, we can determine whether or not to utilize the built in screen sharing app or launch the RealVNC client to view the specified service.\n * See also [BonjourLauncher.recipes.VNC](#VNC) for a simpler implementation if you are only connecting to other Mac computers or if none of your servers require RealVNC's specific viewer application.\n * To create the advertisement on the Raspbian installation which includes the text record entry we need to make this template work, install Avahi on your Raspbian machine and save the following as `/etc/avahi/services/vnc.service`:\n    ~~~\n    <?xml version=\"1.0\" standalone='no'?>\n    <!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">\n    <service-group>\n      <name replace-wildcards=\"yes\">%h</name>\n      <service>\n        <type>_rfb._tcp</type>\n        <port>5900</port>\n        <txt-record>RealVNC=True</txt-record>\n      </service>\n    </service-group>\n    ~~~",
        "file": "Source/BonjourLauncher.spoon/recipes.lua",
        "lineno": "147",
        "name": "VNC_RealVNC_Alternate",
        "notes": [
          " * This version of a template for `_rfb._tcp.` differs from [BonjourLauncher.recipes.VNC](#VNC) in that it uses a function which examines the text records for the service to determine which launcher to use for the chosen server: because RealVNC uses an encryption scheme that is not recognized by the macOS Screen Sharing application, if a text record indicating that RealVNC is in use is detected, an alternate launcher is used.",
          " * The template can be added to your BonjourLauncer with `spoon.BonjourLauncher:addRecipes(\"VNC_RealVNC_Alternate\")` after the spoon has loaded, and is defined as follows:",
          "    {",
          "        image   = hs.image.imageFromAppBundle(\"com.apple.ScreenSharing\"),",
          "        label   = \"VNC\",",
          "        type    = \"_rfb._tcp.\",",
          "        text    = \"%name%\",",
          "        subText = \"vnc://%hostname%:%port%\",",
          "        url     = \"vnc://%hostname%:%port%\", -- used in fn when RealVNC not set ; see below",
          "        cmd     = \"open -a \\\"VNC Viewer\\\" --args %hostname%:%port%\", -- used in fn when RealVNC set; see below",
          "        fn      = function(svc, choice)",
          "            local tr = svc:txtRecord()",
          "            if tr and tr.RealVNC then",
          "                hs.execute(choice.cmd)",
          "            else",
          "                hs.urlevent.openURL(choice.url)",
          "            end",
          "        end,",
          "    }",
          " * Note that `fn` is defined, so it will be invoked in favor of `url` or `cmd` by the BonjourLauncer spoon when a VNC service is selected; however, the second argument to the function invoked will include all key-value pairs with string values from the template, so the function can utilizes the `url` and `cmd` keys based on its own logic to determine which applies.",
          " * This variant was developed to address the fact that the macOS Screen Sharing application does not recognize the encryption used by the RealVNC implemntataion found in the Raspbian distribution installed on most Raspberry Pi computers. By adding text record to the Avahi advertisement from the Raspberry Pi, we can determine whether or not to utilize the built in screen sharing app or launch the RealVNC client to view the specified service.",
          " * See also [BonjourLauncher.recipes.VNC](#VNC) for a simpler implementation if you are only connecting to other Mac computers or if none of your servers require RealVNC's specific viewer application.",
          " * To create the advertisement on the Raspbian installation which includes the text record entry we need to make this template work, install Avahi on your Raspbian machine and save the following as `/etc/avahi/services/vnc.service`:",
          "    ~~~",
          "    <?xml version=\"1.0\" standalone='no'?>",
          "    <!DOCTYPE service-group SYSTEM \"avahi-service.dtd\">",
          "    <service-group>",
          "      <name replace-wildcards=\"yes\">%h</name>",
          "      <service>",
          "        <type>_rfb._tcp</type>",
          "        <port>5900</port>",
          "        <txt-record>RealVNC=True</txt-record>",
          "      </service>",
          "    </service-group>",
          "    ~~~"
        ],
        "signature": "BonjourLauncher.recipes.VNC_RealVNC_Alternate",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "BonjourLauncher.recipes",
    "stripped_doc": "\nThis submodule includes sample templates for a variety of advertised services which may be of interest when used with the BonjourLauncher spoon. Each template can be displayed in the Hammerspoon console for reference by typing `help.spoon.BonjourLauncher.recipes.*name*` into the console input field, or added as is to the active templates of the BonjourLauncher by doing the following either in the Hammerspoon console or in your configuration `init.ua` file:\n\n    hs.loadSpoon(\"BonjourLauncher\")\n    spoon.BonjourLauncher:addRecipes(*name*)\n\nwhere *name* is one of the variables described within this submodule.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "BrewInfo:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for BrewInfo",
        "doc": "Binds hotkeys for BrewInfo\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show_brew_info - Show output of `brew info` using the selected text as package name\n  * open_brew_url - Open the homepage of the formula whose name is currently selected\n  * show_brew_cask_info - Show output of `brew cask info` using the selected text as package name\n  * open_brew_cask_url - Open the homepage of the Cask whose name is currently selected",
        "examples": [],
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "161",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * show_brew_info - Show output of `brew info` using the selected text as package name\n   * open_brew_url - Open the homepage of the formula whose name is currently selected\n   * show_brew_cask_info - Show output of `brew cask info` using the selected text as package name\n   * open_brew_cask_url - Open the homepage of the Cask whose name is currently selected"
        ],
        "returns": [],
        "signature": "BrewInfo:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:openBrewURL(pkg, subcommand)",
        "desc": "Opens the homepage for package `pkg`, as obtained from the `homepage` field in `brew <subcommand> cat <pkg>`",
        "doc": "Opens the homepage for package `pkg`, as obtained from the `homepage` field in `brew <subcommand> cat <pkg>`\n\nParameters:\n * pkg - name of the package to query\n * subcommand - brew subcommand to use for the `cat` command. Defaults to an empty string, which results in \"brew cat <pkg>\" being run. For example, if `subcommand` is \"cask\", the `brew cask cat <pkg>` command will be used.\n\nReturns:\n * The Spoon object",
        "examples": [],
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "121",
        "name": "openBrewURL",
        "notes": [],
        "parameters": [
          " * pkg - name of the package to query",
          " * subcommand - brew subcommand to use for the `cat` command. Defaults to an empty string, which results in \"brew cat <pkg>\" being run. For example, if `subcommand` is \"cask\", the `brew cask cat <pkg>` command will be used."
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURL(pkg, subcommand)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:openBrewURLCurSel(subcommand)",
        "desc": "Opens the homepage for the currently-selected package, as obtained from the `homepage` field in `brew <subcommand> cat <pkg>`",
        "doc": "Opens the homepage for the currently-selected package, as obtained from the `homepage` field in `brew <subcommand> cat <pkg>`\n\nParameters:\n * subcommand - brew subcommand to use for the `cat` command. Defaults to an empty string, which results in \"brew cat <pkg>\" being run. For example, if `subcommand` is \"cask\", the `brew cask cat <pkg>` command will be used.\n\nReturns:\n * The Spoon object",
        "examples": [],
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "148",
        "name": "openBrewURLCurSel",
        "notes": [],
        "parameters": [
          " * subcommand - brew subcommand to use for the `cat` command. Defaults to an empty string, which results in \"brew cat <pkg>\" being run. For example, if `subcommand` is \"cask\", the `brew cask cat <pkg>` command will be used."
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURLCurSel(subcommand)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfo(pkg, subcommand)",
        "desc": "Displays an alert with the output of `brew <subcommand> info <pkg>`",
        "doc": "Displays an alert with the output of `brew <subcommand> info <pkg>`\n\nParameters:\n * pkg - name of the package to query\n * subcommand - brew subcommand to use for the `info` command. Defaults to an empty string, which results in \"brew info <pkg>\" being run. For example, if `subcommand` is \"cask\", the `brew cask info <pkg>` command will be used.\n\nReturns:\n * The Spoon object",
        "examples": [],
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "84",
        "name": "showBrewInfo",
        "notes": [],
        "parameters": [
          " * pkg - name of the package to query",
          " * subcommand - brew subcommand to use for the `info` command. Defaults to an empty string, which results in \"brew info <pkg>\" being run. For example, if `subcommand` is \"cask\", the `brew cask info <pkg>` command will be used."
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfo(pkg, subcommand)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfoCurSel(subcommand)",
        "desc": "Display `brew <subcommand> info` using the selected text as the package name",
        "doc": "Display `brew <subcommand> info` using the selected text as the package name\n\nParameters:\n * subcommand - brew subcommand to use for the `info` command. Defaults to an empty string, which results in \"brew info\" being run. For example, if `subcommand` is \"cask\", the `brew cask info` command will be used.\n\nReturns:\n * The Spoon object",
        "examples": [],
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "108",
        "name": "showBrewInfoCurSel",
        "notes": [],
        "parameters": [
          " * subcommand - brew subcommand to use for the `info` command. Defaults to an empty string, which results in \"brew info\" being run. For example, if `subcommand` is \"cask\", the `brew cask info` command will be used."
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfoCurSel(subcommand)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "BrewInfo.brew_info_delay_sec",
        "desc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "doc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "25",
        "name": "brew_info_delay_sec",
        "signature": "BrewInfo.brew_info_delay_sec",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo.brew_info_style",
        "desc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "doc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "30",
        "name": "brew_info_style",
        "signature": "BrewInfo.brew_info_style",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo.select_text_if_needed",
        "desc": "If `true`, and no text is currently selected in the terminal, issue a double-click to select the text below the cursor, and use that as the input to `brew info`. See also `BrewInfo.select_text_modifiers`. Defaults to `true`.",
        "doc": "If `true`, and no text is currently selected in the terminal, issue a double-click to select the text below the cursor, and use that as the input to `brew info`. See also `BrewInfo.select_text_modifiers`. Defaults to `true`.",
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "39",
        "name": "select_text_if_needed",
        "signature": "BrewInfo.select_text_if_needed",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo.select_text_modifiers",
        "desc": "Table containing the modifiers to be used together with a double-click when `BrewInfo.select_text_if_needed` is true. Defaults to `{cmd = true, shift = true}` to issue a Cmd-Shift-double-click, which will select a continuous non-space string in Terminal and iTerm2.",
        "doc": "Table containing the modifiers to be used together with a double-click when `BrewInfo.select_text_if_needed` is true. Defaults to `{cmd = true, shift = true}` to issue a Cmd-Shift-double-click, which will select a continuous non-space string in Terminal and iTerm2.",
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "44",
        "name": "select_text_modifiers",
        "signature": "BrewInfo.select_text_modifiers",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Display pop-up with Homebrew Formula info, or open their URL",
    "doc": "Display pop-up with Homebrew Formula info, or open their URL\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip)\n\nYou can bind keys to automatically display the output of `brew\ninfo` of the currently-selected package name, or to open its\nhomepage. I use it to quickly explore new packages from the output\nof `brew update`.",
    "items": [
      {
        "def": "BrewInfo:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for BrewInfo",
        "doc": "Binds hotkeys for BrewInfo\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show_brew_info - Show output of `brew info` using the selected text as package name\n  * open_brew_url - Open the homepage of the formula whose name is currently selected\n  * show_brew_cask_info - Show output of `brew cask info` using the selected text as package name\n  * open_brew_cask_url - Open the homepage of the Cask whose name is currently selected",
        "examples": [],
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "161",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * show_brew_info - Show output of `brew info` using the selected text as package name\n   * open_brew_url - Open the homepage of the formula whose name is currently selected\n   * show_brew_cask_info - Show output of `brew cask info` using the selected text as package name\n   * open_brew_cask_url - Open the homepage of the Cask whose name is currently selected"
        ],
        "returns": [],
        "signature": "BrewInfo:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo.brew_info_delay_sec",
        "desc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "doc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "25",
        "name": "brew_info_delay_sec",
        "signature": "BrewInfo.brew_info_delay_sec",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo.brew_info_style",
        "desc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "doc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "30",
        "name": "brew_info_style",
        "signature": "BrewInfo.brew_info_style",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo:openBrewURL(pkg, subcommand)",
        "desc": "Opens the homepage for package `pkg`, as obtained from the `homepage` field in `brew <subcommand> cat <pkg>`",
        "doc": "Opens the homepage for package `pkg`, as obtained from the `homepage` field in `brew <subcommand> cat <pkg>`\n\nParameters:\n * pkg - name of the package to query\n * subcommand - brew subcommand to use for the `cat` command. Defaults to an empty string, which results in \"brew cat <pkg>\" being run. For example, if `subcommand` is \"cask\", the `brew cask cat <pkg>` command will be used.\n\nReturns:\n * The Spoon object",
        "examples": [],
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "121",
        "name": "openBrewURL",
        "notes": [],
        "parameters": [
          " * pkg - name of the package to query",
          " * subcommand - brew subcommand to use for the `cat` command. Defaults to an empty string, which results in \"brew cat <pkg>\" being run. For example, if `subcommand` is \"cask\", the `brew cask cat <pkg>` command will be used."
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURL(pkg, subcommand)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:openBrewURLCurSel(subcommand)",
        "desc": "Opens the homepage for the currently-selected package, as obtained from the `homepage` field in `brew <subcommand> cat <pkg>`",
        "doc": "Opens the homepage for the currently-selected package, as obtained from the `homepage` field in `brew <subcommand> cat <pkg>`\n\nParameters:\n * subcommand - brew subcommand to use for the `cat` command. Defaults to an empty string, which results in \"brew cat <pkg>\" being run. For example, if `subcommand` is \"cask\", the `brew cask cat <pkg>` command will be used.\n\nReturns:\n * The Spoon object",
        "examples": [],
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "148",
        "name": "openBrewURLCurSel",
        "notes": [],
        "parameters": [
          " * subcommand - brew subcommand to use for the `cat` command. Defaults to an empty string, which results in \"brew cat <pkg>\" being run. For example, if `subcommand` is \"cask\", the `brew cask cat <pkg>` command will be used."
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURLCurSel(subcommand)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo.select_text_if_needed",
        "desc": "If `true`, and no text is currently selected in the terminal, issue a double-click to select the text below the cursor, and use that as the input to `brew info`. See also `BrewInfo.select_text_modifiers`. Defaults to `true`.",
        "doc": "If `true`, and no text is currently selected in the terminal, issue a double-click to select the text below the cursor, and use that as the input to `brew info`. See also `BrewInfo.select_text_modifiers`. Defaults to `true`.",
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "39",
        "name": "select_text_if_needed",
        "signature": "BrewInfo.select_text_if_needed",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo.select_text_modifiers",
        "desc": "Table containing the modifiers to be used together with a double-click when `BrewInfo.select_text_if_needed` is true. Defaults to `{cmd = true, shift = true}` to issue a Cmd-Shift-double-click, which will select a continuous non-space string in Terminal and iTerm2.",
        "doc": "Table containing the modifiers to be used together with a double-click when `BrewInfo.select_text_if_needed` is true. Defaults to `{cmd = true, shift = true}` to issue a Cmd-Shift-double-click, which will select a continuous non-space string in Terminal and iTerm2.",
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "44",
        "name": "select_text_modifiers",
        "signature": "BrewInfo.select_text_modifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo:showBrewInfo(pkg, subcommand)",
        "desc": "Displays an alert with the output of `brew <subcommand> info <pkg>`",
        "doc": "Displays an alert with the output of `brew <subcommand> info <pkg>`\n\nParameters:\n * pkg - name of the package to query\n * subcommand - brew subcommand to use for the `info` command. Defaults to an empty string, which results in \"brew info <pkg>\" being run. For example, if `subcommand` is \"cask\", the `brew cask info <pkg>` command will be used.\n\nReturns:\n * The Spoon object",
        "examples": [],
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "84",
        "name": "showBrewInfo",
        "notes": [],
        "parameters": [
          " * pkg - name of the package to query",
          " * subcommand - brew subcommand to use for the `info` command. Defaults to an empty string, which results in \"brew info <pkg>\" being run. For example, if `subcommand` is \"cask\", the `brew cask info <pkg>` command will be used."
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfo(pkg, subcommand)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfoCurSel(subcommand)",
        "desc": "Display `brew <subcommand> info` using the selected text as the package name",
        "doc": "Display `brew <subcommand> info` using the selected text as the package name\n\nParameters:\n * subcommand - brew subcommand to use for the `info` command. Defaults to an empty string, which results in \"brew info\" being run. For example, if `subcommand` is \"cask\", the `brew cask info` command will be used.\n\nReturns:\n * The Spoon object",
        "examples": [],
        "file": "Source/BrewInfo.spoon/init.lua",
        "lineno": "108",
        "name": "showBrewInfoCurSel",
        "notes": [],
        "parameters": [
          " * subcommand - brew subcommand to use for the `info` command. Defaults to an empty string, which results in \"brew info\" being run. For example, if `subcommand` is \"cask\", the `brew cask info` command will be used."
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfoCurSel(subcommand)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "BrewInfo",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip)\n\nYou can bind keys to automatically display the output of `brew\ninfo` of the currently-selected package name, or to open its\nhomepage. I use it to quickly explore new packages from the output\nof `brew update`.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Caffeine:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Caffeine",
        "doc": "Binds hotkeys for Caffeine\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic\n\nReturns:\n * The Caffeine object",
        "examples": [],
        "file": "Source/Caffeine.spoon/init.lua",
        "lineno": "32",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:setState(on)",
        "desc": "Sets whether or not caffeination should be enabled",
        "doc": "Sets whether or not caffeination should be enabled\n\nParameters:\n * on - A boolean, true if screens should be kept awake, false to let macOS send them to sleep\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Caffeine.spoon/init.lua",
        "lineno": "105",
        "name": "setState",
        "notes": [],
        "parameters": [
          " * on - A boolean, true if screens should be kept awake, false to let macOS send them to sleep"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Caffeine:setState(on)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:start()",
        "desc": "Starts Caffeine",
        "doc": "Starts Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "examples": [],
        "file": "Source/Caffeine.spoon/init.lua",
        "lineno": "53",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:stop()",
        "desc": "Stops Caffeine",
        "doc": "Stops Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "examples": [],
        "file": "Source/Caffeine.spoon/init.lua",
        "lineno": "74",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Prevent the screen from going to sleep",
    "doc": "Prevent the screen from going to sleep\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip)",
    "items": [
      {
        "def": "Caffeine:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Caffeine",
        "doc": "Binds hotkeys for Caffeine\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic\n\nReturns:\n * The Caffeine object",
        "examples": [],
        "file": "Source/Caffeine.spoon/init.lua",
        "lineno": "32",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:setState(on)",
        "desc": "Sets whether or not caffeination should be enabled",
        "doc": "Sets whether or not caffeination should be enabled\n\nParameters:\n * on - A boolean, true if screens should be kept awake, false to let macOS send them to sleep\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Caffeine.spoon/init.lua",
        "lineno": "105",
        "name": "setState",
        "notes": [],
        "parameters": [
          " * on - A boolean, true if screens should be kept awake, false to let macOS send them to sleep"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Caffeine:setState(on)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:start()",
        "desc": "Starts Caffeine",
        "doc": "Starts Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "examples": [],
        "file": "Source/Caffeine.spoon/init.lua",
        "lineno": "53",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:stop()",
        "desc": "Stops Caffeine",
        "doc": "Stops Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "examples": [],
        "file": "Source/Caffeine.spoon/init.lua",
        "lineno": "74",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Caffeine",
    "stripped_doc": "Download: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "A calendar inset into the desktop",
    "doc": "A calendar inset into the desktop\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Calendar.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Calendar.spoon.zip)",
    "items": [],
    "name": "Calendar",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Calendar.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Calendar.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Cherry:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Cherry",
        "doc": "Binds hotkeys for Cherry\n\nParameters:\n * mapping - A table containing hotkey details for the following items:\n  * start - start the pomodoro timer (Default: cmd-ctrl-alt-C)",
        "examples": [],
        "file": "Source/Cherry.spoon/init.lua",
        "lineno": "46",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey details for the following items:\n   * start - start the pomodoro timer (Default: cmd-ctrl-alt-C)"
        ],
        "returns": [],
        "signature": "Cherry:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Cherry:popup()",
        "desc": "Popup an alert or notification when time is up.",
        "doc": "Popup an alert or notification when time is up.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Cherry.spoon/init.lua",
        "lineno": "93",
        "name": "popup",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Cherry:popup()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Cherry:start()",
        "desc": "Starts the timer and displays the countdown in a menubar item",
        "doc": "Starts the timer and displays the countdown in a menubar item\n\nParameters:\n * resume - boolean when true resumes countdown at current value of self.timeLeft\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Cherry.spoon/init.lua",
        "lineno": "125",
        "name": "start",
        "notes": [],
        "parameters": [
          " * resume - boolean when true resumes countdown at current value of self.timeLeft"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Cherry:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Cherry tomato (a tiny Pomodoro) -- a Pomodoro Timer for the menubar",
    "doc": "Cherry tomato (a tiny Pomodoro) -- a Pomodoro Timer for the menubar\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Cherry.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Cherry.spoon.zip)\n",
    "items": [
      {
        "def": "Cherry:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Cherry",
        "doc": "Binds hotkeys for Cherry\n\nParameters:\n * mapping - A table containing hotkey details for the following items:\n  * start - start the pomodoro timer (Default: cmd-ctrl-alt-C)",
        "examples": [],
        "file": "Source/Cherry.spoon/init.lua",
        "lineno": "46",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey details for the following items:\n   * start - start the pomodoro timer (Default: cmd-ctrl-alt-C)"
        ],
        "returns": [],
        "signature": "Cherry:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Cherry:popup()",
        "desc": "Popup an alert or notification when time is up.",
        "doc": "Popup an alert or notification when time is up.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Cherry.spoon/init.lua",
        "lineno": "93",
        "name": "popup",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Cherry:popup()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Cherry:start()",
        "desc": "Starts the timer and displays the countdown in a menubar item",
        "doc": "Starts the timer and displays the countdown in a menubar item\n\nParameters:\n * resume - boolean when true resumes countdown at current value of self.timeLeft\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Cherry.spoon/init.lua",
        "lineno": "125",
        "name": "start",
        "notes": [],
        "parameters": [
          " * resume - boolean when true resumes countdown at current value of self.timeLeft"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Cherry:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Cherry",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Cherry.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Cherry.spoon.zip)\n",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "A circleclock inset into the desktop",
    "doc": "A circleclock inset into the desktop\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/CircleClock.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/CircleClock.spoon.zip)",
    "items": [],
    "name": "CircleClock",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/CircleClock.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/CircleClock.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "ClipboardTool:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ClipboardTool",
        "doc": "Binds hotkeys for ClipboardTool\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * show_clipboard - Display the clipboard history chooser\n  * toggle_clipboard - Show/hide the clipboard history chooser",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "482",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * show_clipboard - Display the clipboard history chooser\n   * toggle_clipboard - Show/hide the clipboard history chooser"
        ],
        "returns": [],
        "signature": "ClipboardTool:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:checkAndStorePasteboard()",
        "desc": "If the pasteboard has changed, we add the current item to our history and update the counter",
        "doc": "If the pasteboard has changed, we add the current item to our history and update the counter\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "382",
        "name": "checkAndStorePasteboard",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:checkAndStorePasteboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:clearAll()",
        "desc": "Clears the clipboard and history",
        "doc": "Clears the clipboard and history\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "177",
        "name": "clearAll",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:clearAll()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:clearLastItem()",
        "desc": "Clears the last added to the history",
        "doc": "Clears the last added to the history\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "190",
        "name": "clearLastItem",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:clearLastItem()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:pasteboardToClipboard(item)",
        "desc": "Add the given string to the history",
        "doc": "Add the given string to the history\n\nParameters:\n * item - string to add to the clipboard history\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "218",
        "name": "pasteboardToClipboard",
        "notes": [],
        "parameters": [
          " * item - string to add to the clipboard history"
        ],
        "returns": [
          " * None"
        ],
        "signature": "ClipboardTool:pasteboardToClipboard(item)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:shouldBeStored()",
        "desc": "Verify whether the pasteboard contents matches one of the values in `ClipboardTool.ignoredIdentifiers`",
        "doc": "Verify whether the pasteboard contents matches one of the values in `ClipboardTool.ignoredIdentifiers`\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "342",
        "name": "shouldBeStored",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:shouldBeStored()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:showClipboard()",
        "desc": "Display the current clipboard list in a chooser",
        "doc": "Display the current clipboard list in a chooser\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "452",
        "name": "showClipboard",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:showClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:start()",
        "desc": "Start the clipboard history collector",
        "doc": "Start the clipboard history collector\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "426",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:toggleClipboard()",
        "desc": "Show/hide the clipboard list, depending on its current state",
        "doc": "Show/hide the clipboard list, depending on its current state\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "468",
        "name": "toggleClipboard",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:toggleClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:togglePasteOnSelect()",
        "desc": "Toggle the value of `ClipboardTool.paste_on_select`",
        "doc": "Toggle the value of `ClipboardTool.paste_on_select`\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "132",
        "name": "togglePasteOnSelect",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:togglePasteOnSelect()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "ClipboardTool.deduplicate",
        "desc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "doc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "90",
        "name": "deduplicate",
        "signature": "ClipboardTool.deduplicate",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.display_max_length",
        "desc": "Number of characters to which each clipboard item will be truncated, when displaying in the menu. This only truncates in display, the full content will be used for searching and for pasting.",
        "doc": "Number of characters to which each clipboard item will be truncated, when displaying in the menu. This only truncates in display, the full content will be used for searching and for pasting.",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "105",
        "name": "display_max_length",
        "signature": "ClipboardTool.display_max_length",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.frequency",
        "desc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "doc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "23",
        "name": "frequency",
        "signature": "ClipboardTool.frequency",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.hist_size",
        "desc": "How many items to keep on history. Defaults to 100",
        "doc": "How many items to keep on history. Defaults to 100",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "28",
        "name": "hist_size",
        "signature": "ClipboardTool.hist_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.honor_ignoredidentifiers",
        "desc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `ClipboardTool.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "doc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `ClipboardTool.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "48",
        "name": "honor_ignoredidentifiers",
        "signature": "ClipboardTool.honor_ignoredidentifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.ignoredIdentifiers",
        "desc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua.",
        "doc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua.\n\nNotes:\n * Default value (don't modify unless you know what you are doing):\n```\n {\n    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler\n    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me\n    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator\n    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password\n    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient\n    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed\n    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic\n }\n```",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "63",
        "name": "ignoredIdentifiers",
        "notes": [
          " * Default value (don't modify unless you know what you are doing):",
          "```",
          " {",
          "    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler",
          "    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me",
          "    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator",
          "    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password",
          "    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient",
          "    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed",
          "    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic",
          " }",
          "```"
        ],
        "signature": "ClipboardTool.ignoredIdentifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "58",
        "name": "logger",
        "signature": "ClipboardTool.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.max_entry_size",
        "desc": "maximum size of a text entry",
        "doc": "maximum size of a text entry",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "33",
        "name": "max_entry_size",
        "signature": "ClipboardTool.max_entry_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.max_size",
        "desc": "Whether to check the maximum size of an entry. Defaults to `false`.",
        "doc": "Whether to check the maximum size of an entry. Defaults to `false`.",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "38",
        "name": "max_size",
        "signature": "ClipboardTool.max_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.menubar_title",
        "desc": "String to show in the menubar if `ClipboardTool.show_in_menubar` is `true`. Defaults to `\"\\u{1f4cb}\"`, which is the [Unicode clipboard character](https://codepoints.net/U+1F4CB)",
        "doc": "String to show in the menubar if `ClipboardTool.show_in_menubar` is `true`. Defaults to `\"\\u{1f4cb}\"`, which is the [Unicode clipboard character](https://codepoints.net/U+1F4CB)",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "100",
        "name": "menubar_title",
        "signature": "ClipboardTool.menubar_title",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.paste_on_select",
        "desc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "doc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "53",
        "name": "paste_on_select",
        "signature": "ClipboardTool.paste_on_select",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.show_copied_alert",
        "desc": "If `true`, show an alert when a new item is added to the history, i.e. has been copied.",
        "doc": "If `true`, show an alert when a new item is added to the history, i.e. has been copied.",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "43",
        "name": "show_copied_alert",
        "signature": "ClipboardTool.show_copied_alert",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.show_in_menubar",
        "desc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "doc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "95",
        "name": "show_in_menubar",
        "signature": "ClipboardTool.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Keep a history of the clipboard for text entries and manage the entries with a context menu",
    "doc": "Keep a history of the clipboard for text entries and manage the entries with a context menu\n\nOriginally based on TextClipboardHistory.spoon by Diego Zamboni with additional functions provided by a context menu\nand on [code by VFS](https://github.com/VFS/.hammerspoon/blob/master/tools/clipboard.lua), but with many changes and some contributions and inspiration from [asmagill](https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua).\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ClipboardTool.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ClipboardTool.spoon.zip)",
    "items": [
      {
        "def": "ClipboardTool:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ClipboardTool",
        "doc": "Binds hotkeys for ClipboardTool\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * show_clipboard - Display the clipboard history chooser\n  * toggle_clipboard - Show/hide the clipboard history chooser",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "482",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * show_clipboard - Display the clipboard history chooser\n   * toggle_clipboard - Show/hide the clipboard history chooser"
        ],
        "returns": [],
        "signature": "ClipboardTool:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:checkAndStorePasteboard()",
        "desc": "If the pasteboard has changed, we add the current item to our history and update the counter",
        "doc": "If the pasteboard has changed, we add the current item to our history and update the counter\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "382",
        "name": "checkAndStorePasteboard",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:checkAndStorePasteboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:clearAll()",
        "desc": "Clears the clipboard and history",
        "doc": "Clears the clipboard and history\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "177",
        "name": "clearAll",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:clearAll()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:clearLastItem()",
        "desc": "Clears the last added to the history",
        "doc": "Clears the last added to the history\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "190",
        "name": "clearLastItem",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:clearLastItem()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool.deduplicate",
        "desc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "doc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "90",
        "name": "deduplicate",
        "signature": "ClipboardTool.deduplicate",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.display_max_length",
        "desc": "Number of characters to which each clipboard item will be truncated, when displaying in the menu. This only truncates in display, the full content will be used for searching and for pasting.",
        "doc": "Number of characters to which each clipboard item will be truncated, when displaying in the menu. This only truncates in display, the full content will be used for searching and for pasting.",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "105",
        "name": "display_max_length",
        "signature": "ClipboardTool.display_max_length",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.frequency",
        "desc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "doc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "23",
        "name": "frequency",
        "signature": "ClipboardTool.frequency",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.hist_size",
        "desc": "How many items to keep on history. Defaults to 100",
        "doc": "How many items to keep on history. Defaults to 100",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "28",
        "name": "hist_size",
        "signature": "ClipboardTool.hist_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.honor_ignoredidentifiers",
        "desc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `ClipboardTool.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "doc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `ClipboardTool.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "48",
        "name": "honor_ignoredidentifiers",
        "signature": "ClipboardTool.honor_ignoredidentifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.ignoredIdentifiers",
        "desc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua.",
        "doc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua.\n\nNotes:\n * Default value (don't modify unless you know what you are doing):\n```\n {\n    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler\n    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me\n    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator\n    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password\n    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient\n    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed\n    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic\n }\n```",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "63",
        "name": "ignoredIdentifiers",
        "notes": [
          " * Default value (don't modify unless you know what you are doing):",
          "```",
          " {",
          "    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler",
          "    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me",
          "    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator",
          "    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password",
          "    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient",
          "    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed",
          "    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic",
          " }",
          "```"
        ],
        "signature": "ClipboardTool.ignoredIdentifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "58",
        "name": "logger",
        "signature": "ClipboardTool.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.max_entry_size",
        "desc": "maximum size of a text entry",
        "doc": "maximum size of a text entry",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "33",
        "name": "max_entry_size",
        "signature": "ClipboardTool.max_entry_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.max_size",
        "desc": "Whether to check the maximum size of an entry. Defaults to `false`.",
        "doc": "Whether to check the maximum size of an entry. Defaults to `false`.",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "38",
        "name": "max_size",
        "signature": "ClipboardTool.max_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.menubar_title",
        "desc": "String to show in the menubar if `ClipboardTool.show_in_menubar` is `true`. Defaults to `\"\\u{1f4cb}\"`, which is the [Unicode clipboard character](https://codepoints.net/U+1F4CB)",
        "doc": "String to show in the menubar if `ClipboardTool.show_in_menubar` is `true`. Defaults to `\"\\u{1f4cb}\"`, which is the [Unicode clipboard character](https://codepoints.net/U+1F4CB)",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "100",
        "name": "menubar_title",
        "signature": "ClipboardTool.menubar_title",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.paste_on_select",
        "desc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "doc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "53",
        "name": "paste_on_select",
        "signature": "ClipboardTool.paste_on_select",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool:pasteboardToClipboard(item)",
        "desc": "Add the given string to the history",
        "doc": "Add the given string to the history\n\nParameters:\n * item - string to add to the clipboard history\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "218",
        "name": "pasteboardToClipboard",
        "notes": [],
        "parameters": [
          " * item - string to add to the clipboard history"
        ],
        "returns": [
          " * None"
        ],
        "signature": "ClipboardTool:pasteboardToClipboard(item)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:shouldBeStored()",
        "desc": "Verify whether the pasteboard contents matches one of the values in `ClipboardTool.ignoredIdentifiers`",
        "doc": "Verify whether the pasteboard contents matches one of the values in `ClipboardTool.ignoredIdentifiers`\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "342",
        "name": "shouldBeStored",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:shouldBeStored()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool.show_copied_alert",
        "desc": "If `true`, show an alert when a new item is added to the history, i.e. has been copied.",
        "doc": "If `true`, show an alert when a new item is added to the history, i.e. has been copied.",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "43",
        "name": "show_copied_alert",
        "signature": "ClipboardTool.show_copied_alert",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool.show_in_menubar",
        "desc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "doc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "95",
        "name": "show_in_menubar",
        "signature": "ClipboardTool.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ClipboardTool:showClipboard()",
        "desc": "Display the current clipboard list in a chooser",
        "doc": "Display the current clipboard list in a chooser\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "452",
        "name": "showClipboard",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:showClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:start()",
        "desc": "Start the clipboard history collector",
        "doc": "Start the clipboard history collector\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "426",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:toggleClipboard()",
        "desc": "Show/hide the clipboard list, depending on its current state",
        "doc": "Show/hide the clipboard list, depending on its current state\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "468",
        "name": "toggleClipboard",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:toggleClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipboardTool:togglePasteOnSelect()",
        "desc": "Toggle the value of `ClipboardTool.paste_on_select`",
        "doc": "Toggle the value of `ClipboardTool.paste_on_select`\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipboardTool.spoon/init.lua",
        "lineno": "132",
        "name": "togglePasteOnSelect",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipboardTool:togglePasteOnSelect()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "ClipboardTool",
    "stripped_doc": "\nOriginally based on TextClipboardHistory.spoon by Diego Zamboni with additional functions provided by a context menu\nand on [code by VFS](https://github.com/VFS/.hammerspoon/blob/master/tools/clipboard.lua), but with many changes and some contributions and inspiration from [asmagill](https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua).\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ClipboardTool.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ClipboardTool.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "ClipShow:openInBrowserWithRef(refstr)",
        "desc": "Open content of the clipboard in default browser with specific refstr.",
        "doc": "Open content of the clipboard in default browser with specific refstr.\n\nParameters:\n * refstr - A optional string specifying which refstr to use. If nil, then open this content in browser directly. The \"refstr\" could be something like this: `https://www.bing.com/search?q=`.",
        "examples": [],
        "file": "Source/ClipShow.spoon/init.lua",
        "lineno": "267",
        "name": "openInBrowserWithRef",
        "notes": [],
        "parameters": [
          " * refstr - A optional string specifying which refstr to use. If nil, then open this content in browser directly. The \"refstr\" could be something like this: `https://www.bing.com/search?q=`."
        ],
        "returns": [],
        "signature": "ClipShow:openInBrowserWithRef(refstr)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipShow:openWithCommand(command)",
        "desc": "Open local file with specific command.",
        "doc": "Open local file with specific command.\n\nParameters:\n * command - A string specifying which command to use. The \"command\" is something like this: `/usr/local/bin/mvim`.",
        "examples": [],
        "file": "Source/ClipShow.spoon/init.lua",
        "lineno": "379",
        "name": "openWithCommand",
        "notes": [],
        "parameters": [
          " * command - A string specifying which command to use. The \"command\" is something like this: `/usr/local/bin/mvim`."
        ],
        "returns": [],
        "signature": "ClipShow:openWithCommand(command)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipShow:restoreLastSession()",
        "desc": "Restore the lastsession of system clipboard",
        "doc": "Restore the lastsession of system clipboard\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipShow.spoon/init.lua",
        "lineno": "340",
        "name": "restoreLastSession",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipShow:restoreLastSession()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipShow:saveToFile()",
        "desc": "Save content of current canvas to a file, the default location is `~/Desktop/`.",
        "doc": "Save content of current canvas to a file, the default location is `~/Desktop/`.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipShow.spoon/init.lua",
        "lineno": "355",
        "name": "saveToFile",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipShow:saveToFile()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipShow:saveToSession()",
        "desc": "Save clipboard session so we can restore it later",
        "doc": "Save clipboard session so we can restore it later\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipShow.spoon/init.lua",
        "lineno": "298",
        "name": "saveToSession",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipShow:saveToSession()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipShow:toggleShow()",
        "desc": "Process the content of system clipboard and show/hide the canvas",
        "doc": "Process the content of system clipboard and show/hide the canvas\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipShow.spoon/init.lua",
        "lineno": "99",
        "name": "toggleShow",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipShow:toggleShow()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Show the content of system clipboard",
    "doc": "Show the content of system clipboard\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ClipShow.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ClipShow.spoon.zip)",
    "items": [
      {
        "def": "ClipShow:openInBrowserWithRef(refstr)",
        "desc": "Open content of the clipboard in default browser with specific refstr.",
        "doc": "Open content of the clipboard in default browser with specific refstr.\n\nParameters:\n * refstr - A optional string specifying which refstr to use. If nil, then open this content in browser directly. The \"refstr\" could be something like this: `https://www.bing.com/search?q=`.",
        "examples": [],
        "file": "Source/ClipShow.spoon/init.lua",
        "lineno": "267",
        "name": "openInBrowserWithRef",
        "notes": [],
        "parameters": [
          " * refstr - A optional string specifying which refstr to use. If nil, then open this content in browser directly. The \"refstr\" could be something like this: `https://www.bing.com/search?q=`."
        ],
        "returns": [],
        "signature": "ClipShow:openInBrowserWithRef(refstr)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipShow:openWithCommand(command)",
        "desc": "Open local file with specific command.",
        "doc": "Open local file with specific command.\n\nParameters:\n * command - A string specifying which command to use. The \"command\" is something like this: `/usr/local/bin/mvim`.",
        "examples": [],
        "file": "Source/ClipShow.spoon/init.lua",
        "lineno": "379",
        "name": "openWithCommand",
        "notes": [],
        "parameters": [
          " * command - A string specifying which command to use. The \"command\" is something like this: `/usr/local/bin/mvim`."
        ],
        "returns": [],
        "signature": "ClipShow:openWithCommand(command)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipShow:restoreLastSession()",
        "desc": "Restore the lastsession of system clipboard",
        "doc": "Restore the lastsession of system clipboard\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipShow.spoon/init.lua",
        "lineno": "340",
        "name": "restoreLastSession",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipShow:restoreLastSession()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipShow:saveToFile()",
        "desc": "Save content of current canvas to a file, the default location is `~/Desktop/`.",
        "doc": "Save content of current canvas to a file, the default location is `~/Desktop/`.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipShow.spoon/init.lua",
        "lineno": "355",
        "name": "saveToFile",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipShow:saveToFile()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipShow:saveToSession()",
        "desc": "Save clipboard session so we can restore it later",
        "doc": "Save clipboard session so we can restore it later\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipShow.spoon/init.lua",
        "lineno": "298",
        "name": "saveToSession",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipShow:saveToSession()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ClipShow:toggleShow()",
        "desc": "Process the content of system clipboard and show/hide the canvas",
        "doc": "Process the content of system clipboard and show/hide the canvas\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ClipShow.spoon/init.lua",
        "lineno": "99",
        "name": "toggleShow",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ClipShow:toggleShow()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "ClipShow",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ClipShow.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ClipShow.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "ColorPicker:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ColorPicker",
        "doc": "Binds hotkeys for ColorPicker\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * show - Show color picker menu",
        "examples": [],
        "file": "Source/ColorPicker.spoon/init.lua",
        "lineno": "185",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * show - Show color picker menu"
        ],
        "returns": [],
        "signature": "ColorPicker:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ColorPicker.toggleColorSamples(tablename)",
        "desc": "Toggle display on the screen of a grid with all the colors in the given colortable",
        "doc": "Toggle display on the screen of a grid with all the colors in the given colortable\n\nParameters:\n * tablename - name of the colortable to display",
        "examples": [],
        "file": "Source/ColorPicker.spoon/init.lua",
        "lineno": "108",
        "name": "toggleColorSamples",
        "notes": [],
        "parameters": [
          " * tablename - name of the colortable to display"
        ],
        "returns": [],
        "signature": "ColorPicker.toggleColorSamples(tablename)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "ColorPicker.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/ColorPicker.spoon/init.lua",
        "lineno": "21",
        "name": "logger",
        "signature": "ColorPicker.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ColorPicker.menubar_title",
        "desc": "Title to show in the menubar if `show_in_menubar` is true. Defaults to `\"\\u{1F308}\"`, which is the [Rainbow Emoji](http://emojipedia.org/rainbow/)",
        "doc": "Title to show in the menubar if `show_in_menubar` is true. Defaults to `\"\\u{1F308}\"`, which is the [Rainbow Emoji](http://emojipedia.org/rainbow/)",
        "file": "Source/ColorPicker.spoon/init.lua",
        "lineno": "31",
        "name": "menubar_title",
        "signature": "ColorPicker.menubar_title",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ColorPicker.show_in_menubar",
        "desc": "If `true`, show an icon in the menubar to trigger the color picker",
        "doc": "If `true`, show an icon in the menubar to trigger the color picker",
        "file": "Source/ColorPicker.spoon/init.lua",
        "lineno": "26",
        "name": "show_in_menubar",
        "signature": "ColorPicker.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Show a color sample/picker",
    "doc": "Show a color sample/picker\n\nClicking on any color will copy its name to the clipboard, cmd-click will copy its RGB code.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ColorPicker.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ColorPicker.spoon.zip)",
    "items": [
      {
        "def": "ColorPicker:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ColorPicker",
        "doc": "Binds hotkeys for ColorPicker\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * show - Show color picker menu",
        "examples": [],
        "file": "Source/ColorPicker.spoon/init.lua",
        "lineno": "185",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * show - Show color picker menu"
        ],
        "returns": [],
        "signature": "ColorPicker:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ColorPicker.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/ColorPicker.spoon/init.lua",
        "lineno": "21",
        "name": "logger",
        "signature": "ColorPicker.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ColorPicker.menubar_title",
        "desc": "Title to show in the menubar if `show_in_menubar` is true. Defaults to `\"\\u{1F308}\"`, which is the [Rainbow Emoji](http://emojipedia.org/rainbow/)",
        "doc": "Title to show in the menubar if `show_in_menubar` is true. Defaults to `\"\\u{1F308}\"`, which is the [Rainbow Emoji](http://emojipedia.org/rainbow/)",
        "file": "Source/ColorPicker.spoon/init.lua",
        "lineno": "31",
        "name": "menubar_title",
        "signature": "ColorPicker.menubar_title",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ColorPicker.show_in_menubar",
        "desc": "If `true`, show an icon in the menubar to trigger the color picker",
        "doc": "If `true`, show an icon in the menubar to trigger the color picker",
        "file": "Source/ColorPicker.spoon/init.lua",
        "lineno": "26",
        "name": "show_in_menubar",
        "signature": "ColorPicker.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ColorPicker.toggleColorSamples(tablename)",
        "desc": "Toggle display on the screen of a grid with all the colors in the given colortable",
        "doc": "Toggle display on the screen of a grid with all the colors in the given colortable\n\nParameters:\n * tablename - name of the colortable to display",
        "examples": [],
        "file": "Source/ColorPicker.spoon/init.lua",
        "lineno": "108",
        "name": "toggleColorSamples",
        "notes": [],
        "parameters": [
          " * tablename - name of the colortable to display"
        ],
        "returns": [],
        "signature": "ColorPicker.toggleColorSamples(tablename)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "ColorPicker",
    "stripped_doc": "\nClicking on any color will copy its name to the clipboard, cmd-click will copy its RGB code.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ColorPicker.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ColorPicker.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [
      {
        "def": "Commander.addCommand(commandTable)",
        "desc": "Add a command to Commander.commandTable",
        "doc": "Add a command to Commander.commandTable\n\nParameters:\n * commandTable - It is a table with same form of Commander.commandTable key is name of command, value is the function.\n\nNotes:\n * Commander doesn't test the name against Commander.ignoredCommandList because it assumes you know what you are doing.",
        "examples": [],
        "file": "Source/Commander.spoon/init.lua",
        "lineno": "124",
        "name": "addCommand",
        "notes": [
          " * Commander doesn't test the name against Commander.ignoredCommandList because it assumes you know what you are doing."
        ],
        "parameters": [
          " * commandTable - It is a table with same form of Commander.commandTable key is name of command, value is the function."
        ],
        "returns": [],
        "signature": "Commander.addCommand(commandTable)",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Commander.resetCommandTable()",
        "desc": "This function simply set Commander.commandTable to {}, then the next time commander chooser is called it will generate the table again.",
        "doc": "This function simply set Commander.commandTable to {}, then the next time commander chooser is called it will generate the table again.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Commander.spoon/init.lua",
        "lineno": "137",
        "name": "resetCommandTable",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Commander.resetCommandTable()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Commander.show()",
        "desc": "This function shows the command chooser. Bind this to a hotkey to use commander.",
        "doc": "This function shows the command chooser. Bind this to a hotkey to use commander.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Commander.spoon/init.lua",
        "lineno": "64",
        "name": "show",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Commander.show()",
        "stripped_doc": "",
        "type": "Function"
      }
    ],
    "Method": [],
    "Variable": [
      {
        "def": "Commander.commandTable",
        "desc": "This is the table which stores all the commands",
        "doc": "This is the table which stores all the commands\n\nNotes:\n * Each key is the name of the command, and each value is the actual function. You can add your custom commands to it.",
        "file": "Source/Commander.spoon/init.lua",
        "lineno": "33",
        "name": "commandTable",
        "notes": [
          " * Each key is the name of the command, and each value is the actual function. You can add your custom commands to it."
        ],
        "signature": "Commander.commandTable",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Commander.forceLayout",
        "desc": "If you want to switch to a layout when enabled chooser, set this to name of that layout",
        "doc": "If you want to switch to a layout when enabled chooser, set this to name of that layout",
        "file": "Source/Commander.spoon/init.lua",
        "lineno": "54",
        "name": "forceLayout",
        "signature": "Commander.forceLayout",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Commander.forceMethod",
        "desc": "If you want to switch to a method when enabled chooser, set this to name of that method",
        "doc": "If you want to switch to a method when enabled chooser, set this to name of that method",
        "file": "Source/Commander.spoon/init.lua",
        "lineno": "59",
        "name": "forceMethod",
        "signature": "Commander.forceMethod",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Commander.ignoredCommandList",
        "desc": "This list contains all the ignored function names, any function matches the name inside this list will not be added to Commander.commandTable.",
        "doc": "This list contains all the ignored function names, any function matches the name inside this list will not be added to Commander.commandTable.\n\nNotes:\n * The list contains normal lua builtin functions and some hammerspoon functions that generally shouldn't be a command, such as init, bindHotkeys, etc.",
        "file": "Source/Commander.spoon/init.lua",
        "lineno": "41",
        "name": "ignoredCommandList",
        "notes": [
          " * The list contains normal lua builtin functions and some hammerspoon functions that generally shouldn't be a command, such as init, bindHotkeys, etc."
        ],
        "signature": "Commander.ignoredCommandList",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "This spoon lets execute commands from other spoon by a chooser.",
    "doc": "This spoon lets execute commands from other spoon by a chooser.\n\nThe way of Commander to generate it command list is\nit goes to each spoon and extract all public functions inside the spoon table.\nfor each function the name is set to \"spoonName.functionName\".\nif the spoon has a table called `commandderCommandTable`, Commander will\nignore everything else and take whatever is in the table.\nIn this case the naming convention is the same.\nThen Commander grabs all the functions in global table.\nfunctions are tested against `Commander.ignoredCommandList`,\nexcept when spoon author provides a `commanderCommandList`.\n\nCommander.chooser is the chooser, you can set background color, rows, etc, to it.",
    "items": [
      {
        "def": "Commander.addCommand(commandTable)",
        "desc": "Add a command to Commander.commandTable",
        "doc": "Add a command to Commander.commandTable\n\nParameters:\n * commandTable - It is a table with same form of Commander.commandTable key is name of command, value is the function.\n\nNotes:\n * Commander doesn't test the name against Commander.ignoredCommandList because it assumes you know what you are doing.",
        "examples": [],
        "file": "Source/Commander.spoon/init.lua",
        "lineno": "124",
        "name": "addCommand",
        "notes": [
          " * Commander doesn't test the name against Commander.ignoredCommandList because it assumes you know what you are doing."
        ],
        "parameters": [
          " * commandTable - It is a table with same form of Commander.commandTable key is name of command, value is the function."
        ],
        "returns": [],
        "signature": "Commander.addCommand(commandTable)",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Commander.commandTable",
        "desc": "This is the table which stores all the commands",
        "doc": "This is the table which stores all the commands\n\nNotes:\n * Each key is the name of the command, and each value is the actual function. You can add your custom commands to it.",
        "file": "Source/Commander.spoon/init.lua",
        "lineno": "33",
        "name": "commandTable",
        "notes": [
          " * Each key is the name of the command, and each value is the actual function. You can add your custom commands to it."
        ],
        "signature": "Commander.commandTable",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Commander.forceLayout",
        "desc": "If you want to switch to a layout when enabled chooser, set this to name of that layout",
        "doc": "If you want to switch to a layout when enabled chooser, set this to name of that layout",
        "file": "Source/Commander.spoon/init.lua",
        "lineno": "54",
        "name": "forceLayout",
        "signature": "Commander.forceLayout",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Commander.forceMethod",
        "desc": "If you want to switch to a method when enabled chooser, set this to name of that method",
        "doc": "If you want to switch to a method when enabled chooser, set this to name of that method",
        "file": "Source/Commander.spoon/init.lua",
        "lineno": "59",
        "name": "forceMethod",
        "signature": "Commander.forceMethod",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Commander.ignoredCommandList",
        "desc": "This list contains all the ignored function names, any function matches the name inside this list will not be added to Commander.commandTable.",
        "doc": "This list contains all the ignored function names, any function matches the name inside this list will not be added to Commander.commandTable.\n\nNotes:\n * The list contains normal lua builtin functions and some hammerspoon functions that generally shouldn't be a command, such as init, bindHotkeys, etc.",
        "file": "Source/Commander.spoon/init.lua",
        "lineno": "41",
        "name": "ignoredCommandList",
        "notes": [
          " * The list contains normal lua builtin functions and some hammerspoon functions that generally shouldn't be a command, such as init, bindHotkeys, etc."
        ],
        "signature": "Commander.ignoredCommandList",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Commander.resetCommandTable()",
        "desc": "This function simply set Commander.commandTable to {}, then the next time commander chooser is called it will generate the table again.",
        "doc": "This function simply set Commander.commandTable to {}, then the next time commander chooser is called it will generate the table again.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Commander.spoon/init.lua",
        "lineno": "137",
        "name": "resetCommandTable",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Commander.resetCommandTable()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Commander.show()",
        "desc": "This function shows the command chooser. Bind this to a hotkey to use commander.",
        "doc": "This function shows the command chooser. Bind this to a hotkey to use commander.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Commander.spoon/init.lua",
        "lineno": "64",
        "name": "show",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Commander.show()",
        "stripped_doc": "",
        "type": "Function"
      }
    ],
    "name": "Commander",
    "stripped_doc": "\nThe way of Commander to generate it command list is\nit goes to each spoon and extract all public functions inside the spoon table.\nfor each function the name is set to \"spoonName.functionName\".\nif the spoon has a table called `commandderCommandTable`, Commander will\nignore everything else and take whatever is in the table.\nIn this case the naming convention is the same.\nThen Commander grabs all the functions in global table.\nfunctions are tested against `Commander.ignoredCommandList`,\nexcept when spoon author provides a `commanderCommandList`.\n\nCommander.chooser is the chooser, you can set background color, rows, etc, to it.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "CountDown:pauseOrResume()",
        "desc": "Pause or resume the existing countdown.",
        "doc": "Pause or resume the existing countdown.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/CountDown.spoon/init.lua",
        "lineno": "85",
        "name": "pauseOrResume",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "CountDown:pauseOrResume()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "CountDown:setProgress(progress)",
        "desc": "Set the progress of visual indicator to `progress`.",
        "doc": "Set the progress of visual indicator to `progress`.\n\nParameters:\n * progress - an number specifying the value of progress (0.0 - 1.0)",
        "examples": [],
        "file": "Source/CountDown.spoon/init.lua",
        "lineno": "102",
        "name": "setProgress",
        "notes": [],
        "parameters": [
          " * progress - an number specifying the value of progress (0.0 - 1.0)"
        ],
        "returns": [],
        "signature": "CountDown:setProgress(progress)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "CountDown:startFor(minutes)",
        "desc": "Start a countdown for `minutes` minutes immediately. Calling this method again will kill the existing countdown instance.",
        "doc": "Start a countdown for `minutes` minutes immediately. Calling this method again will kill the existing countdown instance.\n\nParameters:\n * minutes - How many minutes",
        "examples": [],
        "file": "Source/CountDown.spoon/init.lua",
        "lineno": "39",
        "name": "startFor",
        "notes": [],
        "parameters": [
          " * minutes - How many minutes"
        ],
        "returns": [],
        "signature": "CountDown:startFor(minutes)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Tiny countdown with visual indicator",
    "doc": "Tiny countdown with visual indicator\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/CountDown.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/CountDown.spoon.zip)",
    "items": [
      {
        "def": "CountDown:pauseOrResume()",
        "desc": "Pause or resume the existing countdown.",
        "doc": "Pause or resume the existing countdown.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/CountDown.spoon/init.lua",
        "lineno": "85",
        "name": "pauseOrResume",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "CountDown:pauseOrResume()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "CountDown:setProgress(progress)",
        "desc": "Set the progress of visual indicator to `progress`.",
        "doc": "Set the progress of visual indicator to `progress`.\n\nParameters:\n * progress - an number specifying the value of progress (0.0 - 1.0)",
        "examples": [],
        "file": "Source/CountDown.spoon/init.lua",
        "lineno": "102",
        "name": "setProgress",
        "notes": [],
        "parameters": [
          " * progress - an number specifying the value of progress (0.0 - 1.0)"
        ],
        "returns": [],
        "signature": "CountDown:setProgress(progress)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "CountDown:startFor(minutes)",
        "desc": "Start a countdown for `minutes` minutes immediately. Calling this method again will kill the existing countdown instance.",
        "doc": "Start a countdown for `minutes` minutes immediately. Calling this method again will kill the existing countdown instance.\n\nParameters:\n * minutes - How many minutes",
        "examples": [],
        "file": "Source/CountDown.spoon/init.lua",
        "lineno": "39",
        "name": "startFor",
        "notes": [],
        "parameters": [
          " * minutes - How many minutes"
        ],
        "returns": [],
        "signature": "CountDown:startFor(minutes)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "CountDown",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/CountDown.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/CountDown.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "DeepLTranslate:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for DeepLTranslate",
        "doc": "Binds hotkeys for DeepLTranslate\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * `translate` - translate the selected text without specifying source/destination languages (source defaults to auto-detect, destination defaults to your last choice or to English)\n\nExamples:\n * Sample value for `mapping`:\n```\n {\n    translate = { { \"ctrl\", \"alt\", \"cmd\" }, \"E\" },\n }\n```",
        "examples": [
          " * Sample value for `mapping`:",
          "```",
          " {",
          "    translate = { { \"ctrl\", \"alt\", \"cmd\" }, \"E\" },",
          " }",
          "```"
        ],
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "217",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * `translate` - translate the selected text without specifying source/destination languages (source defaults to auto-detect, destination defaults to your last choice or to English)"
        ],
        "returns": [],
        "signature": "DeepLTranslate:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "DeepLTranslate:translatePopup(text)",
        "desc": "Display a translation popup with the translation of the given text",
        "doc": "Display a translation popup with the translation of the given text\n\nParameters:\n * text - string containing the text to translate\n\nReturns:\n * The DeepLTranslate object",
        "examples": [],
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "119",
        "name": "translatePopup",
        "notes": [],
        "parameters": [
          " * text - string containing the text to translate"
        ],
        "returns": [
          " * The DeepLTranslate object"
        ],
        "signature": "DeepLTranslate:translatePopup(text)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "DeepLTranslate:translateSelectionPopup()",
        "desc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages",
        "doc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages\n\nParameters:\n * None\n\nReturns:\n * The DeepLTranslate object",
        "examples": [],
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "196",
        "name": "translateSelectionPopup",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The DeepLTranslate object"
        ],
        "signature": "DeepLTranslate:translateSelectionPopup()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "DeepLTranslate.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "47",
        "name": "logger",
        "signature": "DeepLTranslate.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "DeepLTranslate.popup_close_after_copy",
        "desc": "If true, the popup window will close after translated text is copied to pasteboard. Defaults to `true`",
        "doc": "If true, the popup window will close after translated text is copied to pasteboard. Defaults to `true`",
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "41",
        "name": "popup_close_after_copy",
        "signature": "DeepLTranslate.popup_close_after_copy",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "DeepLTranslate.popup_close_on_escape",
        "desc": "If true, pressing ESC on the popup window will close it. Defaults to `true`",
        "doc": "If true, pressing ESC on the popup window will close it. Defaults to `true`",
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "36",
        "name": "popup_close_on_escape",
        "signature": "DeepLTranslate.popup_close_on_escape",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "DeepLTranslate.popup_size",
        "desc": "`hs.geometry` object representing the size to use for the translation popup window. Defaults to `hs.geometry.size(770, 610)`.",
        "doc": "`hs.geometry` object representing the size to use for the translation popup window. Defaults to `hs.geometry.size(770, 610)`.",
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "26",
        "name": "popup_size",
        "signature": "DeepLTranslate.popup_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "DeepLTranslate.popup_style",
        "desc": "Value representing the window style to be used for the translation popup window. This value needs to be a valid argument to [`hs.webview.setStyle()`](http://www.hammerspoon.org/docs/hs.webview.html#windowStyle) (i.e. a combination of values from [`hs.webview.windowMasks`](http://www.hammerspoon.org/docs/hs.webview.html#windowMasks[]). Default value: `hs.webview.windowMasks.utility|hs.webview.windowMasks.HUD|hs.webview.windowMasks.titled|hs.webview.windowMasks.closable`",
        "doc": "Value representing the window style to be used for the translation popup window. This value needs to be a valid argument to [`hs.webview.setStyle()`](http://www.hammerspoon.org/docs/hs.webview.html#windowStyle) (i.e. a combination of values from [`hs.webview.windowMasks`](http://www.hammerspoon.org/docs/hs.webview.html#windowMasks[]). Default value: `hs.webview.windowMasks.utility|hs.webview.windowMasks.HUD|hs.webview.windowMasks.titled|hs.webview.windowMasks.closable`",
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "31",
        "name": "popup_style",
        "signature": "DeepLTranslate.popup_style",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Show a popup window with the translation of the currently selected text",
    "doc": "Show a popup window with the translation of the currently selected text\n\nThe spoon uses the https://www.deepl.com translator page\nThe selected text is copied into the source field.  \nThe modal hotkey cmd+alt+ctrl+O replaces the selected text with the translation\n\nSupported language codes are listed at https://www.deepl.com/translator\n\nThis is just an adaption of the Spoon PopupTranslateSelection written by Diego Zamboni\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/DeepLTranslate.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/DeepLTranslate.spoon.zip)",
    "items": [
      {
        "def": "DeepLTranslate:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for DeepLTranslate",
        "doc": "Binds hotkeys for DeepLTranslate\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * `translate` - translate the selected text without specifying source/destination languages (source defaults to auto-detect, destination defaults to your last choice or to English)\n\nExamples:\n * Sample value for `mapping`:\n```\n {\n    translate = { { \"ctrl\", \"alt\", \"cmd\" }, \"E\" },\n }\n```",
        "examples": [
          " * Sample value for `mapping`:",
          "```",
          " {",
          "    translate = { { \"ctrl\", \"alt\", \"cmd\" }, \"E\" },",
          " }",
          "```"
        ],
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "217",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * `translate` - translate the selected text without specifying source/destination languages (source defaults to auto-detect, destination defaults to your last choice or to English)"
        ],
        "returns": [],
        "signature": "DeepLTranslate:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "DeepLTranslate.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "47",
        "name": "logger",
        "signature": "DeepLTranslate.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "DeepLTranslate.popup_close_after_copy",
        "desc": "If true, the popup window will close after translated text is copied to pasteboard. Defaults to `true`",
        "doc": "If true, the popup window will close after translated text is copied to pasteboard. Defaults to `true`",
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "41",
        "name": "popup_close_after_copy",
        "signature": "DeepLTranslate.popup_close_after_copy",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "DeepLTranslate.popup_close_on_escape",
        "desc": "If true, pressing ESC on the popup window will close it. Defaults to `true`",
        "doc": "If true, pressing ESC on the popup window will close it. Defaults to `true`",
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "36",
        "name": "popup_close_on_escape",
        "signature": "DeepLTranslate.popup_close_on_escape",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "DeepLTranslate.popup_size",
        "desc": "`hs.geometry` object representing the size to use for the translation popup window. Defaults to `hs.geometry.size(770, 610)`.",
        "doc": "`hs.geometry` object representing the size to use for the translation popup window. Defaults to `hs.geometry.size(770, 610)`.",
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "26",
        "name": "popup_size",
        "signature": "DeepLTranslate.popup_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "DeepLTranslate.popup_style",
        "desc": "Value representing the window style to be used for the translation popup window. This value needs to be a valid argument to [`hs.webview.setStyle()`](http://www.hammerspoon.org/docs/hs.webview.html#windowStyle) (i.e. a combination of values from [`hs.webview.windowMasks`](http://www.hammerspoon.org/docs/hs.webview.html#windowMasks[]). Default value: `hs.webview.windowMasks.utility|hs.webview.windowMasks.HUD|hs.webview.windowMasks.titled|hs.webview.windowMasks.closable`",
        "doc": "Value representing the window style to be used for the translation popup window. This value needs to be a valid argument to [`hs.webview.setStyle()`](http://www.hammerspoon.org/docs/hs.webview.html#windowStyle) (i.e. a combination of values from [`hs.webview.windowMasks`](http://www.hammerspoon.org/docs/hs.webview.html#windowMasks[]). Default value: `hs.webview.windowMasks.utility|hs.webview.windowMasks.HUD|hs.webview.windowMasks.titled|hs.webview.windowMasks.closable`",
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "31",
        "name": "popup_style",
        "signature": "DeepLTranslate.popup_style",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "DeepLTranslate:translatePopup(text)",
        "desc": "Display a translation popup with the translation of the given text",
        "doc": "Display a translation popup with the translation of the given text\n\nParameters:\n * text - string containing the text to translate\n\nReturns:\n * The DeepLTranslate object",
        "examples": [],
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "119",
        "name": "translatePopup",
        "notes": [],
        "parameters": [
          " * text - string containing the text to translate"
        ],
        "returns": [
          " * The DeepLTranslate object"
        ],
        "signature": "DeepLTranslate:translatePopup(text)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "DeepLTranslate:translateSelectionPopup()",
        "desc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages",
        "doc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages\n\nParameters:\n * None\n\nReturns:\n * The DeepLTranslate object",
        "examples": [],
        "file": "Source/DeepLTranslate.spoon/init.lua",
        "lineno": "196",
        "name": "translateSelectionPopup",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The DeepLTranslate object"
        ],
        "signature": "DeepLTranslate:translateSelectionPopup()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "DeepLTranslate",
    "stripped_doc": "\nThe spoon uses the https://www.deepl.com translator page\nThe selected text is copied into the source field.  \nThe modal hotkey cmd+alt+ctrl+O replaces the selected text with the translation\n\nSupported language codes are listed at https://www.deepl.com/translator\n\nThis is just an adaption of the Spoon PopupTranslateSelection written by Diego Zamboni\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/DeepLTranslate.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/DeepLTranslate.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "EjectMenu:bindHotkeys(mapping, ejectAll)",
        "desc": "Binds hotkeys for EjectMenu",
        "doc": "Binds hotkeys for EjectMenu\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n * ejectAll - eject all volumes.",
        "examples": [],
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "217",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:",
          " * ejectAll - eject all volumes."
        ],
        "returns": [],
        "signature": "EjectMenu:bindHotkeys(mapping, ejectAll)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu:ejectVolumes()",
        "desc": "Eject all volumes",
        "doc": "Eject all volumes\n\nParameters:\n * persistent_notifs: a boolean indicating whether notifications (if shown) should be persistent.",
        "examples": [],
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "125",
        "name": "ejectVolumes",
        "notes": [],
        "parameters": [
          " * persistent_notifs: a boolean indicating whether notifications (if shown) should be persistent."
        ],
        "returns": [],
        "signature": "EjectMenu:ejectVolumes()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu:shouldEject(path, info)",
        "desc": "Determine if a volume should be ejected.",
        "doc": "Determine if a volume should be ejected.\n\nParameters:\n * path - the mount path of the volume.\n * info - a table containing a data structure as returned by `hs.fs.volume.allVolumes()`.\n\nReturns:\n * A boolean indicating whether the volume should be ejected.",
        "examples": [],
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "72",
        "name": "shouldEject",
        "notes": [],
        "parameters": [
          " * path - the mount path of the volume.",
          " * info - a table containing a data structure as returned by `hs.fs.volume.allVolumes()`."
        ],
        "returns": [
          " * A boolean indicating whether the volume should be ejected."
        ],
        "signature": "EjectMenu:shouldEject(path, info)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu:start()",
        "desc": "Start the watchers for power events and screen changes, to trigger volume ejection.",
        "doc": "Start the watchers for power events and screen changes, to trigger volume ejection.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "243",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "EjectMenu:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu:stop()",
        "desc": "Stop the watchers",
        "doc": "Stop the watchers\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "285",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "EjectMenu:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu:volumesToEject()",
        "desc": "Return table of volumes to be ejected when \"Eject All\" is invoked.",
        "doc": "Return table of volumes to be ejected when \"Eject All\" is invoked.\n\nParameters:\n * None\n\nReturns:\n * A table in the same format as returned by `hs.fs.volume.allVolumes()` but containing only those volumes for which `EjectMenu:shouldEject()` returns `true`.\n * An integer indicating how many volumes are in the table.",
        "examples": [],
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "87",
        "name": "volumesToEject",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * A table in the same format as returned by `hs.fs.volume.allVolumes()` but containing only those volumes for which `EjectMenu:shouldEject()` returns `true`.",
          " * An integer indicating how many volumes are in the table."
        ],
        "signature": "EjectMenu:volumesToEject()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "EjectMenu.eject_on_lid_close",
        "desc": "Boolean, whether to eject volumes when the laptop lid is closed with an external display connected.",
        "doc": "Boolean, whether to eject volumes when the laptop lid is closed with an external display connected.\n\nNotes:\n * There is no \"lid close\" event, so we detect when the internal display gets disabled.\n * This method is somewhat unreliable (e.g. it also triggers when the internal display goes to sleep due to inactivity), so its default value is `false`",
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "50",
        "name": "eject_on_lid_close",
        "notes": [
          " * There is no \"lid close\" event, so we detect when the internal display gets disabled.",
          " * This method is somewhat unreliable (e.g. it also triggers when the internal display goes to sleep due to inactivity), so its default value is `false`"
        ],
        "signature": "EjectMenu.eject_on_lid_close",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.eject_on_sleep",
        "desc": "Boolean, whether to eject volumes before the system goes to sleep. Default value: true",
        "doc": "Boolean, whether to eject volumes before the system goes to sleep. Default value: true",
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "45",
        "name": "eject_on_sleep",
        "signature": "EjectMenu.eject_on_sleep",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "30",
        "name": "logger",
        "signature": "EjectMenu.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.never_eject",
        "desc": "List containing volume paths that should never be ejected. Default value: empty list",
        "doc": "List containing volume paths that should never be ejected. Default value: empty list",
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "35",
        "name": "never_eject",
        "signature": "EjectMenu.never_eject",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.notify",
        "desc": "Boolean, whether to produce a notification about the volumes that get ejected. Default value: `false`",
        "doc": "Boolean, whether to produce a notification about the volumes that get ejected. Default value: `false`",
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "40",
        "name": "notify",
        "signature": "EjectMenu.notify",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.other_eject_events",
        "desc": "List of additional system events on which the volumes should be ejected.",
        "doc": "List of additional system events on which the volumes should be ejected.\n\nNotes:\n * The values must be [http://www.hammerspoon.org/docs/hs.caffeinate.watcher.html](`hs.caffeinate.watcher`) constant values. Default value: empty list",
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "64",
        "name": "other_eject_events",
        "notes": [
          " * The values must be [http://www.hammerspoon.org/docs/hs.caffeinate.watcher.html](`hs.caffeinate.watcher`) constant values. Default value: empty list"
        ],
        "signature": "EjectMenu.other_eject_events",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.show_in_menubar",
        "desc": "Boolean, whether to show a menubar button to eject all drives. Default value: true",
        "doc": "Boolean, whether to show a menubar button to eject all drives. Default value: true",
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "59",
        "name": "show_in_menubar",
        "signature": "EjectMenu.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "A much-needed eject menu for your Mac menu bar. Allows ejecting",
    "doc": "A much-needed eject menu for your Mac menu bar. Allows ejecting\nindividual or all non-internal disks. Ejection can also be\ntriggered on sleep, on lid close, or using a hotkey.\nUsing the Command key modifier causes the menu to open\nthe given volume in the Finder instead of ejecting it.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EjectMenu.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EjectMenu.spoon.zip)",
    "items": [
      {
        "def": "EjectMenu:bindHotkeys(mapping, ejectAll)",
        "desc": "Binds hotkeys for EjectMenu",
        "doc": "Binds hotkeys for EjectMenu\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n * ejectAll - eject all volumes.",
        "examples": [],
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "217",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:",
          " * ejectAll - eject all volumes."
        ],
        "returns": [],
        "signature": "EjectMenu:bindHotkeys(mapping, ejectAll)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu.eject_on_lid_close",
        "desc": "Boolean, whether to eject volumes when the laptop lid is closed with an external display connected.",
        "doc": "Boolean, whether to eject volumes when the laptop lid is closed with an external display connected.\n\nNotes:\n * There is no \"lid close\" event, so we detect when the internal display gets disabled.\n * This method is somewhat unreliable (e.g. it also triggers when the internal display goes to sleep due to inactivity), so its default value is `false`",
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "50",
        "name": "eject_on_lid_close",
        "notes": [
          " * There is no \"lid close\" event, so we detect when the internal display gets disabled.",
          " * This method is somewhat unreliable (e.g. it also triggers when the internal display goes to sleep due to inactivity), so its default value is `false`"
        ],
        "signature": "EjectMenu.eject_on_lid_close",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.eject_on_sleep",
        "desc": "Boolean, whether to eject volumes before the system goes to sleep. Default value: true",
        "doc": "Boolean, whether to eject volumes before the system goes to sleep. Default value: true",
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "45",
        "name": "eject_on_sleep",
        "signature": "EjectMenu.eject_on_sleep",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu:ejectVolumes()",
        "desc": "Eject all volumes",
        "doc": "Eject all volumes\n\nParameters:\n * persistent_notifs: a boolean indicating whether notifications (if shown) should be persistent.",
        "examples": [],
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "125",
        "name": "ejectVolumes",
        "notes": [],
        "parameters": [
          " * persistent_notifs: a boolean indicating whether notifications (if shown) should be persistent."
        ],
        "returns": [],
        "signature": "EjectMenu:ejectVolumes()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "30",
        "name": "logger",
        "signature": "EjectMenu.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.never_eject",
        "desc": "List containing volume paths that should never be ejected. Default value: empty list",
        "doc": "List containing volume paths that should never be ejected. Default value: empty list",
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "35",
        "name": "never_eject",
        "signature": "EjectMenu.never_eject",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.notify",
        "desc": "Boolean, whether to produce a notification about the volumes that get ejected. Default value: `false`",
        "doc": "Boolean, whether to produce a notification about the volumes that get ejected. Default value: `false`",
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "40",
        "name": "notify",
        "signature": "EjectMenu.notify",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.other_eject_events",
        "desc": "List of additional system events on which the volumes should be ejected.",
        "doc": "List of additional system events on which the volumes should be ejected.\n\nNotes:\n * The values must be [http://www.hammerspoon.org/docs/hs.caffeinate.watcher.html](`hs.caffeinate.watcher`) constant values. Default value: empty list",
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "64",
        "name": "other_eject_events",
        "notes": [
          " * The values must be [http://www.hammerspoon.org/docs/hs.caffeinate.watcher.html](`hs.caffeinate.watcher`) constant values. Default value: empty list"
        ],
        "signature": "EjectMenu.other_eject_events",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu:shouldEject(path, info)",
        "desc": "Determine if a volume should be ejected.",
        "doc": "Determine if a volume should be ejected.\n\nParameters:\n * path - the mount path of the volume.\n * info - a table containing a data structure as returned by `hs.fs.volume.allVolumes()`.\n\nReturns:\n * A boolean indicating whether the volume should be ejected.",
        "examples": [],
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "72",
        "name": "shouldEject",
        "notes": [],
        "parameters": [
          " * path - the mount path of the volume.",
          " * info - a table containing a data structure as returned by `hs.fs.volume.allVolumes()`."
        ],
        "returns": [
          " * A boolean indicating whether the volume should be ejected."
        ],
        "signature": "EjectMenu:shouldEject(path, info)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu.show_in_menubar",
        "desc": "Boolean, whether to show a menubar button to eject all drives. Default value: true",
        "doc": "Boolean, whether to show a menubar button to eject all drives. Default value: true",
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "59",
        "name": "show_in_menubar",
        "signature": "EjectMenu.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu:start()",
        "desc": "Start the watchers for power events and screen changes, to trigger volume ejection.",
        "doc": "Start the watchers for power events and screen changes, to trigger volume ejection.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "243",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "EjectMenu:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu:stop()",
        "desc": "Stop the watchers",
        "doc": "Stop the watchers\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "285",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "EjectMenu:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu:volumesToEject()",
        "desc": "Return table of volumes to be ejected when \"Eject All\" is invoked.",
        "doc": "Return table of volumes to be ejected when \"Eject All\" is invoked.\n\nParameters:\n * None\n\nReturns:\n * A table in the same format as returned by `hs.fs.volume.allVolumes()` but containing only those volumes for which `EjectMenu:shouldEject()` returns `true`.\n * An integer indicating how many volumes are in the table.",
        "examples": [],
        "file": "Source/EjectMenu.spoon/init.lua",
        "lineno": "87",
        "name": "volumesToEject",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * A table in the same format as returned by `hs.fs.volume.allVolumes()` but containing only those volumes for which `EjectMenu:shouldEject()` returns `true`.",
          " * An integer indicating how many volumes are in the table."
        ],
        "signature": "EjectMenu:volumesToEject()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "EjectMenu",
    "stripped_doc": "individual or all non-internal disks. Ejection can also be\ntriggered on sleep, on lid close, or using a hotkey.\nUsing the Command key modifier causes the menu to open\nthe given volume in the Finder instead of ejecting it.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EjectMenu.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EjectMenu.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "Thie plugin generates EmmyLua annotations for Hammerspoon and any installed Spoons",
    "doc": "Thie plugin generates EmmyLua annotations for Hammerspoon and any installed Spoons\nunder ~/.hammerspoon/Spoons/EmmyLua.spoon/annotations.\nAnnotations will only be generated if they don't exist yet or are out of date.\n\nNote: Load this Spoon before any pathwatchers are defined to avoid unintended behaviour (for example multiple reloads when the annotions are created).\n\nIn order to get auto completion in your editor, you need to have one of the following LSP servers properly configured:\n* [lua-language-server](https://github.com/sumneko/lua-language-server) (recommended)\n* [EmmyLua-LanguageServer](https://github.com/EmmyLua/EmmyLua-LanguageServer)\n\nTo start using this annotations library, add the annotations folder to your workspace.\nfor lua-languag-server:\n\n```json\n{\n  \"Lua.workspace.library\": [\"/Users/YOUR_USERNAME/.hammerspoon/Spoons/EmmyLua.spoon/annotations\"]\n}\n```\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EmmyLua.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EmmyLua.spoon.zip)",
    "items": [],
    "name": "EmmyLua",
    "stripped_doc": "under ~/.hammerspoon/Spoons/EmmyLua.spoon/annotations.\nAnnotations will only be generated if they don't exist yet or are out of date.\n\nNote: Load this Spoon before any pathwatchers are defined to avoid unintended behaviour (for example multiple reloads when the annotions are created).\n\nIn order to get auto completion in your editor, you need to have one of the following LSP servers properly configured:\n* [lua-language-server](https://github.com/sumneko/lua-language-server) (recommended)\n* [EmmyLua-LanguageServer](https://github.com/EmmyLua/EmmyLua-LanguageServer)\n\nTo start using this annotations library, add the annotations folder to your workspace.\nfor lua-languag-server:\n\n```json\n{\n  \"Lua.workspace.library\": [\"/Users/YOUR_USERNAME/.hammerspoon/Spoons/EmmyLua.spoon/annotations\"]\n}\n```\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EmmyLua.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EmmyLua.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Emojis:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Emojis",
        "doc": "Binds hotkeys for Emojis\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the emoji chooser\n\nReturns:\n * The Emojis object",
        "examples": [],
        "file": "Source/Emojis.spoon/init.lua",
        "lineno": "107",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * toggle - This will toggle the emoji chooser"
        ],
        "returns": [
          " * The Emojis object"
        ],
        "signature": "Emojis:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Let users choose emojis by name/keyword",
    "doc": "Let users choose emojis by name/keyword",
    "items": [
      {
        "def": "Emojis:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Emojis",
        "doc": "Binds hotkeys for Emojis\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the emoji chooser\n\nReturns:\n * The Emojis object",
        "examples": [],
        "file": "Source/Emojis.spoon/init.lua",
        "lineno": "107",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * toggle - This will toggle the emoji chooser"
        ],
        "returns": [
          " * The Emojis object"
        ],
        "signature": "Emojis:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Emojis",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "EvernoteOpenAndTag:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for EvernoteOpenAndTag",
        "doc": "Binds hotkeys for EvernoteOpenAndTag\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * `open_note` - open the current note in a new window\n  * `open_and_tag-<tag1>,<tag2>...` - open the current note and apply all the comma-separated tags given. The tags must already exist in Evernote for the tagging to succeed.\n  * `tag-<tag1>,<tag2>...` - open the current note and apply all the comma-separated tags given. The tags must already exist in Evernote for the tagging to succeed.",
        "examples": [],
        "file": "Source/EvernoteOpenAndTag.spoon/init.lua",
        "lineno": "130",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * `open_note` - open the current note in a new window\n   * `open_and_tag-<tag1>,<tag2>...` - open the current note and apply all the comma-separated tags given. The tags must already exist in Evernote for the tagging to succeed.\n   * `tag-<tag1>,<tag2>...` - open the current note and apply all the comma-separated tags given. The tags must already exist in Evernote for the tagging to succeed."
        ],
        "returns": [],
        "signature": "EvernoteOpenAndTag:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EvernoteOpenAndTag:evernoteIsFrontmost()",
        "desc": "Returns `true` if Evernote is the frontmost application",
        "doc": "Returns `true` if Evernote is the frontmost application\n\nParameters:\n * None\n\nReturns:\n * `true` if Evernote is the frontmost application, `false` otherwise",
        "examples": [],
        "file": "Source/EvernoteOpenAndTag.spoon/init.lua",
        "lineno": "22",
        "name": "evernoteIsFrontmost",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * `true` if Evernote is the frontmost application, `false` otherwise"
        ],
        "signature": "EvernoteOpenAndTag:evernoteIsFrontmost()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EvernoteOpenAndTag:inlineTagCurrentNote(tags)",
        "desc": "Apply the given tags to the selected Evernote notes",
        "doc": "Apply the given tags to the selected Evernote notes\n\nParameters:\n * tags - a table containing a list of tags to apply. The tags must already exist in Evernote.\n\nReturns:\n * None\n\nNotes:\n * If multiple notes are selected, the tags are applied to all of them",
        "examples": [],
        "file": "Source/EvernoteOpenAndTag.spoon/init.lua",
        "lineno": "103",
        "name": "inlineTagCurrentNote",
        "notes": [
          " * If multiple notes are selected, the tags are applied to all of them"
        ],
        "parameters": [
          " * tags - a table containing a list of tags to apply. The tags must already exist in Evernote."
        ],
        "returns": [
          " * None"
        ],
        "signature": "EvernoteOpenAndTag:inlineTagCurrentNote(tags)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EvernoteOpenAndTag:openAndTagCurrentNote(tags)",
        "desc": "Open the current Evernote note in a new window and apply the given tags to it",
        "doc": "Open the current Evernote note in a new window and apply the given tags to it\n\nParameters:\n * tags - a table containing a list of tags to apply. The tags must already exist in Evernote.\n\nReturns:\n * None\n\nNotes:\n * Even if multiple notes are selected, only the first one is tagged, as it will become the \"current one\" after it's opened in a new window",
        "examples": [],
        "file": "Source/EvernoteOpenAndTag.spoon/init.lua",
        "lineno": "84",
        "name": "openAndTagCurrentNote",
        "notes": [
          " * Even if multiple notes are selected, only the first one is tagged, as it will become the \"current one\" after it's opened in a new window"
        ],
        "parameters": [
          " * tags - a table containing a list of tags to apply. The tags must already exist in Evernote."
        ],
        "returns": [
          " * None"
        ],
        "signature": "EvernoteOpenAndTag:openAndTagCurrentNote(tags)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EvernoteOpenAndTag:openCurrentNoteInWindow()",
        "desc": "Open the currently-selected Evernote notes in new windows.",
        "doc": "Open the currently-selected Evernote notes in new windows.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Uses Applescript from https://discussion.evernote.com/topic/85685-feature-request-open-note-in-separate-window-keyboard-shortcut/#comment-366797",
        "examples": [],
        "file": "Source/EvernoteOpenAndTag.spoon/init.lua",
        "lineno": "36",
        "name": "openCurrentNoteInWindow",
        "notes": [
          " * Uses Applescript from https://discussion.evernote.com/topic/85685-feature-request-open-note-in-separate-window-keyboard-shortcut/#comment-366797"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "EvernoteOpenAndTag:openCurrentNoteInWindow()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EvernoteOpenAndTag:tagCurrentNote(tags)",
        "desc": "Assigns tags to the currently-selected Evernote notes",
        "doc": "Assigns tags to the currently-selected Evernote notes\n\nParameters:\n * tags - a table containing a list of tags to apply. The tags must already exist in Evernote.\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/EvernoteOpenAndTag.spoon/init.lua",
        "lineno": "61",
        "name": "tagCurrentNote",
        "notes": [],
        "parameters": [
          " * tags - a table containing a list of tags to apply. The tags must already exist in Evernote."
        ],
        "returns": [
          " * None"
        ],
        "signature": "EvernoteOpenAndTag:tagCurrentNote(tags)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "EvernoteOpenAndTag.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/EvernoteOpenAndTag.spoon/init.lua",
        "lineno": "17",
        "name": "logger",
        "signature": "EvernoteOpenAndTag.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Add some missing hotkeys for opening a note in Evernote, and for common tag sets",
    "doc": "Add some missing hotkeys for opening a note in Evernote, and for common tag sets\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EvernoteOpenAndTag.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EvernoteOpenAndTag.spoon.zip)",
    "items": [
      {
        "def": "EvernoteOpenAndTag:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for EvernoteOpenAndTag",
        "doc": "Binds hotkeys for EvernoteOpenAndTag\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * `open_note` - open the current note in a new window\n  * `open_and_tag-<tag1>,<tag2>...` - open the current note and apply all the comma-separated tags given. The tags must already exist in Evernote for the tagging to succeed.\n  * `tag-<tag1>,<tag2>...` - open the current note and apply all the comma-separated tags given. The tags must already exist in Evernote for the tagging to succeed.",
        "examples": [],
        "file": "Source/EvernoteOpenAndTag.spoon/init.lua",
        "lineno": "130",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * `open_note` - open the current note in a new window\n   * `open_and_tag-<tag1>,<tag2>...` - open the current note and apply all the comma-separated tags given. The tags must already exist in Evernote for the tagging to succeed.\n   * `tag-<tag1>,<tag2>...` - open the current note and apply all the comma-separated tags given. The tags must already exist in Evernote for the tagging to succeed."
        ],
        "returns": [],
        "signature": "EvernoteOpenAndTag:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EvernoteOpenAndTag:evernoteIsFrontmost()",
        "desc": "Returns `true` if Evernote is the frontmost application",
        "doc": "Returns `true` if Evernote is the frontmost application\n\nParameters:\n * None\n\nReturns:\n * `true` if Evernote is the frontmost application, `false` otherwise",
        "examples": [],
        "file": "Source/EvernoteOpenAndTag.spoon/init.lua",
        "lineno": "22",
        "name": "evernoteIsFrontmost",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * `true` if Evernote is the frontmost application, `false` otherwise"
        ],
        "signature": "EvernoteOpenAndTag:evernoteIsFrontmost()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EvernoteOpenAndTag:inlineTagCurrentNote(tags)",
        "desc": "Apply the given tags to the selected Evernote notes",
        "doc": "Apply the given tags to the selected Evernote notes\n\nParameters:\n * tags - a table containing a list of tags to apply. The tags must already exist in Evernote.\n\nReturns:\n * None\n\nNotes:\n * If multiple notes are selected, the tags are applied to all of them",
        "examples": [],
        "file": "Source/EvernoteOpenAndTag.spoon/init.lua",
        "lineno": "103",
        "name": "inlineTagCurrentNote",
        "notes": [
          " * If multiple notes are selected, the tags are applied to all of them"
        ],
        "parameters": [
          " * tags - a table containing a list of tags to apply. The tags must already exist in Evernote."
        ],
        "returns": [
          " * None"
        ],
        "signature": "EvernoteOpenAndTag:inlineTagCurrentNote(tags)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EvernoteOpenAndTag.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/EvernoteOpenAndTag.spoon/init.lua",
        "lineno": "17",
        "name": "logger",
        "signature": "EvernoteOpenAndTag.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EvernoteOpenAndTag:openAndTagCurrentNote(tags)",
        "desc": "Open the current Evernote note in a new window and apply the given tags to it",
        "doc": "Open the current Evernote note in a new window and apply the given tags to it\n\nParameters:\n * tags - a table containing a list of tags to apply. The tags must already exist in Evernote.\n\nReturns:\n * None\n\nNotes:\n * Even if multiple notes are selected, only the first one is tagged, as it will become the \"current one\" after it's opened in a new window",
        "examples": [],
        "file": "Source/EvernoteOpenAndTag.spoon/init.lua",
        "lineno": "84",
        "name": "openAndTagCurrentNote",
        "notes": [
          " * Even if multiple notes are selected, only the first one is tagged, as it will become the \"current one\" after it's opened in a new window"
        ],
        "parameters": [
          " * tags - a table containing a list of tags to apply. The tags must already exist in Evernote."
        ],
        "returns": [
          " * None"
        ],
        "signature": "EvernoteOpenAndTag:openAndTagCurrentNote(tags)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EvernoteOpenAndTag:openCurrentNoteInWindow()",
        "desc": "Open the currently-selected Evernote notes in new windows.",
        "doc": "Open the currently-selected Evernote notes in new windows.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Uses Applescript from https://discussion.evernote.com/topic/85685-feature-request-open-note-in-separate-window-keyboard-shortcut/#comment-366797",
        "examples": [],
        "file": "Source/EvernoteOpenAndTag.spoon/init.lua",
        "lineno": "36",
        "name": "openCurrentNoteInWindow",
        "notes": [
          " * Uses Applescript from https://discussion.evernote.com/topic/85685-feature-request-open-note-in-separate-window-keyboard-shortcut/#comment-366797"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "EvernoteOpenAndTag:openCurrentNoteInWindow()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EvernoteOpenAndTag:tagCurrentNote(tags)",
        "desc": "Assigns tags to the currently-selected Evernote notes",
        "doc": "Assigns tags to the currently-selected Evernote notes\n\nParameters:\n * tags - a table containing a list of tags to apply. The tags must already exist in Evernote.\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/EvernoteOpenAndTag.spoon/init.lua",
        "lineno": "61",
        "name": "tagCurrentNote",
        "notes": [],
        "parameters": [
          " * tags - a table containing a list of tags to apply. The tags must already exist in Evernote."
        ],
        "returns": [
          " * None"
        ],
        "signature": "EvernoteOpenAndTag:tagCurrentNote(tags)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "EvernoteOpenAndTag",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EvernoteOpenAndTag.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EvernoteOpenAndTag.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "FadeLogo:delete()",
        "desc": "Hide and delete the canvas",
        "doc": "Hide and delete the canvas\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "78",
        "name": "delete",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "FadeLogo:delete()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo:hide()",
        "desc": "Hide the image without zoom, fading it out over `fade_out_time` seconds",
        "doc": "Hide the image without zoom, fading it out over `fade_out_time` seconds\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "115",
        "name": "hide",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "FadeLogo:hide()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo:show()",
        "desc": "Display the image, fading it in over `fade_in_time` seconds",
        "doc": "Display the image, fading it in over `fade_in_time` seconds\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "90",
        "name": "show",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "FadeLogo:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo:start()",
        "desc": "Show the image, wait `run_time` seconds, and then zoom-and-fade it out.",
        "doc": "Show the image, wait `run_time` seconds, and then zoom-and-fade it out.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "151",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "FadeLogo:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo:zoom_and_fade()",
        "desc": "Zoom-and-fade the image over `fade_out_time` seconds",
        "doc": "Zoom-and-fade the image over `fade_out_time` seconds\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "125",
        "name": "zoom_and_fade",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "FadeLogo:zoom_and_fade()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "FadeLogo.fade_in_time",
        "desc": "Number of seconds over which to fade in the image. Defaults to 0.3.",
        "doc": "Number of seconds over which to fade in the image. Defaults to 0.3.",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "48",
        "name": "fade_in_time",
        "signature": "FadeLogo.fade_in_time",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.fade_out_time",
        "desc": "Number of seconds over which to fade out the image. Defaults to 0.5.",
        "doc": "Number of seconds over which to fade out the image. Defaults to 0.5.",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "53",
        "name": "fade_out_time",
        "signature": "FadeLogo.fade_out_time",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.image",
        "desc": "Image to display. Must be an `hs.image` object. Defaults to `hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon)` (the Hammerspoon app icon)",
        "doc": "Image to display. Must be an `hs.image` object. Defaults to `hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon)` (the Hammerspoon app icon)",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "28",
        "name": "image",
        "signature": "FadeLogo.image",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.image_alpha",
        "desc": "Initial transparency of the image. Defaults to 1.0.",
        "doc": "Initial transparency of the image. Defaults to 1.0.",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "38",
        "name": "image_alpha",
        "signature": "FadeLogo.image_alpha",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.image_size",
        "desc": "`hs.geometry` object specifying the initial size of the image to display in the center of the screen. The image object will be resizes proportionally to fit in this size. Defaults to `hs.geometry.size(w=200, h=200)`",
        "doc": "`hs.geometry` object specifying the initial size of the image to display in the center of the screen. The image object will be resizes proportionally to fit in this size. Defaults to `hs.geometry.size(w=200, h=200)`",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "33",
        "name": "image_size",
        "signature": "FadeLogo.image_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "23",
        "name": "logger",
        "signature": "FadeLogo.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.run_time",
        "desc": "Number of seconds to leave the image on the screen when `start()` is called.",
        "doc": "Number of seconds to leave the image on the screen when `start()` is called.",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "58",
        "name": "run_time",
        "signature": "FadeLogo.run_time",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.zoom",
        "desc": "Do zoom-and-fade if `true`, otherwise do a regular fade",
        "doc": "Do zoom-and-fade if `true`, otherwise do a regular fade",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "43",
        "name": "zoom",
        "signature": "FadeLogo.zoom",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.zoom_scale_factor",
        "desc": "Factor by which to scale the image at every iteration during the zoom-and-fade. Defaults to 1.1.",
        "doc": "Factor by which to scale the image at every iteration during the zoom-and-fade. Defaults to 1.1.",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "63",
        "name": "zoom_scale_factor",
        "signature": "FadeLogo.zoom_scale_factor",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.zoom_scale_timer",
        "desc": "Seconds between the zooming iterations",
        "doc": "Seconds between the zooming iterations",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "68",
        "name": "zoom_scale_timer",
        "signature": "FadeLogo.zoom_scale_timer",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Show a fading-and-zooming image in the center of the screen",
    "doc": "Show a fading-and-zooming image in the center of the screen\n\nBy default the Hammerspoon logo is shown. Typical use is to show it as an indicator when your configuration finishes loading, by adding the following to the bottom of your `~/.hammerspoon/init.lua` file:\n```\n  hs.loadSpoon('FadeLogo'):start()\n```\nWhich looks like this: http://imgur.com/a/TbZOl\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/FadeLogo.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/FadeLogo.spoon.zip)",
    "items": [
      {
        "def": "FadeLogo:delete()",
        "desc": "Hide and delete the canvas",
        "doc": "Hide and delete the canvas\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "78",
        "name": "delete",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "FadeLogo:delete()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo.fade_in_time",
        "desc": "Number of seconds over which to fade in the image. Defaults to 0.3.",
        "doc": "Number of seconds over which to fade in the image. Defaults to 0.3.",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "48",
        "name": "fade_in_time",
        "signature": "FadeLogo.fade_in_time",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.fade_out_time",
        "desc": "Number of seconds over which to fade out the image. Defaults to 0.5.",
        "doc": "Number of seconds over which to fade out the image. Defaults to 0.5.",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "53",
        "name": "fade_out_time",
        "signature": "FadeLogo.fade_out_time",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo:hide()",
        "desc": "Hide the image without zoom, fading it out over `fade_out_time` seconds",
        "doc": "Hide the image without zoom, fading it out over `fade_out_time` seconds\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "115",
        "name": "hide",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "FadeLogo:hide()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo.image",
        "desc": "Image to display. Must be an `hs.image` object. Defaults to `hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon)` (the Hammerspoon app icon)",
        "doc": "Image to display. Must be an `hs.image` object. Defaults to `hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon)` (the Hammerspoon app icon)",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "28",
        "name": "image",
        "signature": "FadeLogo.image",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.image_alpha",
        "desc": "Initial transparency of the image. Defaults to 1.0.",
        "doc": "Initial transparency of the image. Defaults to 1.0.",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "38",
        "name": "image_alpha",
        "signature": "FadeLogo.image_alpha",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.image_size",
        "desc": "`hs.geometry` object specifying the initial size of the image to display in the center of the screen. The image object will be resizes proportionally to fit in this size. Defaults to `hs.geometry.size(w=200, h=200)`",
        "doc": "`hs.geometry` object specifying the initial size of the image to display in the center of the screen. The image object will be resizes proportionally to fit in this size. Defaults to `hs.geometry.size(w=200, h=200)`",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "33",
        "name": "image_size",
        "signature": "FadeLogo.image_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "23",
        "name": "logger",
        "signature": "FadeLogo.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.run_time",
        "desc": "Number of seconds to leave the image on the screen when `start()` is called.",
        "doc": "Number of seconds to leave the image on the screen when `start()` is called.",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "58",
        "name": "run_time",
        "signature": "FadeLogo.run_time",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo:show()",
        "desc": "Display the image, fading it in over `fade_in_time` seconds",
        "doc": "Display the image, fading it in over `fade_in_time` seconds\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "90",
        "name": "show",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "FadeLogo:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo:start()",
        "desc": "Show the image, wait `run_time` seconds, and then zoom-and-fade it out.",
        "doc": "Show the image, wait `run_time` seconds, and then zoom-and-fade it out.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "151",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "FadeLogo:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo.zoom",
        "desc": "Do zoom-and-fade if `true`, otherwise do a regular fade",
        "doc": "Do zoom-and-fade if `true`, otherwise do a regular fade",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "43",
        "name": "zoom",
        "signature": "FadeLogo.zoom",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo:zoom_and_fade()",
        "desc": "Zoom-and-fade the image over `fade_out_time` seconds",
        "doc": "Zoom-and-fade the image over `fade_out_time` seconds\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "125",
        "name": "zoom_and_fade",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "FadeLogo:zoom_and_fade()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo.zoom_scale_factor",
        "desc": "Factor by which to scale the image at every iteration during the zoom-and-fade. Defaults to 1.1.",
        "doc": "Factor by which to scale the image at every iteration during the zoom-and-fade. Defaults to 1.1.",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "63",
        "name": "zoom_scale_factor",
        "signature": "FadeLogo.zoom_scale_factor",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.zoom_scale_timer",
        "desc": "Seconds between the zooming iterations",
        "doc": "Seconds between the zooming iterations",
        "file": "Source/FadeLogo.spoon/init.lua",
        "lineno": "68",
        "name": "zoom_scale_timer",
        "signature": "FadeLogo.zoom_scale_timer",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "FadeLogo",
    "stripped_doc": "\nBy default the Hammerspoon logo is shown. Typical use is to show it as an indicator when your configuration finishes loading, by adding the following to the bottom of your `~/.hammerspoon/init.lua` file:\n```\n  hs.loadSpoon('FadeLogo'):start()\n```\nWhich looks like this: http://imgur.com/a/TbZOl\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/FadeLogo.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/FadeLogo.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "Use Fn + `h/l/j/k` as arrow keys, `y/u/i/o` as mouse wheel, `,/.` as left/right click.",
    "doc": "Use Fn + `h/l/j/k` as arrow keys, `y/u/i/o` as mouse wheel, `,/.` as left/right click.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/FnMate.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/FnMate.spoon.zip)",
    "items": [],
    "name": "FnMate",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/FnMate.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/FnMate.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "ForceTouchMapper:start()",
        "desc": "Start ForceTouchMapper",
        "doc": "Start ForceTouchMapper\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ForceTouchMapper.spoon/init.lua",
        "lineno": "55",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ForceTouchMapper:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "ForceTouchMapper.apps",
        "desc": "Table of bundle ids of apps in which you want to map forcetouch to keyStroke",
        "doc": "Table of bundle ids of apps in which you want to map forcetouch to keyStroke",
        "file": "Source/ForceTouchMapper.spoon/init.lua",
        "lineno": "31",
        "name": "apps",
        "signature": "ForceTouchMapper.apps",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Maps force touch clicks in specified apps to a hot key",
    "doc": "Maps force touch clicks in specified apps to a hot key\n\nExample use:\n`spoon.SpoonInstall:andUse(\"ForceTouchMapper\", {\n   config = {apps = {[\"com.microsoft.VSCode\"] = {keyStroke = {{\"cmd\"}, 'y'}}}}\n})`\nwhich will invoke `cmd+y` keystroke when you force click some definition in VS Code.\n\nI have this key binding in VS Code for peek definition\n\n`{\n   \"key\": \"cmd+y\",\n   \"command\": \"editor.action.peekDefinition\",\n   \"when\": \"editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor\"\n }`\n,\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ForceTouchMapper.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ForceTouchMapper.spoon.zip)",
    "items": [
      {
        "def": "ForceTouchMapper.apps",
        "desc": "Table of bundle ids of apps in which you want to map forcetouch to keyStroke",
        "doc": "Table of bundle ids of apps in which you want to map forcetouch to keyStroke",
        "file": "Source/ForceTouchMapper.spoon/init.lua",
        "lineno": "31",
        "name": "apps",
        "signature": "ForceTouchMapper.apps",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ForceTouchMapper:start()",
        "desc": "Start ForceTouchMapper",
        "doc": "Start ForceTouchMapper\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ForceTouchMapper.spoon/init.lua",
        "lineno": "55",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ForceTouchMapper:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "ForceTouchMapper",
    "stripped_doc": "\nExample use:\n`spoon.SpoonInstall:andUse(\"ForceTouchMapper\", {\n   config = {apps = {[\"com.microsoft.VSCode\"] = {keyStroke = {{\"cmd\"}, 'y'}}}}\n})`\nwhich will invoke `cmd+y` keystroke when you force click some definition in VS Code.\n\nI have this key binding in VS Code for peek definition\n\n`{\n   \"key\": \"cmd+y\",\n   \"command\": \"editor.action.peekDefinition\",\n   \"when\": \"editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor\"\n }`\n,\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ForceTouchMapper.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ForceTouchMapper.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "HCalendar:createCanvas()",
        "desc": "Create the calendar canvas",
        "doc": "Create the calendar canvas\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HCalendar.spoon/init.lua",
        "lineno": "91",
        "name": "createCanvas",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HCalendar:createCanvas()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HCalendar:init()",
        "desc": "Initializes the spoon",
        "doc": "Initializes the spoon\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HCalendar.spoon/init.lua",
        "lineno": "219",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HCalendar:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HCalendar:start()",
        "desc": "Start HCalendar timer and show the canvas",
        "doc": "Start HCalendar timer and show the canvas\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HCalendar.spoon/init.lua",
        "lineno": "236",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HCalendar:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HCalendar:stop()",
        "desc": "Stop HCalendar timer and hide the canvas",
        "doc": "Stop HCalendar timer and hide the canvas\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HCalendar.spoon/init.lua",
        "lineno": "256",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HCalendar:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "HCalendar.showProgress (Boolean)",
        "desc": "Control whether or not progress through the month is shown.",
        "doc": "Control whether or not progress through the month is shown.",
        "file": "Source/HCalendar.spoon/init.lua",
        "lineno": "21",
        "name": "showProgress",
        "signature": "HCalendar.showProgress (Boolean)",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "A horizonal calendar inset into the desktop",
    "doc": "A horizonal calendar inset into the desktop\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HCalendar.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HCalendar.spoon.zip)",
    "items": [
      {
        "def": "HCalendar:createCanvas()",
        "desc": "Create the calendar canvas",
        "doc": "Create the calendar canvas\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HCalendar.spoon/init.lua",
        "lineno": "91",
        "name": "createCanvas",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HCalendar:createCanvas()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HCalendar:init()",
        "desc": "Initializes the spoon",
        "doc": "Initializes the spoon\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HCalendar.spoon/init.lua",
        "lineno": "219",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HCalendar:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HCalendar.showProgress (Boolean)",
        "desc": "Control whether or not progress through the month is shown.",
        "doc": "Control whether or not progress through the month is shown.",
        "file": "Source/HCalendar.spoon/init.lua",
        "lineno": "21",
        "name": "showProgress",
        "signature": "HCalendar.showProgress (Boolean)",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HCalendar:start()",
        "desc": "Start HCalendar timer and show the canvas",
        "doc": "Start HCalendar timer and show the canvas\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HCalendar.spoon/init.lua",
        "lineno": "236",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HCalendar:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HCalendar:stop()",
        "desc": "Stop HCalendar timer and hide the canvas",
        "doc": "Stop HCalendar timer and hide the canvas\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HCalendar.spoon/init.lua",
        "lineno": "256",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HCalendar:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "HCalendar",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HCalendar.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HCalendar.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "HeadphoneAutoPause:audiodevwatch(dev_uid, event_name)",
        "desc": "Callback function to use as an audio device watcher, to pause/unpause the application on headphones plugged/unplugged",
        "doc": "Callback function to use as an audio device watcher, to pause/unpause the application on headphones plugged/unplugged\n\nParameters:\n * dev_uid - The audio device\n * event_name - The event name",
        "examples": [],
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "97",
        "name": "audiodevwatch",
        "notes": [],
        "parameters": [
          " * dev_uid - The audio device",
          " * event_name - The event name"
        ],
        "returns": [],
        "signature": "HeadphoneAutoPause:audiodevwatch(dev_uid, event_name)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HeadphoneAutoPause.defaultControlFns(app)",
        "desc": "Generate the most common set of application control definition.",
        "doc": "Generate the most common set of application control definition.\n\nParameters:\n * app - name of the application, with its correct letter casing (i.e. \"iTunes\"). The name as provided will be used to find the running application, and its lowercase version will be used to find the corresponding `hs.*` module.\n\nReturns:\n * A table in the correct format for `HeadphoneAutoPause.controlfns`, using the lower-case value of `app` as the module name (for example, if app = \"iTunes\", the module loaded will be `hs.itunes`, and assuming the functions `isPlaying()`, `play()` and `pause()` exist in that module.",
        "examples": [],
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "51",
        "name": "defaultControlFns",
        "notes": [],
        "parameters": [
          " * app - name of the application, with its correct letter casing (i.e. \"iTunes\"). The name as provided will be used to find the running application, and its lowercase version will be used to find the corresponding `hs.*` module."
        ],
        "returns": [
          " * A table in the correct format for `HeadphoneAutoPause.controlfns`, using the lower-case value of `app` as the module name (for example, if app = \"iTunes\", the module loaded will be `hs.itunes`, and assuming the functions `isPlaying()`, `play()` and `pause()` exist in that module."
        ],
        "signature": "HeadphoneAutoPause.defaultControlFns(app)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HeadphoneAutoPause:start()",
        "desc": "Start headphone detection on all audio devices that support it",
        "doc": "Start headphone detection on all audio devices that support it\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "137",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HeadphoneAutoPause:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HeadphoneAutoPause:stop()",
        "desc": "Stop headphone detection",
        "doc": "Stop headphone detection\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "157",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HeadphoneAutoPause:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "HeadphoneAutoPause.autoResume",
        "desc": "Boolean value indicating if music should be automatically resumed when headphones are plugged in again. Only works if music was automatically paused when headphones were unplugged.",
        "doc": "Boolean value indicating if music should be automatically resumed when headphones are plugged in again. Only works if music was automatically paused when headphones were unplugged.\n\nNotes:\n * Default value: `true`",
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "43",
        "name": "autoResume",
        "notes": [
          " * Default value: `true`"
        ],
        "signature": "HeadphoneAutoPause.autoResume",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HeadphoneAutoPause.control",
        "desc": "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause/unpause that application in response to the headphone being plugged/unplugged.",
        "doc": "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause/unpause that application in response to the headphone being plugged/unplugged.\n\nNotes:\n * The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:\n```\n{\n   itunes = true,\n   spotify = true,\n   deezer = true,\n   vox = false -- Vox has built-in headphone detection support\n}\n```",
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "22",
        "name": "control",
        "notes": [
          " * The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:",
          "```",
          "{",
          "   itunes = true,",
          "   spotify = true,",
          "   deezer = true,",
          "   vox = false -- Vox has built-in headphone detection support",
          "}",
          "```"
        ],
        "signature": "HeadphoneAutoPause.control",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HeadphoneAutoPause.controlfns",
        "desc": "Table containing control functions for each application to control.",
        "doc": "Table containing control functions for each application to control.\n\nNotes:\n * The keys must correspond to the values in `HeadphoneAutoPause.control`, and the value is a table with the following elements:\n  * `appname` - application name (case-sensitive, as the application appears to the system)\n  * `isPlaying` - function that returns a true value if the application is playing\n  * `play` - function that starts playback in the application\n  * `pause` - function that pauses playback in the application\n * The default value includes definitions for iTunes, Spotify, Deezer and Vox, using the corresponding functions from `hs.itunes`, `hs.spotify`, `hs.deezer` and `hs.vox`, respectively.",
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "68",
        "name": "controlfns",
        "notes": [
          " * The keys must correspond to the values in `HeadphoneAutoPause.control`, and the value is a table with the following elements:",
          "  * `appname` - application name (case-sensitive, as the application appears to the system)",
          "  * `isPlaying` - function that returns a true value if the application is playing",
          "  * `play` - function that starts playback in the application",
          "  * `pause` - function that pauses playback in the application",
          " * The default value includes definitions for iTunes, Spotify, Deezer and Vox, using the corresponding functions from `hs.itunes`, `hs.spotify`, `hs.deezer` and `hs.vox`, respectively."
        ],
        "signature": "HeadphoneAutoPause.controlfns",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HeadphoneAutoPause.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "17",
        "name": "logger",
        "signature": "HeadphoneAutoPause.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Play/pause music players when headphones are connected/disconnected",
    "doc": "Play/pause music players when headphones are connected/disconnected\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HeadphoneAutoPause.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HeadphoneAutoPause.spoon.zip)",
    "items": [
      {
        "def": "HeadphoneAutoPause:audiodevwatch(dev_uid, event_name)",
        "desc": "Callback function to use as an audio device watcher, to pause/unpause the application on headphones plugged/unplugged",
        "doc": "Callback function to use as an audio device watcher, to pause/unpause the application on headphones plugged/unplugged\n\nParameters:\n * dev_uid - The audio device\n * event_name - The event name",
        "examples": [],
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "97",
        "name": "audiodevwatch",
        "notes": [],
        "parameters": [
          " * dev_uid - The audio device",
          " * event_name - The event name"
        ],
        "returns": [],
        "signature": "HeadphoneAutoPause:audiodevwatch(dev_uid, event_name)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HeadphoneAutoPause.autoResume",
        "desc": "Boolean value indicating if music should be automatically resumed when headphones are plugged in again. Only works if music was automatically paused when headphones were unplugged.",
        "doc": "Boolean value indicating if music should be automatically resumed when headphones are plugged in again. Only works if music was automatically paused when headphones were unplugged.\n\nNotes:\n * Default value: `true`",
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "43",
        "name": "autoResume",
        "notes": [
          " * Default value: `true`"
        ],
        "signature": "HeadphoneAutoPause.autoResume",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HeadphoneAutoPause.control",
        "desc": "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause/unpause that application in response to the headphone being plugged/unplugged.",
        "doc": "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause/unpause that application in response to the headphone being plugged/unplugged.\n\nNotes:\n * The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:\n```\n{\n   itunes = true,\n   spotify = true,\n   deezer = true,\n   vox = false -- Vox has built-in headphone detection support\n}\n```",
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "22",
        "name": "control",
        "notes": [
          " * The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:",
          "```",
          "{",
          "   itunes = true,",
          "   spotify = true,",
          "   deezer = true,",
          "   vox = false -- Vox has built-in headphone detection support",
          "}",
          "```"
        ],
        "signature": "HeadphoneAutoPause.control",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HeadphoneAutoPause.controlfns",
        "desc": "Table containing control functions for each application to control.",
        "doc": "Table containing control functions for each application to control.\n\nNotes:\n * The keys must correspond to the values in `HeadphoneAutoPause.control`, and the value is a table with the following elements:\n  * `appname` - application name (case-sensitive, as the application appears to the system)\n  * `isPlaying` - function that returns a true value if the application is playing\n  * `play` - function that starts playback in the application\n  * `pause` - function that pauses playback in the application\n * The default value includes definitions for iTunes, Spotify, Deezer and Vox, using the corresponding functions from `hs.itunes`, `hs.spotify`, `hs.deezer` and `hs.vox`, respectively.",
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "68",
        "name": "controlfns",
        "notes": [
          " * The keys must correspond to the values in `HeadphoneAutoPause.control`, and the value is a table with the following elements:",
          "  * `appname` - application name (case-sensitive, as the application appears to the system)",
          "  * `isPlaying` - function that returns a true value if the application is playing",
          "  * `play` - function that starts playback in the application",
          "  * `pause` - function that pauses playback in the application",
          " * The default value includes definitions for iTunes, Spotify, Deezer and Vox, using the corresponding functions from `hs.itunes`, `hs.spotify`, `hs.deezer` and `hs.vox`, respectively."
        ],
        "signature": "HeadphoneAutoPause.controlfns",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HeadphoneAutoPause.defaultControlFns(app)",
        "desc": "Generate the most common set of application control definition.",
        "doc": "Generate the most common set of application control definition.\n\nParameters:\n * app - name of the application, with its correct letter casing (i.e. \"iTunes\"). The name as provided will be used to find the running application, and its lowercase version will be used to find the corresponding `hs.*` module.\n\nReturns:\n * A table in the correct format for `HeadphoneAutoPause.controlfns`, using the lower-case value of `app` as the module name (for example, if app = \"iTunes\", the module loaded will be `hs.itunes`, and assuming the functions `isPlaying()`, `play()` and `pause()` exist in that module.",
        "examples": [],
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "51",
        "name": "defaultControlFns",
        "notes": [],
        "parameters": [
          " * app - name of the application, with its correct letter casing (i.e. \"iTunes\"). The name as provided will be used to find the running application, and its lowercase version will be used to find the corresponding `hs.*` module."
        ],
        "returns": [
          " * A table in the correct format for `HeadphoneAutoPause.controlfns`, using the lower-case value of `app` as the module name (for example, if app = \"iTunes\", the module loaded will be `hs.itunes`, and assuming the functions `isPlaying()`, `play()` and `pause()` exist in that module."
        ],
        "signature": "HeadphoneAutoPause.defaultControlFns(app)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HeadphoneAutoPause.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "17",
        "name": "logger",
        "signature": "HeadphoneAutoPause.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HeadphoneAutoPause:start()",
        "desc": "Start headphone detection on all audio devices that support it",
        "doc": "Start headphone detection on all audio devices that support it\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "137",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HeadphoneAutoPause:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HeadphoneAutoPause:stop()",
        "desc": "Stop headphone detection",
        "doc": "Stop headphone detection\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HeadphoneAutoPause.spoon/init.lua",
        "lineno": "157",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HeadphoneAutoPause:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "HeadphoneAutoPause",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HeadphoneAutoPause.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HeadphoneAutoPause.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "HighSierraiTunesMediaFix:start()",
        "desc": "Starts the hs.eventtap that powers this Spoon",
        "doc": "Starts the hs.eventtap that powers this Spoon\n\nParameters:\n * None\n\nReturns:\n * The HighSierraiTunesMediaFix object",
        "examples": [],
        "file": "Source/HighSierraiTunesMediaFix.spoon/init.lua",
        "lineno": "52",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The HighSierraiTunesMediaFix object"
        ],
        "signature": "HighSierraiTunesMediaFix:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HighSierraiTunesMediaFix:stop()",
        "desc": "Stops the hs.eventtap that powers this Spoon",
        "doc": "Stops the hs.eventtap that powers this Spoon\n\nParameters:\n * None\n\nReturns:\n * The HighSierraiTunesMediaFix object",
        "examples": [],
        "file": "Source/HighSierraiTunesMediaFix.spoon/init.lua",
        "lineno": "68",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The HighSierraiTunesMediaFix object"
        ],
        "signature": "HighSierraiTunesMediaFix:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Override High Sierra behaviour and send all media keys (play/prev/next) to iTunes",
    "doc": "Override High Sierra behaviour and send all media keys (play/prev/next) to iTunes",
    "items": [
      {
        "def": "HighSierraiTunesMediaFix:start()",
        "desc": "Starts the hs.eventtap that powers this Spoon",
        "doc": "Starts the hs.eventtap that powers this Spoon\n\nParameters:\n * None\n\nReturns:\n * The HighSierraiTunesMediaFix object",
        "examples": [],
        "file": "Source/HighSierraiTunesMediaFix.spoon/init.lua",
        "lineno": "52",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The HighSierraiTunesMediaFix object"
        ],
        "signature": "HighSierraiTunesMediaFix:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HighSierraiTunesMediaFix:stop()",
        "desc": "Stops the hs.eventtap that powers this Spoon",
        "doc": "Stops the hs.eventtap that powers this Spoon\n\nParameters:\n * None\n\nReturns:\n * The HighSierraiTunesMediaFix object",
        "examples": [],
        "file": "Source/HighSierraiTunesMediaFix.spoon/init.lua",
        "lineno": "68",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The HighSierraiTunesMediaFix object"
        ],
        "signature": "HighSierraiTunesMediaFix:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "HighSierraiTunesMediaFix",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "HoldToQuit:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for HoldToQuit",
        "doc": "Binds hotkeys for HoldToQuit\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will define the quit hotkey",
        "examples": [],
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "112",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * show - This will define the quit hotkey"
        ],
        "returns": [],
        "signature": "HoldToQuit:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HoldToQuit:init()",
        "desc": "Initialize spoon",
        "doc": "Initialize spoon\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "50",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HoldToQuit:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HoldToQuit.killCurrentApp()",
        "desc": "Kill the frontmost application",
        "doc": "Kill the frontmost application\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "39",
        "name": "killCurrentApp",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HoldToQuit.killCurrentApp()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HoldToQuit:onKeyDown()",
        "desc": "Start timer on keyDown",
        "doc": "Start timer on keyDown\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "60",
        "name": "onKeyDown",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HoldToQuit:onKeyDown()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HoldToQuit:onKeyUp()",
        "desc": "Stop Timer & show alert message",
        "doc": "Stop Timer & show alert message\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "70",
        "name": "onKeyUp",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HoldToQuit:onKeyUp()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HoldToQuit:start()",
        "desc": "Start HoldToQuit with default hotkey",
        "doc": "Start HoldToQuit with default hotkey\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "84",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HoldToQuit:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HoldToQuit:stop()",
        "desc": "Disable HoldToQuit hotkey",
        "doc": "Disable HoldToQuit hotkey\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "100",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HoldToQuit:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "HoldToQuit.defaultHotkey",
        "desc": "Default hotkey mapping",
        "doc": "Default hotkey mapping",
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "22",
        "name": "defaultHotkey",
        "signature": "HoldToQuit.defaultHotkey",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HoldToQuit.duration",
        "desc": "Integer containing the duration (in seconds) how long to hold",
        "doc": "Integer containing the duration (in seconds) how long to hold\nthe hotkey. Default 1.",
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "16",
        "name": "duration",
        "signature": "HoldToQuit.duration",
        "stripped_doc": "the hotkey. Default 1.",
        "type": "Variable"
      },
      {
        "def": "HoldToQuit.hotkeyQbj",
        "desc": "Hotkey object",
        "doc": "Hotkey object",
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "29",
        "name": "hotkeyQbj",
        "signature": "HoldToQuit.hotkeyQbj",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HoldToQuit.timer",
        "desc": "Timer for counting the holding time",
        "doc": "Timer for counting the holding time",
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "34",
        "name": "timer",
        "signature": "HoldToQuit.timer",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Instead of pressing ⌘Q, hold ⌘Q to close applications.",
    "doc": "Instead of pressing ⌘Q, hold ⌘Q to close applications.",
    "items": [
      {
        "def": "HoldToQuit:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for HoldToQuit",
        "doc": "Binds hotkeys for HoldToQuit\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will define the quit hotkey",
        "examples": [],
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "112",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * show - This will define the quit hotkey"
        ],
        "returns": [],
        "signature": "HoldToQuit:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HoldToQuit.defaultHotkey",
        "desc": "Default hotkey mapping",
        "doc": "Default hotkey mapping",
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "22",
        "name": "defaultHotkey",
        "signature": "HoldToQuit.defaultHotkey",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HoldToQuit.duration",
        "desc": "Integer containing the duration (in seconds) how long to hold",
        "doc": "Integer containing the duration (in seconds) how long to hold\nthe hotkey. Default 1.",
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "16",
        "name": "duration",
        "signature": "HoldToQuit.duration",
        "stripped_doc": "the hotkey. Default 1.",
        "type": "Variable"
      },
      {
        "def": "HoldToQuit.hotkeyQbj",
        "desc": "Hotkey object",
        "doc": "Hotkey object",
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "29",
        "name": "hotkeyQbj",
        "signature": "HoldToQuit.hotkeyQbj",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HoldToQuit:init()",
        "desc": "Initialize spoon",
        "doc": "Initialize spoon\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "50",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HoldToQuit:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HoldToQuit.killCurrentApp()",
        "desc": "Kill the frontmost application",
        "doc": "Kill the frontmost application\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "39",
        "name": "killCurrentApp",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HoldToQuit.killCurrentApp()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HoldToQuit:onKeyDown()",
        "desc": "Start timer on keyDown",
        "doc": "Start timer on keyDown\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "60",
        "name": "onKeyDown",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HoldToQuit:onKeyDown()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HoldToQuit:onKeyUp()",
        "desc": "Stop Timer & show alert message",
        "doc": "Stop Timer & show alert message\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "70",
        "name": "onKeyUp",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HoldToQuit:onKeyUp()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HoldToQuit:start()",
        "desc": "Start HoldToQuit with default hotkey",
        "doc": "Start HoldToQuit with default hotkey\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "84",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HoldToQuit:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HoldToQuit:stop()",
        "desc": "Disable HoldToQuit hotkey",
        "doc": "Disable HoldToQuit hotkey\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "100",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HoldToQuit:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HoldToQuit.timer",
        "desc": "Timer for counting the holding time",
        "doc": "Timer for counting the holding time",
        "file": "Source/HoldToQuit.spoon/init.lua",
        "lineno": "34",
        "name": "timer",
        "signature": "HoldToQuit.timer",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "HoldToQuit",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "HSaria2:connectToHost(hostaddr, secret)",
        "desc": "Try connect to `hostaddr` with `secret`. If succeed, they will become default values for following-up oprations.",
        "doc": "Try connect to `hostaddr` with `secret`. If succeed, they will become default values for following-up oprations.\n\nParameters:\n * hostaddr - A sring specifying aria2 RPC host, including host name and port address. e.g. \"http://localhost:6800/jsonrpc\".\n * secret - A string specifying host secret",
        "examples": [],
        "file": "Source/HSaria2.spoon/init.lua",
        "lineno": "27",
        "name": "connectToHost",
        "notes": [],
        "parameters": [
          " * hostaddr - A sring specifying aria2 RPC host, including host name and port address. e.g. \"http://localhost:6800/jsonrpc\".",
          " * secret - A string specifying host secret"
        ],
        "returns": [],
        "signature": "HSaria2:connectToHost(hostaddr, secret)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HSaria2:newTask(tasktype, urls, hostaddr, secret)",
        "desc": "Create new regular/bt/metalink task, and send notification when done.",
        "doc": "Create new regular/bt/metalink task, and send notification when done.\n\nParameters:\n * tasktype - A string specifying task type. The value is one of these: `addUri`, `addTorrent`, `addMetalink`, `nil`. When tasktype is `nil`, aria2 will create a regular download task.\n * urls - A string or a table specifying URL. Multi URLs (table) are only available when tasktype is `addUri` or `nil`.\n * hostaddr - A optional sring specifying aria2 RPC host\n * secret - A optional string specifying host secret",
        "examples": [],
        "file": "Source/HSaria2.spoon/init.lua",
        "lineno": "456",
        "name": "newTask",
        "notes": [],
        "parameters": [
          " * tasktype - A string specifying task type. The value is one of these: `addUri`, `addTorrent`, `addMetalink`, `nil`. When tasktype is `nil`, aria2 will create a regular download task.",
          " * urls - A string or a table specifying URL. Multi URLs (table) are only available when tasktype is `addUri` or `nil`.",
          " * hostaddr - A optional sring specifying aria2 RPC host",
          " * secret - A optional string specifying host secret"
        ],
        "returns": [],
        "signature": "HSaria2:newTask(tasktype, urls, hostaddr, secret)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HSaria2:sendCommand(command, gid, hostaddr, secret)",
        "desc": "Send a command to `hostaddr`, only limited commands are supported.",
        "doc": "Send a command to `hostaddr`, only limited commands are supported.\n\nParameters:\n * command - A string specifying sending command. The value is one of these: `remove`, `forceRemove`, `pause`, `pauseAll`, `forcePause`, `forcePauseAll`, `unpause`, `unpauseAll`, `purgeDownloadResult`, `removeDownloadResult`.\n * gid - A string specifying GID (aria2 identifies each download by the ID called GID). This Parameter can be optional or not according to the value of `command`.\n * hostaddr - A optional sring specifying aria2 RPC host\n * secret - A optional string specifying host secret",
        "examples": [],
        "file": "Source/HSaria2.spoon/init.lua",
        "lineno": "512",
        "name": "sendCommand",
        "notes": [],
        "parameters": [
          " * command - A string specifying sending command. The value is one of these: `remove`, `forceRemove`, `pause`, `pauseAll`, `forcePause`, `forcePauseAll`, `unpause`, `unpauseAll`, `purgeDownloadResult`, `removeDownloadResult`.",
          " * gid - A string specifying GID (aria2 identifies each download by the ID called GID). This Parameter can be optional or not according to the value of `command`.",
          " * hostaddr - A optional sring specifying aria2 RPC host",
          " * secret - A optional string specifying host secret"
        ],
        "returns": [],
        "signature": "HSaria2:sendCommand(command, gid, hostaddr, secret)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HSaria2:togglePanel()",
        "desc": "Toggle the display of aria2 panel. The panel allows users to interact with aria2, add new tasks, pause them, or remove, purge … etc.",
        "doc": "Toggle the display of aria2 panel. The panel allows users to interact with aria2, add new tasks, pause them, or remove, purge … etc.\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/HSaria2.spoon/init.lua",
        "lineno": "551",
        "name": "togglePanel",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HSaria2:togglePanel()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "HSaria2.max_items",
        "desc": "How many items should be created on aria2 panel? Defaults to 5.",
        "doc": "How many items should be created on aria2 panel? Defaults to 5.",
        "file": "Source/HSaria2.spoon/init.lua",
        "lineno": "17",
        "name": "max_items",
        "signature": "HSaria2.max_items",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HSaria2.refresh_interval",
        "desc": "How often should HSaria2 retrieve data from RPC server? Defaults to 1 (second).",
        "doc": "How often should HSaria2 retrieve data from RPC server? Defaults to 1 (second).",
        "file": "Source/HSaria2.spoon/init.lua",
        "lineno": "22",
        "name": "refresh_interval",
        "signature": "HSaria2.refresh_interval",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Communicate with [aria2](https://github.com/aria2/aria2), an interactive panel included.",
    "doc": "Communicate with [aria2](https://github.com/aria2/aria2), an interactive panel included.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HSaria2.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HSaria2.spoon.zip)",
    "items": [
      {
        "def": "HSaria2:connectToHost(hostaddr, secret)",
        "desc": "Try connect to `hostaddr` with `secret`. If succeed, they will become default values for following-up oprations.",
        "doc": "Try connect to `hostaddr` with `secret`. If succeed, they will become default values for following-up oprations.\n\nParameters:\n * hostaddr - A sring specifying aria2 RPC host, including host name and port address. e.g. \"http://localhost:6800/jsonrpc\".\n * secret - A string specifying host secret",
        "examples": [],
        "file": "Source/HSaria2.spoon/init.lua",
        "lineno": "27",
        "name": "connectToHost",
        "notes": [],
        "parameters": [
          " * hostaddr - A sring specifying aria2 RPC host, including host name and port address. e.g. \"http://localhost:6800/jsonrpc\".",
          " * secret - A string specifying host secret"
        ],
        "returns": [],
        "signature": "HSaria2:connectToHost(hostaddr, secret)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HSaria2.max_items",
        "desc": "How many items should be created on aria2 panel? Defaults to 5.",
        "doc": "How many items should be created on aria2 panel? Defaults to 5.",
        "file": "Source/HSaria2.spoon/init.lua",
        "lineno": "17",
        "name": "max_items",
        "signature": "HSaria2.max_items",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HSaria2:newTask(tasktype, urls, hostaddr, secret)",
        "desc": "Create new regular/bt/metalink task, and send notification when done.",
        "doc": "Create new regular/bt/metalink task, and send notification when done.\n\nParameters:\n * tasktype - A string specifying task type. The value is one of these: `addUri`, `addTorrent`, `addMetalink`, `nil`. When tasktype is `nil`, aria2 will create a regular download task.\n * urls - A string or a table specifying URL. Multi URLs (table) are only available when tasktype is `addUri` or `nil`.\n * hostaddr - A optional sring specifying aria2 RPC host\n * secret - A optional string specifying host secret",
        "examples": [],
        "file": "Source/HSaria2.spoon/init.lua",
        "lineno": "456",
        "name": "newTask",
        "notes": [],
        "parameters": [
          " * tasktype - A string specifying task type. The value is one of these: `addUri`, `addTorrent`, `addMetalink`, `nil`. When tasktype is `nil`, aria2 will create a regular download task.",
          " * urls - A string or a table specifying URL. Multi URLs (table) are only available when tasktype is `addUri` or `nil`.",
          " * hostaddr - A optional sring specifying aria2 RPC host",
          " * secret - A optional string specifying host secret"
        ],
        "returns": [],
        "signature": "HSaria2:newTask(tasktype, urls, hostaddr, secret)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HSaria2.refresh_interval",
        "desc": "How often should HSaria2 retrieve data from RPC server? Defaults to 1 (second).",
        "doc": "How often should HSaria2 retrieve data from RPC server? Defaults to 1 (second).",
        "file": "Source/HSaria2.spoon/init.lua",
        "lineno": "22",
        "name": "refresh_interval",
        "signature": "HSaria2.refresh_interval",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HSaria2:sendCommand(command, gid, hostaddr, secret)",
        "desc": "Send a command to `hostaddr`, only limited commands are supported.",
        "doc": "Send a command to `hostaddr`, only limited commands are supported.\n\nParameters:\n * command - A string specifying sending command. The value is one of these: `remove`, `forceRemove`, `pause`, `pauseAll`, `forcePause`, `forcePauseAll`, `unpause`, `unpauseAll`, `purgeDownloadResult`, `removeDownloadResult`.\n * gid - A string specifying GID (aria2 identifies each download by the ID called GID). This Parameter can be optional or not according to the value of `command`.\n * hostaddr - A optional sring specifying aria2 RPC host\n * secret - A optional string specifying host secret",
        "examples": [],
        "file": "Source/HSaria2.spoon/init.lua",
        "lineno": "512",
        "name": "sendCommand",
        "notes": [],
        "parameters": [
          " * command - A string specifying sending command. The value is one of these: `remove`, `forceRemove`, `pause`, `pauseAll`, `forcePause`, `forcePauseAll`, `unpause`, `unpauseAll`, `purgeDownloadResult`, `removeDownloadResult`.",
          " * gid - A string specifying GID (aria2 identifies each download by the ID called GID). This Parameter can be optional or not according to the value of `command`.",
          " * hostaddr - A optional sring specifying aria2 RPC host",
          " * secret - A optional string specifying host secret"
        ],
        "returns": [],
        "signature": "HSaria2:sendCommand(command, gid, hostaddr, secret)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HSaria2:togglePanel()",
        "desc": "Toggle the display of aria2 panel. The panel allows users to interact with aria2, add new tasks, pause them, or remove, purge … etc.",
        "doc": "Toggle the display of aria2 panel. The panel allows users to interact with aria2, add new tasks, pause them, or remove, purge … etc.\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/HSaria2.spoon/init.lua",
        "lineno": "551",
        "name": "togglePanel",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HSaria2:togglePanel()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "HSaria2",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HSaria2.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HSaria2.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "HSearch:loadSources()",
        "desc": "Load new sources from `HSearch.search_path`, the search_path defaults to `~/.hammerspoon/private/hsearch_dir` and the HSearch Spoon directory. Only useful for debugging purposes.",
        "doc": "Load new sources from `HSearch.search_path`, the search_path defaults to `~/.hammerspoon/private/hsearch_dir` and the HSearch Spoon directory. Only useful for debugging purposes.\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/HSearch.spoon/init.lua",
        "lineno": "187",
        "name": "loadSources",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HSearch:loadSources()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HSearch:switchSource()",
        "desc": "Trigger new source according to `hs.chooser`'s query string and keyword. Only useful for debugging purposes.",
        "doc": "Trigger new source according to `hs.chooser`'s query string and keyword. Only useful for debugging purposes.\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/HSearch.spoon/init.lua",
        "lineno": "99",
        "name": "switchSource",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HSearch:switchSource()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HSearch:toggleShow()",
        "desc": "Toggle the display of HSearch",
        "doc": "Toggle the display of HSearch\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/HSearch.spoon/init.lua",
        "lineno": "243",
        "name": "toggleShow",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HSearch:toggleShow()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Hammerspoon Search",
    "doc": "Hammerspoon Search\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HSearch.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HSearch.spoon.zip)",
    "items": [
      {
        "def": "HSearch:loadSources()",
        "desc": "Load new sources from `HSearch.search_path`, the search_path defaults to `~/.hammerspoon/private/hsearch_dir` and the HSearch Spoon directory. Only useful for debugging purposes.",
        "doc": "Load new sources from `HSearch.search_path`, the search_path defaults to `~/.hammerspoon/private/hsearch_dir` and the HSearch Spoon directory. Only useful for debugging purposes.\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/HSearch.spoon/init.lua",
        "lineno": "187",
        "name": "loadSources",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HSearch:loadSources()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HSearch:switchSource()",
        "desc": "Trigger new source according to `hs.chooser`'s query string and keyword. Only useful for debugging purposes.",
        "doc": "Trigger new source according to `hs.chooser`'s query string and keyword. Only useful for debugging purposes.\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/HSearch.spoon/init.lua",
        "lineno": "99",
        "name": "switchSource",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HSearch:switchSource()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HSearch:toggleShow()",
        "desc": "Toggle the display of HSearch",
        "doc": "Toggle the display of HSearch\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/HSearch.spoon/init.lua",
        "lineno": "243",
        "name": "toggleShow",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HSearch:toggleShow()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "HSearch",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HSearch.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HSearch.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "HSKeybindings:hide()",
        "desc": "Hide the cheatsheet webview",
        "doc": "Hide the cheatsheet webview\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/HSKeybindings.spoon/init.lua",
        "lineno": "229",
        "name": "hide",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HSKeybindings:hide()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HSKeybindings:show()",
        "desc": "Show current application's keybindings in a webview",
        "doc": "Show current application's keybindings in a webview\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/HSKeybindings.spoon/init.lua",
        "lineno": "207",
        "name": "show",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HSKeybindings:show()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Display Keybindings registered with bindHotkeys() and Spoons ",
    "doc": "Display Keybindings registered with bindHotkeys() and Spoons \n\nSpoons need to set the mapping in obj\n\nOriginally based on KSheet.spoon by ashfinal <ashfinal@gmail.com>\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HSKeybindings.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HSKeybindings.spoon.zip)",
    "items": [
      {
        "def": "HSKeybindings:hide()",
        "desc": "Hide the cheatsheet webview",
        "doc": "Hide the cheatsheet webview\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/HSKeybindings.spoon/init.lua",
        "lineno": "229",
        "name": "hide",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HSKeybindings:hide()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HSKeybindings:show()",
        "desc": "Show current application's keybindings in a webview",
        "doc": "Show current application's keybindings in a webview\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/HSKeybindings.spoon/init.lua",
        "lineno": "207",
        "name": "show",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "HSKeybindings:show()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "HSKeybindings",
    "stripped_doc": "\nSpoons need to set the mapping in obj\n\nOriginally based on KSheet.spoon by ashfinal <ashfinal@gmail.com>\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HSKeybindings.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HSKeybindings.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [
      {
        "def": "Keychain:login_keychain(name)",
        "desc": "Retrieve an item from the Login Keychain, returns nil if not found.",
        "doc": "Retrieve an item from the Login Keychain, returns nil if not found.\n\nParameters:\n * name - The name of the item in the Login Keychain you want to retrieve\n\nNotes:\n * Use getItem() instead.",
        "file": "Source/Keychain.spoon/init.lua",
        "lineno": "64",
        "name": "login_keychain",
        "notes": [
          " * Use getItem() instead."
        ],
        "parameters": [
          " * name - The name of the item in the Login Keychain you want to retrieve"
        ],
        "signature": "Keychain:login_keychain(name)",
        "stripped_doc": "",
        "type": "Deprecated"
      }
    ],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Keychain:addItem(options)",
        "desc": "Add generic password to keychain.",
        "doc": "Add generic password to keychain.\n\nParameters:\n * options is a table with values for what keys to try locate with.\n  * password - the password\n  * account - account name (required)\n  * creator - creator, must be 4 characters\n  * type - type, must be 4 characters\n  * kind - kind of item\n  * comment - comment \n  * label - label (defaults to service name)\n  * service - service name (required)",
        "examples": [],
        "file": "Source/Keychain.spoon/init.lua",
        "lineno": "139",
        "name": "addItem",
        "notes": [],
        "parameters": [
          " * options is a table with values for what keys to try locate with.\n   * password - the password\n   * account - account name (required)\n   * creator - creator, must be 4 characters\n   * type - type, must be 4 characters\n   * kind - kind of item\n   * comment - comment\n   * label - label (defaults to service name)\n   * service - service name (required)"
        ],
        "returns": [],
        "signature": "Keychain:addItem(options)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Keychain:getItem(options)",
        "desc": "Retrieve an item from the Login Keychain. Return nil if not found and otherwise a table with found data.",
        "doc": "Retrieve an item from the Login Keychain. Return nil if not found and otherwise a table with found data.\n\nParameters:\n * options is a table with values for what keys to try locate with.\n  * account - account name\n  * creator - creator, must be 4 characters\n  * type - type, must be 4 characters\n  * kind - kind of item\n  * comment - comment \n  * label - label (defaults to service name)\n  * service - service name\n\nNotes:\n * If multiple possibles matches just the first one is found.",
        "examples": [],
        "file": "Source/Keychain.spoon/init.lua",
        "lineno": "82",
        "name": "getItem",
        "notes": [
          " * If multiple possibles matches just the first one is found."
        ],
        "parameters": [
          " * options is a table with values for what keys to try locate with.\n   * account - account name\n   * creator - creator, must be 4 characters\n   * type - type, must be 4 characters\n   * kind - kind of item\n   * comment - comment\n   * label - label (defaults to service name)\n   * service - service name"
        ],
        "returns": [],
        "signature": "Keychain:getItem(options)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Keychain.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/Keychain.spoon/init.lua",
        "lineno": "25",
        "name": "logger",
        "signature": "Keychain.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Get and Add items from Keychain. Provides no hotkeys and maintains no state",
    "doc": "Get and Add items from Keychain. Provides no hotkeys and maintains no state\n\nExample usage:\n```lua\n   spoon.Keychain.addItem{service=\"mynas.local\", account=\"myname\", password=\"secret\"}\n   item = spoon.Keychain.getItem{service=\"mynas.local\", account=\"myname\"}\n   print(item.password)\n```\n\nTyler Thrailkill <tyler.b.thrailkill@gmail.com>\n\nhttps://github.com/snowe2010",
    "items": [
      {
        "def": "Keychain:addItem(options)",
        "desc": "Add generic password to keychain.",
        "doc": "Add generic password to keychain.\n\nParameters:\n * options is a table with values for what keys to try locate with.\n  * password - the password\n  * account - account name (required)\n  * creator - creator, must be 4 characters\n  * type - type, must be 4 characters\n  * kind - kind of item\n  * comment - comment \n  * label - label (defaults to service name)\n  * service - service name (required)",
        "examples": [],
        "file": "Source/Keychain.spoon/init.lua",
        "lineno": "139",
        "name": "addItem",
        "notes": [],
        "parameters": [
          " * options is a table with values for what keys to try locate with.\n   * password - the password\n   * account - account name (required)\n   * creator - creator, must be 4 characters\n   * type - type, must be 4 characters\n   * kind - kind of item\n   * comment - comment\n   * label - label (defaults to service name)\n   * service - service name (required)"
        ],
        "returns": [],
        "signature": "Keychain:addItem(options)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Keychain:getItem(options)",
        "desc": "Retrieve an item from the Login Keychain. Return nil if not found and otherwise a table with found data.",
        "doc": "Retrieve an item from the Login Keychain. Return nil if not found and otherwise a table with found data.\n\nParameters:\n * options is a table with values for what keys to try locate with.\n  * account - account name\n  * creator - creator, must be 4 characters\n  * type - type, must be 4 characters\n  * kind - kind of item\n  * comment - comment \n  * label - label (defaults to service name)\n  * service - service name\n\nNotes:\n * If multiple possibles matches just the first one is found.",
        "examples": [],
        "file": "Source/Keychain.spoon/init.lua",
        "lineno": "82",
        "name": "getItem",
        "notes": [
          " * If multiple possibles matches just the first one is found."
        ],
        "parameters": [
          " * options is a table with values for what keys to try locate with.\n   * account - account name\n   * creator - creator, must be 4 characters\n   * type - type, must be 4 characters\n   * kind - kind of item\n   * comment - comment\n   * label - label (defaults to service name)\n   * service - service name"
        ],
        "returns": [],
        "signature": "Keychain:getItem(options)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Keychain.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/Keychain.spoon/init.lua",
        "lineno": "25",
        "name": "logger",
        "signature": "Keychain.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Keychain:login_keychain(name)",
        "desc": "Retrieve an item from the Login Keychain, returns nil if not found.",
        "doc": "Retrieve an item from the Login Keychain, returns nil if not found.\n\nParameters:\n * name - The name of the item in the Login Keychain you want to retrieve\n\nNotes:\n * Use getItem() instead.",
        "file": "Source/Keychain.spoon/init.lua",
        "lineno": "64",
        "name": "login_keychain",
        "notes": [
          " * Use getItem() instead."
        ],
        "parameters": [
          " * name - The name of the item in the Login Keychain you want to retrieve"
        ],
        "signature": "Keychain:login_keychain(name)",
        "stripped_doc": "",
        "type": "Deprecated"
      }
    ],
    "name": "Keychain",
    "stripped_doc": "\nExample usage:\n```lua\n   spoon.Keychain.addItem{service=\"mynas.local\", account=\"myname\", password=\"secret\"}\n   item = spoon.Keychain.getItem{service=\"mynas.local\", account=\"myname\"}\n   print(item.password)\n```\n\nTyler Thrailkill <tyler.b.thrailkill@gmail.com>\n\nhttps://github.com/snowe2010",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "KSheet:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for KSheet",
        "doc": "Binds hotkeys for KSheet\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - Show the keybinding view\n  * hide - Hide the keybinding view\n  * toggle - Show if hidden, hide if shown",
        "examples": [],
        "file": "Source/KSheet.spoon/init.lua",
        "lineno": "236",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * show - Show the keybinding view\n   * hide - Hide the keybinding view\n   * toggle - Show if hidden, hide if shown"
        ],
        "returns": [],
        "signature": "KSheet:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "KSheet:hide()",
        "desc": "Hide the cheatsheet view.",
        "doc": "Hide the cheatsheet view.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/KSheet.spoon/init.lua",
        "lineno": "212",
        "name": "hide",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "KSheet:hide()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "KSheet:init()",
        "desc": "Initialize the spoon",
        "doc": "Initialize the spoon\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/KSheet.spoon/init.lua",
        "lineno": "27",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "KSheet:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "KSheet:show()",
        "desc": "Show current application's keybindings in a view.",
        "doc": "Show current application's keybindings in a view.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/KSheet.spoon/init.lua",
        "lineno": "199",
        "name": "show",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "KSheet:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "KSheet:toggle()",
        "desc": "Alternatively show/hide the cheatsheet view.",
        "doc": "Alternatively show/hide the cheatsheet view.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/KSheet.spoon/init.lua",
        "lineno": "222",
        "name": "toggle",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "KSheet:toggle()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Keybindings cheatsheet for current application",
    "doc": "Keybindings cheatsheet for current application\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/KSheet.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/KSheet.spoon.zip)",
    "items": [
      {
        "def": "KSheet:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for KSheet",
        "doc": "Binds hotkeys for KSheet\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - Show the keybinding view\n  * hide - Hide the keybinding view\n  * toggle - Show if hidden, hide if shown",
        "examples": [],
        "file": "Source/KSheet.spoon/init.lua",
        "lineno": "236",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * show - Show the keybinding view\n   * hide - Hide the keybinding view\n   * toggle - Show if hidden, hide if shown"
        ],
        "returns": [],
        "signature": "KSheet:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "KSheet:hide()",
        "desc": "Hide the cheatsheet view.",
        "doc": "Hide the cheatsheet view.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/KSheet.spoon/init.lua",
        "lineno": "212",
        "name": "hide",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "KSheet:hide()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "KSheet:init()",
        "desc": "Initialize the spoon",
        "doc": "Initialize the spoon\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/KSheet.spoon/init.lua",
        "lineno": "27",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "KSheet:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "KSheet:show()",
        "desc": "Show current application's keybindings in a view.",
        "doc": "Show current application's keybindings in a view.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/KSheet.spoon/init.lua",
        "lineno": "199",
        "name": "show",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "KSheet:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "KSheet:toggle()",
        "desc": "Alternatively show/hide the cheatsheet view.",
        "doc": "Alternatively show/hide the cheatsheet view.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/KSheet.spoon/init.lua",
        "lineno": "222",
        "name": "toggle",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "KSheet:toggle()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "KSheet",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/KSheet.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/KSheet.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Leanpub:displayAllBookStatus()",
        "desc": "Check and display (if needed) the status of all the books in `watch_books`",
        "doc": "Check and display (if needed) the status of all the books in `watch_books`\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "282",
        "name": "displayAllBookStatus",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Leanpub:displayAllBookStatus()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub:displayBookStatus(book)",
        "desc": "Display a notification with the current build status of a book.",
        "doc": "Display a notification with the current build status of a book.\n\nParameters:\n * book - table containing the information of the book to check. The table must contain the following fields:\n   * slug - URL \"slug\" of the book to check. The slug is the part of the book URL after https://leanpub.com/.\n   * icon - optional icon to show in the notifications for the book, as an `hs.image` object. If this field is not specified but `fetch_leanpub_covers` is true (the default value), this method attempts to fetch the book cover from Leanpub. If the cover can be retrieved, it gets stored in the icon field so it doesn't get fetched every time. You can disable cover fetching for individual books by setting this field explicitly to `false`\n\nReturns:\n * A Lua table containing the status (may be empty), nil if an error occurred\n\nNotes:\n* Only produce a notification if the current status is different than the last known one (from the last time `displayBookStatus` was run for the same book).",
        "examples": [],
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "144",
        "name": "displayBookStatus",
        "notes": [
          "* Only produce a notification if the current status is different than the last known one (from the last time `displayBookStatus` was run for the same book)."
        ],
        "parameters": [
          " * book - table containing the information of the book to check. The table must contain the following fields:\n   * slug - URL \"slug\" of the book to check. The slug is the part of the book URL after https://leanpub.com/.\n   * icon - optional icon to show in the notifications for the book, as an `hs.image` object. If this field is not specified but `fetch_leanpub_covers` is true (the default value), this method attempts to fetch the book cover from Leanpub. If the cover can be retrieved, it gets stored in the icon field so it doesn't get fetched every time. You can disable cover fetching for individual books by setting this field explicitly to `false`"
        ],
        "returns": [
          " * A Lua table containing the status (may be empty), nil if an error occurred"
        ],
        "signature": "Leanpub:displayBookStatus(book)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub:fetchBookCover(book)",
        "desc": "Fetch the cover of a book.",
        "doc": "Fetch the cover of a book.\n\nParameters:\n * book - table containing the book information. The icon gets\n   stored in its `icon` field when it can be fetched.\n\nReturns:\n * No return value\n\nNotes:\n * Side effects:\n  * Stores the icon in the book data structure",
        "examples": [],
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "240",
        "name": "fetchBookCover",
        "notes": [
          " * Side effects:",
          "  * Stores the icon in the book data structure"
        ],
        "parameters": [
          " * book - table containing the book information. The icon gets stored in its `icon` field when it can be fetched."
        ],
        "returns": [
          " * No return value"
        ],
        "signature": "Leanpub:fetchBookCover(book)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub:getBookStatus(slug, callback)",
        "desc": "Asynchronously get the status of a book given its slug.",
        "doc": "Asynchronously get the status of a book given its slug.\n\nParameters:\n * slug - URL \"slug\" of the book to check. The slug of a book is the part of the URL for your book after https://leanpub.com/.\n * callback - function to which the book status will be passed when the data is received. This function will be passed a single argument, a table containing the fields returned by the Leanpub API. If the book is not being built at the moment, an empty table is passed. If an error occurs, the value passed will be `nil`. Samples of the return values can be found at https://leanpub.com/help/api#getting-the-job-status\n\nReturns:\n * No return value",
        "examples": [],
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "107",
        "name": "getBookStatus",
        "notes": [],
        "parameters": [
          " * slug - URL \"slug\" of the book to check. The slug of a book is the part of the URL for your book after https://leanpub.com/.",
          " * callback - function to which the book status will be passed when the data is received. This function will be passed a single argument, a table containing the fields returned by the Leanpub API. If the book is not being built at the moment, an empty table is passed. If an error occurs, the value passed will be `nil`. Samples of the return values can be found at https://leanpub.com/help/api#getting-the-job-status"
        ],
        "returns": [
          " * No return value"
        ],
        "signature": "Leanpub:getBookStatus(slug, callback)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub:start()",
        "desc": "Start periodic check for book status, checking every check_interval seconds.",
        "doc": "Start periodic check for book status, checking every check_interval seconds.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "296",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Leanpub:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub:stop()",
        "desc": "Stops periodic check for book status, if enabled.",
        "doc": "Stops periodic check for book status, if enabled.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "309",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Leanpub:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Leanpub.api_key",
        "desc": "String containing the key to use for Leanpub API requests.",
        "doc": "String containing the key to use for Leanpub API requests.\n\nNotes:\n * Get it from your Leanpub account under the \"Author / Your API Key\" menu section. No default.",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "43",
        "name": "api_key",
        "notes": [
          " * Get it from your Leanpub account under the \"Author / Your API Key\" menu section. No default."
        ],
        "signature": "Leanpub.api_key",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub.books_sync_to_dropbox",
        "desc": "Boolean that specifies whether all your books are being synced to Dropbox.",
        "doc": "Boolean that specifies whether all your books are being synced to Dropbox.\n\nNotes:\n * If true, the \"Book generation complete\" notification will include a \"Show\" button to open the book's directory in Dropbox.\n * Setting this is equivalent to setting the `syncs_to_dropbox` attribute for each book in `watch_books`. Default value: `false`.",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "34",
        "name": "books_sync_to_dropbox",
        "notes": [
          " * If true, the \"Book generation complete\" notification will include a \"Show\" button to open the book's directory in Dropbox.",
          " * Setting this is equivalent to setting the `syncs_to_dropbox` attribute for each book in `watch_books`. Default value: `false`."
        ],
        "signature": "Leanpub.books_sync_to_dropbox",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub.check_interval",
        "desc": "Integer containing the interval (in seconds) at which the book status is checked. Default 5.",
        "doc": "Integer containing the interval (in seconds) at which the book status is checked. Default 5.",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "51",
        "name": "check_interval",
        "signature": "Leanpub.check_interval",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub.dropbox_path",
        "desc": "String containing the base Dropbox path to which the books are synced, if the corresponding parameters are set.",
        "doc": "String containing the base Dropbox path to which the books are synced, if the corresponding parameters are set.\n\nNotes:\n * If unset, the path is determined automatically by reading the ~/.dropbox/info.json file and choosing the path corresponding to the profile specified in `Leanpub.dropbox_profile`.\n * If for some reason your synced files are somewhere else, you can store in this variable the final path to use. Most users should be fine with the defaults.",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "72",
        "name": "dropbox_path",
        "notes": [
          " * If unset, the path is determined automatically by reading the ~/.dropbox/info.json file and choosing the path corresponding to the profile specified in `Leanpub.dropbox_profile`.",
          " * If for some reason your synced files are somewhere else, you can store in this variable the final path to use. Most users should be fine with the defaults."
        ],
        "signature": "Leanpub.dropbox_path",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub.dropbox_type",
        "desc": "String containing the name of the Dropbox account type to use for determining the base path of the Dropbox directory.",
        "doc": "String containing the name of the Dropbox account type to use for determining the base path of the Dropbox directory.\n\nNotes:\n * Valid values are \"personal\" and \"business\". See https://help.dropbox.com/installs-integrations/desktop/locate-dropbox-folder for the details.\n * Default value: \"personal\".",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "81",
        "name": "dropbox_type",
        "notes": [
          " * Valid values are \"personal\" and \"business\". See https://help.dropbox.com/installs-integrations/desktop/locate-dropbox-folder for the details.",
          " * Default value: \"personal\"."
        ],
        "signature": "Leanpub.dropbox_type",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub.fetch_leanpub_covers",
        "desc": "Boolean indicating whether we should try to fetch book covers from Leanpub.",
        "doc": "Boolean indicating whether we should try to fetch book covers from Leanpub.\n\nNotes:\n * Default value: `true`.",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "56",
        "name": "fetch_leanpub_covers",
        "notes": [
          " * Default value: `true`."
        ],
        "signature": "Leanpub.fetch_leanpub_covers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "18",
        "name": "logger",
        "signature": "Leanpub.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub.persistent_notification",
        "desc": "Table specifying the Leanpub status for which notifications should not disappear automatically.",
        "doc": "Table specifying the Leanpub status for which notifications should not disappear automatically.\n\nNotes:\n * The indices correspond to the values of the `status` field returned by the Leanpub API. Possible values are `working` and `complete`. Default `{ complete = true }` to keep the \"Book generation complete\" messages.",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "64",
        "name": "persistent_notification",
        "notes": [
          " * The indices correspond to the values of the `status` field returned by the Leanpub API. Possible values are `working` and `complete`. Default `{ complete = true }` to keep the \"Book generation complete\" messages."
        ],
        "signature": "Leanpub.persistent_notification",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub.watch_books",
        "desc": "List of books to watch (by default an empty list).",
        "doc": "List of books to watch (by default an empty list).\n\nNotes:\n * Each element of the list must be a table containing the following keys:\n  * slug - the web page \"slug\" of the book to watch. The slug of a book can be set under the \"Book Web Page / Web Page URL\" menu section in Leanpub.\n  * icon - optional icon to show in the notifications for the book, as an hs.image object. If not specified, and if `fetch_leanpub_covers` is `true`, then the icon is generated automatically from the book cover.\n  * syncs_to_dropbox - optional boolean to indicate whether the book is configured in Leanpub to sync to Dropbox (you can find this option in your books \"Writing mode\" screen, as \"Send output to Dropbox\". If true, the \"Book generation complete\" notification will include a \"Show\" button to open the book's directory in Dropbox. If you have multiple books and all of them are synced to Dropbox, you can set the main `Leanpub.books_sync_to_dropbox` variable instead of setting it for each book. Default value: `false`",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "23",
        "name": "watch_books",
        "notes": [
          " * Each element of the list must be a table containing the following keys:",
          "  * slug - the web page \"slug\" of the book to watch. The slug of a book can be set under the \"Book Web Page / Web Page URL\" menu section in Leanpub.",
          "  * icon - optional icon to show in the notifications for the book, as an hs.image object. If not specified, and if `fetch_leanpub_covers` is `true`, then the icon is generated automatically from the book cover.",
          "  * syncs_to_dropbox - optional boolean to indicate whether the book is configured in Leanpub to sync to Dropbox (you can find this option in your books \"Writing mode\" screen, as \"Send output to Dropbox\". If true, the \"Book generation complete\" notification will include a \"Show\" button to open the book's directory in Dropbox. If you have multiple books and all of them are synced to Dropbox, you can set the main `Leanpub.books_sync_to_dropbox` variable instead of setting it for each book. Default value: `false`"
        ],
        "signature": "Leanpub.watch_books",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Spoon to track and notify about Leanpub builds.",
    "doc": "Spoon to track and notify about Leanpub builds.\n\nDownload:\nhttps://github.com/Hammerspoon/Spoons/raw/master/Spoons/Leanpub.spoon.zip",
    "items": [
      {
        "def": "Leanpub.api_key",
        "desc": "String containing the key to use for Leanpub API requests.",
        "doc": "String containing the key to use for Leanpub API requests.\n\nNotes:\n * Get it from your Leanpub account under the \"Author / Your API Key\" menu section. No default.",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "43",
        "name": "api_key",
        "notes": [
          " * Get it from your Leanpub account under the \"Author / Your API Key\" menu section. No default."
        ],
        "signature": "Leanpub.api_key",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub.books_sync_to_dropbox",
        "desc": "Boolean that specifies whether all your books are being synced to Dropbox.",
        "doc": "Boolean that specifies whether all your books are being synced to Dropbox.\n\nNotes:\n * If true, the \"Book generation complete\" notification will include a \"Show\" button to open the book's directory in Dropbox.\n * Setting this is equivalent to setting the `syncs_to_dropbox` attribute for each book in `watch_books`. Default value: `false`.",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "34",
        "name": "books_sync_to_dropbox",
        "notes": [
          " * If true, the \"Book generation complete\" notification will include a \"Show\" button to open the book's directory in Dropbox.",
          " * Setting this is equivalent to setting the `syncs_to_dropbox` attribute for each book in `watch_books`. Default value: `false`."
        ],
        "signature": "Leanpub.books_sync_to_dropbox",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub.check_interval",
        "desc": "Integer containing the interval (in seconds) at which the book status is checked. Default 5.",
        "doc": "Integer containing the interval (in seconds) at which the book status is checked. Default 5.",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "51",
        "name": "check_interval",
        "signature": "Leanpub.check_interval",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub:displayAllBookStatus()",
        "desc": "Check and display (if needed) the status of all the books in `watch_books`",
        "doc": "Check and display (if needed) the status of all the books in `watch_books`\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "282",
        "name": "displayAllBookStatus",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Leanpub:displayAllBookStatus()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub:displayBookStatus(book)",
        "desc": "Display a notification with the current build status of a book.",
        "doc": "Display a notification with the current build status of a book.\n\nParameters:\n * book - table containing the information of the book to check. The table must contain the following fields:\n   * slug - URL \"slug\" of the book to check. The slug is the part of the book URL after https://leanpub.com/.\n   * icon - optional icon to show in the notifications for the book, as an `hs.image` object. If this field is not specified but `fetch_leanpub_covers` is true (the default value), this method attempts to fetch the book cover from Leanpub. If the cover can be retrieved, it gets stored in the icon field so it doesn't get fetched every time. You can disable cover fetching for individual books by setting this field explicitly to `false`\n\nReturns:\n * A Lua table containing the status (may be empty), nil if an error occurred\n\nNotes:\n* Only produce a notification if the current status is different than the last known one (from the last time `displayBookStatus` was run for the same book).",
        "examples": [],
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "144",
        "name": "displayBookStatus",
        "notes": [
          "* Only produce a notification if the current status is different than the last known one (from the last time `displayBookStatus` was run for the same book)."
        ],
        "parameters": [
          " * book - table containing the information of the book to check. The table must contain the following fields:\n   * slug - URL \"slug\" of the book to check. The slug is the part of the book URL after https://leanpub.com/.\n   * icon - optional icon to show in the notifications for the book, as an `hs.image` object. If this field is not specified but `fetch_leanpub_covers` is true (the default value), this method attempts to fetch the book cover from Leanpub. If the cover can be retrieved, it gets stored in the icon field so it doesn't get fetched every time. You can disable cover fetching for individual books by setting this field explicitly to `false`"
        ],
        "returns": [
          " * A Lua table containing the status (may be empty), nil if an error occurred"
        ],
        "signature": "Leanpub:displayBookStatus(book)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub.dropbox_path",
        "desc": "String containing the base Dropbox path to which the books are synced, if the corresponding parameters are set.",
        "doc": "String containing the base Dropbox path to which the books are synced, if the corresponding parameters are set.\n\nNotes:\n * If unset, the path is determined automatically by reading the ~/.dropbox/info.json file and choosing the path corresponding to the profile specified in `Leanpub.dropbox_profile`.\n * If for some reason your synced files are somewhere else, you can store in this variable the final path to use. Most users should be fine with the defaults.",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "72",
        "name": "dropbox_path",
        "notes": [
          " * If unset, the path is determined automatically by reading the ~/.dropbox/info.json file and choosing the path corresponding to the profile specified in `Leanpub.dropbox_profile`.",
          " * If for some reason your synced files are somewhere else, you can store in this variable the final path to use. Most users should be fine with the defaults."
        ],
        "signature": "Leanpub.dropbox_path",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub.dropbox_type",
        "desc": "String containing the name of the Dropbox account type to use for determining the base path of the Dropbox directory.",
        "doc": "String containing the name of the Dropbox account type to use for determining the base path of the Dropbox directory.\n\nNotes:\n * Valid values are \"personal\" and \"business\". See https://help.dropbox.com/installs-integrations/desktop/locate-dropbox-folder for the details.\n * Default value: \"personal\".",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "81",
        "name": "dropbox_type",
        "notes": [
          " * Valid values are \"personal\" and \"business\". See https://help.dropbox.com/installs-integrations/desktop/locate-dropbox-folder for the details.",
          " * Default value: \"personal\"."
        ],
        "signature": "Leanpub.dropbox_type",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub.fetch_leanpub_covers",
        "desc": "Boolean indicating whether we should try to fetch book covers from Leanpub.",
        "doc": "Boolean indicating whether we should try to fetch book covers from Leanpub.\n\nNotes:\n * Default value: `true`.",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "56",
        "name": "fetch_leanpub_covers",
        "notes": [
          " * Default value: `true`."
        ],
        "signature": "Leanpub.fetch_leanpub_covers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub:fetchBookCover(book)",
        "desc": "Fetch the cover of a book.",
        "doc": "Fetch the cover of a book.\n\nParameters:\n * book - table containing the book information. The icon gets\n   stored in its `icon` field when it can be fetched.\n\nReturns:\n * No return value\n\nNotes:\n * Side effects:\n  * Stores the icon in the book data structure",
        "examples": [],
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "240",
        "name": "fetchBookCover",
        "notes": [
          " * Side effects:",
          "  * Stores the icon in the book data structure"
        ],
        "parameters": [
          " * book - table containing the book information. The icon gets stored in its `icon` field when it can be fetched."
        ],
        "returns": [
          " * No return value"
        ],
        "signature": "Leanpub:fetchBookCover(book)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub:getBookStatus(slug, callback)",
        "desc": "Asynchronously get the status of a book given its slug.",
        "doc": "Asynchronously get the status of a book given its slug.\n\nParameters:\n * slug - URL \"slug\" of the book to check. The slug of a book is the part of the URL for your book after https://leanpub.com/.\n * callback - function to which the book status will be passed when the data is received. This function will be passed a single argument, a table containing the fields returned by the Leanpub API. If the book is not being built at the moment, an empty table is passed. If an error occurs, the value passed will be `nil`. Samples of the return values can be found at https://leanpub.com/help/api#getting-the-job-status\n\nReturns:\n * No return value",
        "examples": [],
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "107",
        "name": "getBookStatus",
        "notes": [],
        "parameters": [
          " * slug - URL \"slug\" of the book to check. The slug of a book is the part of the URL for your book after https://leanpub.com/.",
          " * callback - function to which the book status will be passed when the data is received. This function will be passed a single argument, a table containing the fields returned by the Leanpub API. If the book is not being built at the moment, an empty table is passed. If an error occurs, the value passed will be `nil`. Samples of the return values can be found at https://leanpub.com/help/api#getting-the-job-status"
        ],
        "returns": [
          " * No return value"
        ],
        "signature": "Leanpub:getBookStatus(slug, callback)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "18",
        "name": "logger",
        "signature": "Leanpub.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub.persistent_notification",
        "desc": "Table specifying the Leanpub status for which notifications should not disappear automatically.",
        "doc": "Table specifying the Leanpub status for which notifications should not disappear automatically.\n\nNotes:\n * The indices correspond to the values of the `status` field returned by the Leanpub API. Possible values are `working` and `complete`. Default `{ complete = true }` to keep the \"Book generation complete\" messages.",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "64",
        "name": "persistent_notification",
        "notes": [
          " * The indices correspond to the values of the `status` field returned by the Leanpub API. Possible values are `working` and `complete`. Default `{ complete = true }` to keep the \"Book generation complete\" messages."
        ],
        "signature": "Leanpub.persistent_notification",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Leanpub:start()",
        "desc": "Start periodic check for book status, checking every check_interval seconds.",
        "doc": "Start periodic check for book status, checking every check_interval seconds.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "296",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Leanpub:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub:stop()",
        "desc": "Stops periodic check for book status, if enabled.",
        "doc": "Stops periodic check for book status, if enabled.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "309",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Leanpub:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub.watch_books",
        "desc": "List of books to watch (by default an empty list).",
        "doc": "List of books to watch (by default an empty list).\n\nNotes:\n * Each element of the list must be a table containing the following keys:\n  * slug - the web page \"slug\" of the book to watch. The slug of a book can be set under the \"Book Web Page / Web Page URL\" menu section in Leanpub.\n  * icon - optional icon to show in the notifications for the book, as an hs.image object. If not specified, and if `fetch_leanpub_covers` is `true`, then the icon is generated automatically from the book cover.\n  * syncs_to_dropbox - optional boolean to indicate whether the book is configured in Leanpub to sync to Dropbox (you can find this option in your books \"Writing mode\" screen, as \"Send output to Dropbox\". If true, the \"Book generation complete\" notification will include a \"Show\" button to open the book's directory in Dropbox. If you have multiple books and all of them are synced to Dropbox, you can set the main `Leanpub.books_sync_to_dropbox` variable instead of setting it for each book. Default value: `false`",
        "file": "Source/Leanpub.spoon/init.lua",
        "lineno": "23",
        "name": "watch_books",
        "notes": [
          " * Each element of the list must be a table containing the following keys:",
          "  * slug - the web page \"slug\" of the book to watch. The slug of a book can be set under the \"Book Web Page / Web Page URL\" menu section in Leanpub.",
          "  * icon - optional icon to show in the notifications for the book, as an hs.image object. If not specified, and if `fetch_leanpub_covers` is `true`, then the icon is generated automatically from the book cover.",
          "  * syncs_to_dropbox - optional boolean to indicate whether the book is configured in Leanpub to sync to Dropbox (you can find this option in your books \"Writing mode\" screen, as \"Send output to Dropbox\". If true, the \"Book generation complete\" notification will include a \"Show\" button to open the book's directory in Dropbox. If you have multiple books and all of them are synced to Dropbox, you can set the main `Leanpub.books_sync_to_dropbox` variable instead of setting it for each book. Default value: `false`"
        ],
        "signature": "Leanpub.watch_books",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "Leanpub",
    "stripped_doc": "\nDownload:\nhttps://github.com/Hammerspoon/Spoons/raw/master/Spoons/Leanpub.spoon.zip",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "LookupSelection:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for LookupSelection",
        "doc": "Binds hotkeys for LookupSelection\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * `lexicon` - open in lexicon app\n  * `neue_notiz` -  create new note in notes app\n  * `hsdocs` -  display online help\n\nNotes:\n * Sample value for `mapping`:\n```\n {\n    lexicon = { { \"ctrl\", \"alt\", \"cmd\" }, \"L\" },\n    neue_notiz = { { \"ctrl\", \"alt\", \"cmd\" }, \"N\" },\n    hsdocs = { { \"ctrl\", \"alt\", \"cmd\" }, \"H\" },\n }\n```",
        "examples": [],
        "file": "Source/LookupSelection.spoon/init.lua",
        "lineno": "93",
        "name": "bindHotkeys",
        "notes": [
          " * Sample value for `mapping`:",
          "```",
          " {",
          "    lexicon = { { \"ctrl\", \"alt\", \"cmd\" }, \"L\" },",
          "    neue_notiz = { { \"ctrl\", \"alt\", \"cmd\" }, \"N\" },",
          "    hsdocs = { { \"ctrl\", \"alt\", \"cmd\" }, \"H\" },",
          " }",
          "```"
        ],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * `lexicon` - open in lexicon app\n   * `neue_notiz` -  create new note in notes app\n   * `hsdocs` -  display online help"
        ],
        "returns": [],
        "signature": "LookupSelection:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "LookupSelection:openLexicon()",
        "desc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages",
        "doc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages\n\nParameters:\n * None\n\nReturns:\n * The LookupSelection object",
        "examples": [],
        "file": "Source/LookupSelection.spoon/init.lua",
        "lineno": "58",
        "name": "openLexicon",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The LookupSelection object"
        ],
        "signature": "LookupSelection:openLexicon()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "LookupSelection.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/LookupSelection.spoon/init.lua",
        "lineno": "42",
        "name": "logger",
        "signature": "LookupSelection.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Show a popup window with the currently selected word in lexicon, notes, online help",
    "doc": "Show a popup window with the currently selected word in lexicon, notes, online help\n\nThe spoon uses hs.urlevent.openURL(\"dict://\" .. text) \n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/LookupSelection.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/LookupSelection.spoon.zip)",
    "items": [
      {
        "def": "LookupSelection:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for LookupSelection",
        "doc": "Binds hotkeys for LookupSelection\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * `lexicon` - open in lexicon app\n  * `neue_notiz` -  create new note in notes app\n  * `hsdocs` -  display online help\n\nNotes:\n * Sample value for `mapping`:\n```\n {\n    lexicon = { { \"ctrl\", \"alt\", \"cmd\" }, \"L\" },\n    neue_notiz = { { \"ctrl\", \"alt\", \"cmd\" }, \"N\" },\n    hsdocs = { { \"ctrl\", \"alt\", \"cmd\" }, \"H\" },\n }\n```",
        "examples": [],
        "file": "Source/LookupSelection.spoon/init.lua",
        "lineno": "93",
        "name": "bindHotkeys",
        "notes": [
          " * Sample value for `mapping`:",
          "```",
          " {",
          "    lexicon = { { \"ctrl\", \"alt\", \"cmd\" }, \"L\" },",
          "    neue_notiz = { { \"ctrl\", \"alt\", \"cmd\" }, \"N\" },",
          "    hsdocs = { { \"ctrl\", \"alt\", \"cmd\" }, \"H\" },",
          " }",
          "```"
        ],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * `lexicon` - open in lexicon app\n   * `neue_notiz` -  create new note in notes app\n   * `hsdocs` -  display online help"
        ],
        "returns": [],
        "signature": "LookupSelection:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "LookupSelection.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/LookupSelection.spoon/init.lua",
        "lineno": "42",
        "name": "logger",
        "signature": "LookupSelection.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "LookupSelection:openLexicon()",
        "desc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages",
        "doc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages\n\nParameters:\n * None\n\nReturns:\n * The LookupSelection object",
        "examples": [],
        "file": "Source/LookupSelection.spoon/init.lua",
        "lineno": "58",
        "name": "openLexicon",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The LookupSelection object"
        ],
        "signature": "LookupSelection:openLexicon()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "LookupSelection",
    "stripped_doc": "\nThe spoon uses hs.urlevent.openURL(\"dict://\" .. text) \n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/LookupSelection.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/LookupSelection.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MenubarFlag:drawIndicators(src)",
        "desc": "Draw the indicators corresponding to the given layout name",
        "doc": "Draw the indicators corresponding to the given layout name\n\nParameters:\n * src - name of the layout to draw. If the given element exists in `MenubarFlag.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen.\n\nReturns:\n * The MenubarFlag object",
        "examples": [],
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "118",
        "name": "drawIndicators",
        "notes": [],
        "parameters": [
          " * src - name of the layout to draw. If the given element exists in `MenubarFlag.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen."
        ],
        "returns": [
          " * The MenubarFlag object"
        ],
        "signature": "MenubarFlag:drawIndicators(src)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:getLayoutAndDrawindicators()",
        "desc": "Draw indicators for the current keyboard method or layout",
        "doc": "Draw indicators for the current keyboard method or layout\n\nParameters:\n * None\n\nReturns:\n * The MenubarFlag object",
        "examples": [],
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "175",
        "name": "getLayoutAndDrawindicators",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MenubarFlag object"
        ],
        "signature": "MenubarFlag:getLayoutAndDrawindicators()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:start()",
        "desc": "Start the keyboard layout watcher to draw the menubar indicators.",
        "doc": "Start the keyboard layout watcher to draw the menubar indicators.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "188",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MenubarFlag:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:stop()",
        "desc": "Remove indicators and stop the keyboard layout watcher",
        "doc": "Remove indicators and stop the keyboard layout watcher\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "208",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MenubarFlag:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "MenubarFlag.allScreens",
        "desc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "doc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "22",
        "name": "allScreens",
        "signature": "MenubarFlag.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.colors",
        "desc": "Table that contains the configuration of indicator colors",
        "doc": "Table that contains the configuration of indicator colors\n\nNotes:\n * The table below indicates the colors to use for a given keyboard layout.\n * The index is the name of the layout as it appears in the input source menu.\n * The value of each indicator is a table made of an arbitrary number of segments, which will be distributed evenly across the width of the screen.\n * Each segment must be a valid `hs.drawing.color` specification (most commonly, you should just use the named colors from within the tables). If a layout is not found, then the indicators are removed when that layout is active.\n * Indicator specs can be static flag-like:\n```\n  Spanish = {col.green, col.white, col.red},\n  German = {col.black, col.red, col.yellow},\n```\nor complex, programmatically-generated:\n```\n[\"U.S.\"] = (\n   function() res={}\n      for i = 0,10,1 do\n         table.insert(res, col.blue)\n         table.insert(res, col.white)\n         table.insert(res, col.red)\n      end\n      return res\n   end)()\n```\nor solid colors:\n```\n  Spanish = {col.red},\n  German = {col.yellow},\n```\n * Contributions of indicator specs are welcome!",
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "42",
        "name": "colors",
        "notes": [
          " * The table below indicates the colors to use for a given keyboard layout.",
          " * The index is the name of the layout as it appears in the input source menu.",
          " * The value of each indicator is a table made of an arbitrary number of segments, which will be distributed evenly across the width of the screen.",
          " * Each segment must be a valid `hs.drawing.color` specification (most commonly, you should just use the named colors from within the tables). If a layout is not found, then the indicators are removed when that layout is active.",
          " * Indicator specs can be static flag-like:",
          "```",
          "  Spanish = {col.green, col.white, col.red},",
          "  German = {col.black, col.red, col.yellow},",
          "```",
          "or complex, programmatically-generated:",
          "```",
          "[\"U.S.\"] = (",
          "   function() res={}",
          "      for i = 0,10,1 do",
          "         table.insert(res, col.blue)",
          "         table.insert(res, col.white)",
          "         table.insert(res, col.red)",
          "      end",
          "      return res",
          "   end)()",
          "```",
          "or solid colors:",
          "```",
          "  Spanish = {col.red},",
          "  German = {col.yellow},",
          "```",
          " * Contributions of indicator specs are welcome!"
        ],
        "signature": "MenubarFlag.colors",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorAlpha",
        "desc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "doc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "32",
        "name": "indicatorAlpha",
        "signature": "MenubarFlag.indicatorAlpha",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorHeight",
        "desc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "doc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "27",
        "name": "indicatorHeight",
        "signature": "MenubarFlag.indicatorHeight",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorInAllSpaces",
        "desc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "doc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "37",
        "name": "indicatorInAllSpaces",
        "signature": "MenubarFlag.indicatorInAllSpaces",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.timerFreq",
        "desc": "Number to indicate how frequently (in seconds) should the menubar indicator be updated. Defaults to 1.0.",
        "doc": "Number to indicate how frequently (in seconds) should the menubar indicator be updated. Defaults to 1.0.\n\nNotes:\n * Sometimes Hammerspoon misses the callback when the keyboard layout changes. As a workaround, MenuBarFlag can automatically update the indicator at a fixed frequency.\n * The timer can be disabled by setting this parameter to 0.",
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "80",
        "name": "timerFreq",
        "notes": [
          " * Sometimes Hammerspoon misses the callback when the keyboard layout changes. As a workaround, MenuBarFlag can automatically update the indicator at a fixed frequency.",
          " * The timer can be disabled by setting this parameter to 0."
        ],
        "signature": "MenubarFlag.timerFreq",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Color the menubar according to the current keyboard layout",
    "doc": "Color the menubar according to the current keyboard layout\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag.spoon.zip)\n\nFunctionality inspired by [ShowyEdge](https://pqrs.org/osx/ShowyEdge/index.html.en)",
    "items": [
      {
        "def": "MenubarFlag.allScreens",
        "desc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "doc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "22",
        "name": "allScreens",
        "signature": "MenubarFlag.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.colors",
        "desc": "Table that contains the configuration of indicator colors",
        "doc": "Table that contains the configuration of indicator colors\n\nNotes:\n * The table below indicates the colors to use for a given keyboard layout.\n * The index is the name of the layout as it appears in the input source menu.\n * The value of each indicator is a table made of an arbitrary number of segments, which will be distributed evenly across the width of the screen.\n * Each segment must be a valid `hs.drawing.color` specification (most commonly, you should just use the named colors from within the tables). If a layout is not found, then the indicators are removed when that layout is active.\n * Indicator specs can be static flag-like:\n```\n  Spanish = {col.green, col.white, col.red},\n  German = {col.black, col.red, col.yellow},\n```\nor complex, programmatically-generated:\n```\n[\"U.S.\"] = (\n   function() res={}\n      for i = 0,10,1 do\n         table.insert(res, col.blue)\n         table.insert(res, col.white)\n         table.insert(res, col.red)\n      end\n      return res\n   end)()\n```\nor solid colors:\n```\n  Spanish = {col.red},\n  German = {col.yellow},\n```\n * Contributions of indicator specs are welcome!",
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "42",
        "name": "colors",
        "notes": [
          " * The table below indicates the colors to use for a given keyboard layout.",
          " * The index is the name of the layout as it appears in the input source menu.",
          " * The value of each indicator is a table made of an arbitrary number of segments, which will be distributed evenly across the width of the screen.",
          " * Each segment must be a valid `hs.drawing.color` specification (most commonly, you should just use the named colors from within the tables). If a layout is not found, then the indicators are removed when that layout is active.",
          " * Indicator specs can be static flag-like:",
          "```",
          "  Spanish = {col.green, col.white, col.red},",
          "  German = {col.black, col.red, col.yellow},",
          "```",
          "or complex, programmatically-generated:",
          "```",
          "[\"U.S.\"] = (",
          "   function() res={}",
          "      for i = 0,10,1 do",
          "         table.insert(res, col.blue)",
          "         table.insert(res, col.white)",
          "         table.insert(res, col.red)",
          "      end",
          "      return res",
          "   end)()",
          "```",
          "or solid colors:",
          "```",
          "  Spanish = {col.red},",
          "  German = {col.yellow},",
          "```",
          " * Contributions of indicator specs are welcome!"
        ],
        "signature": "MenubarFlag.colors",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag:drawIndicators(src)",
        "desc": "Draw the indicators corresponding to the given layout name",
        "doc": "Draw the indicators corresponding to the given layout name\n\nParameters:\n * src - name of the layout to draw. If the given element exists in `MenubarFlag.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen.\n\nReturns:\n * The MenubarFlag object",
        "examples": [],
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "118",
        "name": "drawIndicators",
        "notes": [],
        "parameters": [
          " * src - name of the layout to draw. If the given element exists in `MenubarFlag.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen."
        ],
        "returns": [
          " * The MenubarFlag object"
        ],
        "signature": "MenubarFlag:drawIndicators(src)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:getLayoutAndDrawindicators()",
        "desc": "Draw indicators for the current keyboard method or layout",
        "doc": "Draw indicators for the current keyboard method or layout\n\nParameters:\n * None\n\nReturns:\n * The MenubarFlag object",
        "examples": [],
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "175",
        "name": "getLayoutAndDrawindicators",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MenubarFlag object"
        ],
        "signature": "MenubarFlag:getLayoutAndDrawindicators()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag.indicatorAlpha",
        "desc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "doc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "32",
        "name": "indicatorAlpha",
        "signature": "MenubarFlag.indicatorAlpha",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorHeight",
        "desc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "doc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "27",
        "name": "indicatorHeight",
        "signature": "MenubarFlag.indicatorHeight",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorInAllSpaces",
        "desc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "doc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "37",
        "name": "indicatorInAllSpaces",
        "signature": "MenubarFlag.indicatorInAllSpaces",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag:start()",
        "desc": "Start the keyboard layout watcher to draw the menubar indicators.",
        "doc": "Start the keyboard layout watcher to draw the menubar indicators.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "188",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MenubarFlag:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:stop()",
        "desc": "Remove indicators and stop the keyboard layout watcher",
        "doc": "Remove indicators and stop the keyboard layout watcher\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "208",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MenubarFlag:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag.timerFreq",
        "desc": "Number to indicate how frequently (in seconds) should the menubar indicator be updated. Defaults to 1.0.",
        "doc": "Number to indicate how frequently (in seconds) should the menubar indicator be updated. Defaults to 1.0.\n\nNotes:\n * Sometimes Hammerspoon misses the callback when the keyboard layout changes. As a workaround, MenuBarFlag can automatically update the indicator at a fixed frequency.\n * The timer can be disabled by setting this parameter to 0.",
        "file": "Source/MenubarFlag.spoon/init.lua",
        "lineno": "80",
        "name": "timerFreq",
        "notes": [
          " * Sometimes Hammerspoon misses the callback when the keyboard layout changes. As a workaround, MenuBarFlag can automatically update the indicator at a fixed frequency.",
          " * The timer can be disabled by setting this parameter to 0."
        ],
        "signature": "MenubarFlag.timerFreq",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "MenubarFlag",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag.spoon.zip)\n\nFunctionality inspired by [ShowyEdge](https://pqrs.org/osx/ShowyEdge/index.html.en)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MicMute:bindHotkeys(mapping, latch_timeout)",
        "desc": "Binds hotkeys for MicMute",
        "doc": "Binds hotkeys for MicMute\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will cause the microphone mute status to be toggled. Hold for momentary, press quickly for toggle.\n * latch_timeout - Time in seconds to hold the hotkey before momentary mode takes over, in which the mute will be toggled again when hotkey is released. Latch if released before this time. 0.75 for 750 milliseconds is a good value.",
        "examples": [],
        "file": "Source/MicMute.spoon/init.lua",
        "lineno": "61",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * toggle - This will cause the microphone mute status to be toggled. Hold for momentary, press quickly for toggle.",
          " * latch_timeout - Time in seconds to hold the hotkey before momentary mode takes over, in which the mute will be toggled again when hotkey is released. Latch if released before this time. 0.75 for 750 milliseconds is a good value."
        ],
        "returns": [],
        "signature": "MicMute:bindHotkeys(mapping, latch_timeout)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MicMute:toggleMicMute()",
        "desc": "Toggle mic mute on/off",
        "doc": "Toggle mic mute on/off\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MicMute.spoon/init.lua",
        "lineno": "28",
        "name": "toggleMicMute",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MicMute:toggleMicMute()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Microphone Mute Toggle and status indicator",
    "doc": "Microphone Mute Toggle and status indicator\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MicMute.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MicMute.spoon.zip)",
    "items": [
      {
        "def": "MicMute:bindHotkeys(mapping, latch_timeout)",
        "desc": "Binds hotkeys for MicMute",
        "doc": "Binds hotkeys for MicMute\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will cause the microphone mute status to be toggled. Hold for momentary, press quickly for toggle.\n * latch_timeout - Time in seconds to hold the hotkey before momentary mode takes over, in which the mute will be toggled again when hotkey is released. Latch if released before this time. 0.75 for 750 milliseconds is a good value.",
        "examples": [],
        "file": "Source/MicMute.spoon/init.lua",
        "lineno": "61",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * toggle - This will cause the microphone mute status to be toggled. Hold for momentary, press quickly for toggle.",
          " * latch_timeout - Time in seconds to hold the hotkey before momentary mode takes over, in which the mute will be toggled again when hotkey is released. Latch if released before this time. 0.75 for 750 milliseconds is a good value."
        ],
        "returns": [],
        "signature": "MicMute:bindHotkeys(mapping, latch_timeout)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MicMute:toggleMicMute()",
        "desc": "Toggle mic mute on/off",
        "doc": "Toggle mic mute on/off\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MicMute.spoon/init.lua",
        "lineno": "28",
        "name": "toggleMicMute",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MicMute:toggleMicMute()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "MicMute",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MicMute.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MicMute.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MiroWindowsManager:bindHotkeys()",
        "desc": "Binds hotkeys for Miro's Windows Manager",
        "doc": "Binds hotkeys for Miro's Windows Manager\nParameters:\n * mapping - A table containing hotkey details for the following items:\n  * up: for the up action (usually {hyper, \"up\"})\n  * right: for the right action (usually {hyper, \"right\"})\n  * down: for the down action (usually {hyper, \"down\"})\n  * left: for the left action (usually {hyper, \"left\"})\n  * fullscreen: for the full-screen action (e.g. {hyper, \"f\"})\n\nExamples:\n * A configuration example can be:\n```\nlocal hyper = {\"ctrl\", \"alt\", \"cmd\"}\nspoon.MiroWindowsManager:bindHotkeys({\n  up = {hyper, \"up\"},\n  right = {hyper, \"right\"},\n  down = {hyper, \"down\"},\n  left = {hyper, \"left\"},\n  fullscreen = {hyper, \"f\"}\n})\n```",
        "examples": [
          " * A configuration example can be:",
          "```",
          "local hyper = {\"ctrl\", \"alt\", \"cmd\"}",
          "spoon.MiroWindowsManager:bindHotkeys({",
          "  up = {hyper, \"up\"},",
          "  right = {hyper, \"right\"},",
          "  down = {hyper, \"down\"},",
          "  left = {hyper, \"left\"},",
          "  fullscreen = {hyper, \"f\"}",
          "})",
          "```"
        ],
        "file": "Source/MiroWindowsManager.spoon/init.lua",
        "lineno": "144",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey details for the following items:\n   * up: for the up action (usually {hyper, \"up\"})\n   * right: for the right action (usually {hyper, \"right\"})\n   * down: for the down action (usually {hyper, \"down\"})\n   * left: for the left action (usually {hyper, \"left\"})\n   * fullscreen: for the full-screen action (e.g. {hyper, \"f\"})"
        ],
        "returns": [],
        "signature": "MiroWindowsManager:bindHotkeys()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "MiroWindowsManager.fullScreenSizes",
        "desc": "The sizes that the window can have in full-screen.",
        "doc": "The sizes that the window can have in full-screen.\n\nNotes:\n * The sizes are expressed as dividend of the entire screen's size.\n * For example `{1, 4/3, 2}` means that it can be 1/1 (hence full screen), 3/4 and 1/2 of the total screen's size",
        "file": "Source/MiroWindowsManager.spoon/init.lua",
        "lineno": "46",
        "name": "fullScreenSizes",
        "notes": [
          " * The sizes are expressed as dividend of the entire screen's size.",
          " * For example `{1, 4/3, 2}` means that it can be 1/1 (hence full screen), 3/4 and 1/2 of the total screen's size"
        ],
        "signature": "MiroWindowsManager.fullScreenSizes",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MiroWindowsManager.GRID",
        "desc": "The screen's size using `hs.grid.setGrid()` This parameter is used at the spoon's `:init()`",
        "doc": "The screen's size using `hs.grid.setGrid()` This parameter is used at the spoon's `:init()`",
        "file": "Source/MiroWindowsManager.spoon/init.lua",
        "lineno": "55",
        "name": "GRID",
        "signature": "MiroWindowsManager.GRID",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MiroWindowsManager.sizes",
        "desc": "The sizes that the window can have.",
        "doc": "The sizes that the window can have.\n\nNotes:\n * The sizes are expressed as dividend of the entire screen's size.\n * For example `{2, 3, 3/2}` means that it can be 1/2, 1/3 and 2/3 of the total screen's size",
        "file": "Source/MiroWindowsManager.spoon/init.lua",
        "lineno": "37",
        "name": "sizes",
        "notes": [
          " * The sizes are expressed as dividend of the entire screen's size.",
          " * For example `{2, 3, 3/2}` means that it can be 1/2, 1/3 and 2/3 of the total screen's size"
        ],
        "signature": "MiroWindowsManager.sizes",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "With this script you will be able to move the window in halves and in corners using your keyboard and mainly using arrows. You would also be able to resize them by thirds, quarters, or halves.",
    "doc": "With this script you will be able to move the window in halves and in corners using your keyboard and mainly using arrows. You would also be able to resize them by thirds, quarters, or halves.\n\nOfficial homepage for more info and documentation: [https://github.com/miromannino/miro-windows-manager](https://github.com/miromannino/miro-windows-manager)\n\nDownload: [https://github.com/miromannino/miro-windows-manager/raw/master/MiroWindowsManager.spoon.zip](https://github.com/miromannino/miro-windows-manager/raw/master/MiroWindowsManager.spoon.zip)\n",
    "items": [
      {
        "def": "MiroWindowsManager:bindHotkeys()",
        "desc": "Binds hotkeys for Miro's Windows Manager",
        "doc": "Binds hotkeys for Miro's Windows Manager\nParameters:\n * mapping - A table containing hotkey details for the following items:\n  * up: for the up action (usually {hyper, \"up\"})\n  * right: for the right action (usually {hyper, \"right\"})\n  * down: for the down action (usually {hyper, \"down\"})\n  * left: for the left action (usually {hyper, \"left\"})\n  * fullscreen: for the full-screen action (e.g. {hyper, \"f\"})\n\nExamples:\n * A configuration example can be:\n```\nlocal hyper = {\"ctrl\", \"alt\", \"cmd\"}\nspoon.MiroWindowsManager:bindHotkeys({\n  up = {hyper, \"up\"},\n  right = {hyper, \"right\"},\n  down = {hyper, \"down\"},\n  left = {hyper, \"left\"},\n  fullscreen = {hyper, \"f\"}\n})\n```",
        "examples": [
          " * A configuration example can be:",
          "```",
          "local hyper = {\"ctrl\", \"alt\", \"cmd\"}",
          "spoon.MiroWindowsManager:bindHotkeys({",
          "  up = {hyper, \"up\"},",
          "  right = {hyper, \"right\"},",
          "  down = {hyper, \"down\"},",
          "  left = {hyper, \"left\"},",
          "  fullscreen = {hyper, \"f\"}",
          "})",
          "```"
        ],
        "file": "Source/MiroWindowsManager.spoon/init.lua",
        "lineno": "144",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey details for the following items:\n   * up: for the up action (usually {hyper, \"up\"})\n   * right: for the right action (usually {hyper, \"right\"})\n   * down: for the down action (usually {hyper, \"down\"})\n   * left: for the left action (usually {hyper, \"left\"})\n   * fullscreen: for the full-screen action (e.g. {hyper, \"f\"})"
        ],
        "returns": [],
        "signature": "MiroWindowsManager:bindHotkeys()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MiroWindowsManager.fullScreenSizes",
        "desc": "The sizes that the window can have in full-screen.",
        "doc": "The sizes that the window can have in full-screen.\n\nNotes:\n * The sizes are expressed as dividend of the entire screen's size.\n * For example `{1, 4/3, 2}` means that it can be 1/1 (hence full screen), 3/4 and 1/2 of the total screen's size",
        "file": "Source/MiroWindowsManager.spoon/init.lua",
        "lineno": "46",
        "name": "fullScreenSizes",
        "notes": [
          " * The sizes are expressed as dividend of the entire screen's size.",
          " * For example `{1, 4/3, 2}` means that it can be 1/1 (hence full screen), 3/4 and 1/2 of the total screen's size"
        ],
        "signature": "MiroWindowsManager.fullScreenSizes",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MiroWindowsManager.GRID",
        "desc": "The screen's size using `hs.grid.setGrid()` This parameter is used at the spoon's `:init()`",
        "doc": "The screen's size using `hs.grid.setGrid()` This parameter is used at the spoon's `:init()`",
        "file": "Source/MiroWindowsManager.spoon/init.lua",
        "lineno": "55",
        "name": "GRID",
        "signature": "MiroWindowsManager.GRID",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MiroWindowsManager.sizes",
        "desc": "The sizes that the window can have.",
        "doc": "The sizes that the window can have.\n\nNotes:\n * The sizes are expressed as dividend of the entire screen's size.\n * For example `{2, 3, 3/2}` means that it can be 1/2, 1/3 and 2/3 of the total screen's size",
        "file": "Source/MiroWindowsManager.spoon/init.lua",
        "lineno": "37",
        "name": "sizes",
        "notes": [
          " * The sizes are expressed as dividend of the entire screen's size.",
          " * For example `{2, 3, 3/2}` means that it can be 1/2, 1/3 and 2/3 of the total screen's size"
        ],
        "signature": "MiroWindowsManager.sizes",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "MiroWindowsManager",
    "stripped_doc": "\nOfficial homepage for more info and documentation: [https://github.com/miromannino/miro-windows-manager](https://github.com/miromannino/miro-windows-manager)\n\nDownload: [https://github.com/miromannino/miro-windows-manager/raw/master/MiroWindowsManager.spoon.zip](https://github.com/miromannino/miro-windows-manager/raw/master/MiroWindowsManager.spoon.zip)\n",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "ModalMgr:activate(idList, [trayColor], [showKeys])",
        "desc": "Activate all modal environment in `idList`.",
        "doc": "Activate all modal environment in `idList`.\n\nParameters:\n * idList - An table specifying IDs of modal environments\n * trayColor - An optional string (e.g. #000000) specifying the color of modalTray, defaults to `nil`.\n * showKeys - A optional boolean value to show all available keybindings, defaults to `nil`.",
        "examples": [],
        "file": "Source/ModalMgr.spoon/init.lua",
        "lineno": "129",
        "name": "activate",
        "notes": [],
        "parameters": [
          " * idList - An table specifying IDs of modal environments",
          " * trayColor - An optional string (e.g. #000000) specifying the color of modalTray, defaults to `nil`.",
          " * showKeys - A optional boolean value to show all available keybindings, defaults to `nil`."
        ],
        "returns": [],
        "signature": "ModalMgr:activate(idList, [trayColor], [showKeys])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ModalMgr:deactivate(idList)",
        "desc": "Deactivate modal environments in `idList`.",
        "doc": "Deactivate modal environments in `idList`.\n\nParameters:\n * idList - An table specifying IDs of modal environments",
        "examples": [],
        "file": "Source/ModalMgr.spoon/init.lua",
        "lineno": "160",
        "name": "deactivate",
        "notes": [],
        "parameters": [
          " * idList - An table specifying IDs of modal environments"
        ],
        "returns": [],
        "signature": "ModalMgr:deactivate(idList)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ModalMgr:deactivateAll()",
        "desc": "Deactivate all active modal environments.",
        "doc": "Deactivate all active modal environments.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ModalMgr.spoon/init.lua",
        "lineno": "179",
        "name": "deactivateAll",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ModalMgr:deactivateAll()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ModalMgr:new(id)",
        "desc": "Create a new modal keybindings environment",
        "doc": "Create a new modal keybindings environment\n\nParameters:\n * id - A string specifying ID of new modal keybindings",
        "examples": [],
        "file": "Source/ModalMgr.spoon/init.lua",
        "lineno": "46",
        "name": "new",
        "notes": [],
        "parameters": [
          " * id - A string specifying ID of new modal keybindings"
        ],
        "returns": [],
        "signature": "ModalMgr:new(id)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ModalMgr:toggleCheatsheet([idList], [force])",
        "desc": "Toggle the cheatsheet display of current modal environments's keybindings.",
        "doc": "Toggle the cheatsheet display of current modal environments's keybindings.\n\nParameters:\n * iterList - An table specifying IDs of modal environments or active_list. Optional, defaults to all active environments.\n * force - A optional boolean value to force show cheatsheet, defaults to `nil` (automatically).",
        "examples": [],
        "file": "Source/ModalMgr.spoon/init.lua",
        "lineno": "57",
        "name": "toggleCheatsheet",
        "notes": [],
        "parameters": [
          " * iterList - An table specifying IDs of modal environments or active_list. Optional, defaults to all active environments.",
          " * force - A optional boolean value to force show cheatsheet, defaults to `nil` (automatically)."
        ],
        "returns": [],
        "signature": "ModalMgr:toggleCheatsheet([idList], [force])",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Modal keybindings environment management. Just an wrapper of `hs.hotkey.modal`.",
    "doc": "Modal keybindings environment management. Just an wrapper of `hs.hotkey.modal`.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ModalMgr.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ModalMgr.spoon.zip)",
    "items": [
      {
        "def": "ModalMgr:activate(idList, [trayColor], [showKeys])",
        "desc": "Activate all modal environment in `idList`.",
        "doc": "Activate all modal environment in `idList`.\n\nParameters:\n * idList - An table specifying IDs of modal environments\n * trayColor - An optional string (e.g. #000000) specifying the color of modalTray, defaults to `nil`.\n * showKeys - A optional boolean value to show all available keybindings, defaults to `nil`.",
        "examples": [],
        "file": "Source/ModalMgr.spoon/init.lua",
        "lineno": "129",
        "name": "activate",
        "notes": [],
        "parameters": [
          " * idList - An table specifying IDs of modal environments",
          " * trayColor - An optional string (e.g. #000000) specifying the color of modalTray, defaults to `nil`.",
          " * showKeys - A optional boolean value to show all available keybindings, defaults to `nil`."
        ],
        "returns": [],
        "signature": "ModalMgr:activate(idList, [trayColor], [showKeys])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ModalMgr:deactivate(idList)",
        "desc": "Deactivate modal environments in `idList`.",
        "doc": "Deactivate modal environments in `idList`.\n\nParameters:\n * idList - An table specifying IDs of modal environments",
        "examples": [],
        "file": "Source/ModalMgr.spoon/init.lua",
        "lineno": "160",
        "name": "deactivate",
        "notes": [],
        "parameters": [
          " * idList - An table specifying IDs of modal environments"
        ],
        "returns": [],
        "signature": "ModalMgr:deactivate(idList)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ModalMgr:deactivateAll()",
        "desc": "Deactivate all active modal environments.",
        "doc": "Deactivate all active modal environments.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ModalMgr.spoon/init.lua",
        "lineno": "179",
        "name": "deactivateAll",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ModalMgr:deactivateAll()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ModalMgr:new(id)",
        "desc": "Create a new modal keybindings environment",
        "doc": "Create a new modal keybindings environment\n\nParameters:\n * id - A string specifying ID of new modal keybindings",
        "examples": [],
        "file": "Source/ModalMgr.spoon/init.lua",
        "lineno": "46",
        "name": "new",
        "notes": [],
        "parameters": [
          " * id - A string specifying ID of new modal keybindings"
        ],
        "returns": [],
        "signature": "ModalMgr:new(id)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ModalMgr:toggleCheatsheet([idList], [force])",
        "desc": "Toggle the cheatsheet display of current modal environments's keybindings.",
        "doc": "Toggle the cheatsheet display of current modal environments's keybindings.\n\nParameters:\n * iterList - An table specifying IDs of modal environments or active_list. Optional, defaults to all active environments.\n * force - A optional boolean value to force show cheatsheet, defaults to `nil` (automatically).",
        "examples": [],
        "file": "Source/ModalMgr.spoon/init.lua",
        "lineno": "57",
        "name": "toggleCheatsheet",
        "notes": [],
        "parameters": [
          " * iterList - An table specifying IDs of modal environments or active_list. Optional, defaults to all active environments.",
          " * force - A optional boolean value to force show cheatsheet, defaults to `nil` (automatically)."
        ],
        "returns": [],
        "signature": "ModalMgr:toggleCheatsheet([idList], [force])",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "ModalMgr",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ModalMgr.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ModalMgr.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MountedVolumes:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for MountedVolumes",
        "doc": "Binds hotkeys for MountedVolumes\n\nParameters:\n * `mapping` - A table containing hotkey modifier/key details for one or more of the following commands:\n   * \"show\"   - Show the volume list\n   * \"hide\"   - Hide the volume list\n   * \"toggle\" - If the volume list is visible then hide it; otherwise show the list.\n\nReturns:\n * None\n\nNotes:\n * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:\n   * `command`   - is one of the commands listed above\n   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`\n   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`",
        "examples": [],
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "311",
        "name": "bindHotkeys",
        "notes": [
          " * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:",
          "   * `command`   - is one of the commands listed above",
          "   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`",
          "   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`"
        ],
        "parameters": [
          " * `mapping` - A table containing hotkey modifier/key details for one or more of the following commands:\n   * \"show\"   - Show the volume list\n   * \"hide\"   - Hide the volume list\n   * \"toggle\" - If the volume list is visible then hide it; otherwise show the list."
        ],
        "returns": [
          " * None"
        ],
        "signature": "MountedVolumes:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MountedVolumes:hide()",
        "desc": "Hide the volumes panel on the background and stop watching for volume changes",
        "doc": "Hide the volumes panel on the background and stop watching for volume changes\n\nParameters:\n * None\n\nReturns:\n * The MountedVolumes object",
        "examples": [],
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "290",
        "name": "hide",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MountedVolumes object"
        ],
        "signature": "MountedVolumes:hide()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MountedVolumes:show()",
        "desc": "Display the volumes panel on the background and update it as volumes are mounted and unmounted.",
        "doc": "Display the volumes panel on the background and update it as volumes are mounted and unmounted.\n\nParameters:\n * None\n\nReturns:\n * The MountedVolumes object\n\nNotes:\n * If you make a change to any of the variables defining the visual appearance of the volume list, you can force the change to take immediate effect by invoking this method, even if the volume list is already being displayed.",
        "examples": [],
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "268",
        "name": "show",
        "notes": [
          " * If you make a change to any of the variables defining the visual appearance of the volume list, you can force the change to take immediate effect by invoking this method, even if the volume list is already being displayed."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MountedVolumes object"
        ],
        "signature": "MountedVolumes:show()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "MountedVolumes.backgroundBorder",
        "desc": "A table, as defined in `hs.drawing.color`, specifying the color of the volume lists border. Defaults to `{ alpha = .5 }`",
        "doc": "A table, as defined in `hs.drawing.color`, specifying the color of the volume lists border. Defaults to `{ alpha = .5 }`\n\nChanges will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "254",
        "name": "backgroundBorder",
        "signature": "MountedVolumes.backgroundBorder",
        "stripped_doc": "Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.backgroundColor",
        "desc": "A table, as defined in `hs.drawing.color`, specifying the color of the volume lists background. Defaults to `{ alpha = .7, white = .5 }`",
        "doc": "A table, as defined in `hs.drawing.color`, specifying the color of the volume lists background. Defaults to `{ alpha = .7, white = .5 }`\n\nChanges will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "247",
        "name": "backgroundColor",
        "signature": "MountedVolumes.backgroundColor",
        "stripped_doc": "Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.capacityColor",
        "desc": "A table, as defined in `hs.drawing.color`, specifying the color to use for the in use portion of the volume's capacity pie chart. Defaults to `hs.drawing.color.x11.orangered`",
        "doc": "A table, as defined in `hs.drawing.color`, specifying the color to use for the in use portion of the volume's capacity pie chart. Defaults to `hs.drawing.color.x11.orangered`\n\nNotes:\n * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "206",
        "name": "capacityColor",
        "notes": [
          " * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first."
        ],
        "signature": "MountedVolumes.capacityColor",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.checkInterval",
        "desc": "A number, default 120, specifying how often in seconds the free space on mounted volumes should be polled for current usage data.",
        "doc": "A number, default 120, specifying how often in seconds the free space on mounted volumes should be polled for current usage data.\n\nChanges will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "240",
        "name": "checkInterval",
        "signature": "MountedVolumes.checkInterval",
        "stripped_doc": "Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.cornerRadius",
        "desc": "A number, default 5, specifying how rounded the corners of the volume list background should be.",
        "doc": "A number, default 5, specifying how rounded the corners of the volume list background should be.\n\nChanges will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "261",
        "name": "cornerRadius",
        "signature": "MountedVolumes.cornerRadius",
        "stripped_doc": "Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.enableEjectButton",
        "desc": "A boolean, default true, indicating whether the eject button displayed next to removable volumes is enabled.",
        "doc": "A boolean, default true, indicating whether the eject button displayed next to removable volumes is enabled.\n\nNotes:\n * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "198",
        "name": "enableEjectButton",
        "notes": [
          " * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first."
        ],
        "signature": "MountedVolumes.enableEjectButton",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.freeColor",
        "desc": "A table, as defined in `hs.drawing.color`, specifying the color to use for the free portion of the volume's capacity pie chart. Defaults to `hs.drawing.color.x11.mediumspringgreen`",
        "doc": "A table, as defined in `hs.drawing.color`, specifying the color to use for the free portion of the volume's capacity pie chart. Defaults to `hs.drawing.color.x11.mediumspringgreen`\n\nNotes:\n * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "214",
        "name": "freeColor",
        "notes": [
          " * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first."
        ],
        "signature": "MountedVolumes.freeColor",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.growsDownwards",
        "desc": "A boolean, default true, indicating whether the displayed list grows downwards or upwards as more volumes are mounted.",
        "doc": "A boolean, default true, indicating whether the displayed list grows downwards or upwards as more volumes are mounted.\n\nNotes:\n * Note that if this value is true, then `MountedVolumes.location` specifies the upper left corner of the display.  If this value is false, then `MountedVolumes.location` specifies the bottom left corner of the display.\n * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "231",
        "name": "growsDownwards",
        "notes": [
          " * Note that if this value is true, then `MountedVolumes.location` specifies the upper left corner of the display.  If this value is false, then `MountedVolumes.location` specifies the bottom left corner of the display.",
          " * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first."
        ],
        "signature": "MountedVolumes.growsDownwards",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.location",
        "desc": "A table specifying the location on the screen of the starting corner of the display. Defaults to `{ x = 20, y = 22 }`.",
        "doc": "A table specifying the location on the screen of the starting corner of the display. Defaults to `{ x = 20, y = 22 }`.\n\nNotes:\n * See also `MountedValues.growsDownwards`.\n * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "222",
        "name": "location",
        "notes": [
          " * See also `MountedValues.growsDownwards`.",
          " * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first."
        ],
        "signature": "MountedVolumes.location",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.textStyle",
        "desc": "A table specifying the style as defined in `hs.styledtext` to display the volume name and usage details with. Defaults to:",
        "doc": "A table specifying the style as defined in `hs.styledtext` to display the volume name and usage details with. Defaults to:\n\nNotes:\n *   {\n        font = { name = \"Menlo\", size = 10 },\n        color = { alpha = 1.0 },\n        paragraphStyle = { alignment = \"center\" },\n    }\n * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "181",
        "name": "textStyle",
        "notes": [
          " *   {",
          "        font = { name = \"Menlo\", size = 10 },",
          "        color = { alpha = 1.0 },",
          "        paragraphStyle = { alignment = \"center\" },",
          "    }",
          " * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first."
        ],
        "signature": "MountedVolumes.textStyle",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.unitsInSI",
        "desc": "Boolean, default false, indicating whether capacity is displayed in SI units (1 GB = 10^9 bytes) or Gibibytes (1 GiB = 2^30 bytes).",
        "doc": "Boolean, default false, indicating whether capacity is displayed in SI units (1 GB = 10^9 bytes) or Gibibytes (1 GiB = 2^30 bytes).\n\nChanges will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "174",
        "name": "unitsInSI",
        "signature": "MountedVolumes.unitsInSI",
        "stripped_doc": "Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "type": "Variable"
      }
    ],
    "desc": "Displays a list of mounted volumes and a pie chart for each indicating free space on the desktop",
    "doc": "Displays a list of mounted volumes and a pie chart for each indicating free space on the desktop\n\nDownload: https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MountedVolumes.spoon.zip",
    "items": [
      {
        "def": "MountedVolumes.backgroundBorder",
        "desc": "A table, as defined in `hs.drawing.color`, specifying the color of the volume lists border. Defaults to `{ alpha = .5 }`",
        "doc": "A table, as defined in `hs.drawing.color`, specifying the color of the volume lists border. Defaults to `{ alpha = .5 }`\n\nChanges will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "254",
        "name": "backgroundBorder",
        "signature": "MountedVolumes.backgroundBorder",
        "stripped_doc": "Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.backgroundColor",
        "desc": "A table, as defined in `hs.drawing.color`, specifying the color of the volume lists background. Defaults to `{ alpha = .7, white = .5 }`",
        "doc": "A table, as defined in `hs.drawing.color`, specifying the color of the volume lists background. Defaults to `{ alpha = .7, white = .5 }`\n\nChanges will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "247",
        "name": "backgroundColor",
        "signature": "MountedVolumes.backgroundColor",
        "stripped_doc": "Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for MountedVolumes",
        "doc": "Binds hotkeys for MountedVolumes\n\nParameters:\n * `mapping` - A table containing hotkey modifier/key details for one or more of the following commands:\n   * \"show\"   - Show the volume list\n   * \"hide\"   - Hide the volume list\n   * \"toggle\" - If the volume list is visible then hide it; otherwise show the list.\n\nReturns:\n * None\n\nNotes:\n * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:\n   * `command`   - is one of the commands listed above\n   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`\n   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`",
        "examples": [],
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "311",
        "name": "bindHotkeys",
        "notes": [
          " * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:",
          "   * `command`   - is one of the commands listed above",
          "   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`",
          "   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`"
        ],
        "parameters": [
          " * `mapping` - A table containing hotkey modifier/key details for one or more of the following commands:\n   * \"show\"   - Show the volume list\n   * \"hide\"   - Hide the volume list\n   * \"toggle\" - If the volume list is visible then hide it; otherwise show the list."
        ],
        "returns": [
          " * None"
        ],
        "signature": "MountedVolumes:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MountedVolumes.capacityColor",
        "desc": "A table, as defined in `hs.drawing.color`, specifying the color to use for the in use portion of the volume's capacity pie chart. Defaults to `hs.drawing.color.x11.orangered`",
        "doc": "A table, as defined in `hs.drawing.color`, specifying the color to use for the in use portion of the volume's capacity pie chart. Defaults to `hs.drawing.color.x11.orangered`\n\nNotes:\n * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "206",
        "name": "capacityColor",
        "notes": [
          " * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first."
        ],
        "signature": "MountedVolumes.capacityColor",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.checkInterval",
        "desc": "A number, default 120, specifying how often in seconds the free space on mounted volumes should be polled for current usage data.",
        "doc": "A number, default 120, specifying how often in seconds the free space on mounted volumes should be polled for current usage data.\n\nChanges will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "240",
        "name": "checkInterval",
        "signature": "MountedVolumes.checkInterval",
        "stripped_doc": "Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.cornerRadius",
        "desc": "A number, default 5, specifying how rounded the corners of the volume list background should be.",
        "doc": "A number, default 5, specifying how rounded the corners of the volume list background should be.\n\nChanges will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "261",
        "name": "cornerRadius",
        "signature": "MountedVolumes.cornerRadius",
        "stripped_doc": "Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.enableEjectButton",
        "desc": "A boolean, default true, indicating whether the eject button displayed next to removable volumes is enabled.",
        "doc": "A boolean, default true, indicating whether the eject button displayed next to removable volumes is enabled.\n\nNotes:\n * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "198",
        "name": "enableEjectButton",
        "notes": [
          " * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first."
        ],
        "signature": "MountedVolumes.enableEjectButton",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.freeColor",
        "desc": "A table, as defined in `hs.drawing.color`, specifying the color to use for the free portion of the volume's capacity pie chart. Defaults to `hs.drawing.color.x11.mediumspringgreen`",
        "doc": "A table, as defined in `hs.drawing.color`, specifying the color to use for the free portion of the volume's capacity pie chart. Defaults to `hs.drawing.color.x11.mediumspringgreen`\n\nNotes:\n * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "214",
        "name": "freeColor",
        "notes": [
          " * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first."
        ],
        "signature": "MountedVolumes.freeColor",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.growsDownwards",
        "desc": "A boolean, default true, indicating whether the displayed list grows downwards or upwards as more volumes are mounted.",
        "doc": "A boolean, default true, indicating whether the displayed list grows downwards or upwards as more volumes are mounted.\n\nNotes:\n * Note that if this value is true, then `MountedVolumes.location` specifies the upper left corner of the display.  If this value is false, then `MountedVolumes.location` specifies the bottom left corner of the display.\n * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "231",
        "name": "growsDownwards",
        "notes": [
          " * Note that if this value is true, then `MountedVolumes.location` specifies the upper left corner of the display.  If this value is false, then `MountedVolumes.location` specifies the bottom left corner of the display.",
          " * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first."
        ],
        "signature": "MountedVolumes.growsDownwards",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes:hide()",
        "desc": "Hide the volumes panel on the background and stop watching for volume changes",
        "doc": "Hide the volumes panel on the background and stop watching for volume changes\n\nParameters:\n * None\n\nReturns:\n * The MountedVolumes object",
        "examples": [],
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "290",
        "name": "hide",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MountedVolumes object"
        ],
        "signature": "MountedVolumes:hide()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MountedVolumes.location",
        "desc": "A table specifying the location on the screen of the starting corner of the display. Defaults to `{ x = 20, y = 22 }`.",
        "doc": "A table specifying the location on the screen of the starting corner of the display. Defaults to `{ x = 20, y = 22 }`.\n\nNotes:\n * See also `MountedValues.growsDownwards`.\n * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "222",
        "name": "location",
        "notes": [
          " * See also `MountedValues.growsDownwards`.",
          " * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first."
        ],
        "signature": "MountedVolumes.location",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes:show()",
        "desc": "Display the volumes panel on the background and update it as volumes are mounted and unmounted.",
        "doc": "Display the volumes panel on the background and update it as volumes are mounted and unmounted.\n\nParameters:\n * None\n\nReturns:\n * The MountedVolumes object\n\nNotes:\n * If you make a change to any of the variables defining the visual appearance of the volume list, you can force the change to take immediate effect by invoking this method, even if the volume list is already being displayed.",
        "examples": [],
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "268",
        "name": "show",
        "notes": [
          " * If you make a change to any of the variables defining the visual appearance of the volume list, you can force the change to take immediate effect by invoking this method, even if the volume list is already being displayed."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MountedVolumes object"
        ],
        "signature": "MountedVolumes:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MountedVolumes.textStyle",
        "desc": "A table specifying the style as defined in `hs.styledtext` to display the volume name and usage details with. Defaults to:",
        "doc": "A table specifying the style as defined in `hs.styledtext` to display the volume name and usage details with. Defaults to:\n\nNotes:\n *   {\n        font = { name = \"Menlo\", size = 10 },\n        color = { alpha = 1.0 },\n        paragraphStyle = { alignment = \"center\" },\n    }\n * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "181",
        "name": "textStyle",
        "notes": [
          " *   {",
          "        font = { name = \"Menlo\", size = 10 },",
          "        color = { alpha = 1.0 },",
          "        paragraphStyle = { alignment = \"center\" },",
          "    }",
          " * Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first."
        ],
        "signature": "MountedVolumes.textStyle",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MountedVolumes.unitsInSI",
        "desc": "Boolean, default false, indicating whether capacity is displayed in SI units (1 GB = 10^9 bytes) or Gibibytes (1 GiB = 2^30 bytes).",
        "doc": "Boolean, default false, indicating whether capacity is displayed in SI units (1 GB = 10^9 bytes) or Gibibytes (1 GiB = 2^30 bytes).\n\nChanges will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "file": "Source/MountedVolumes.spoon/init.lua",
        "lineno": "174",
        "name": "unitsInSI",
        "signature": "MountedVolumes.unitsInSI",
        "stripped_doc": "Changes will take effect when the next volume change occurs, when the next usage check occurs (see `MountedVolumes.checkInterval`), or when `MountedVolumes:show` is invoked, whichever occurs first.",
        "type": "Variable"
      }
    ],
    "name": "MountedVolumes",
    "stripped_doc": "\nDownload: https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MountedVolumes.spoon.zip",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MouseCircle:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for MouseCircle",
        "doc": "Binds hotkeys for MouseCircle\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will cause the mouse circle to be drawn",
        "examples": [],
        "file": "Source/MouseCircle.spoon/init.lua",
        "lineno": "26",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * show - This will cause the mouse circle to be drawn"
        ],
        "returns": [],
        "signature": "MouseCircle:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseCircle:show()",
        "desc": "Draws a circle around the mouse",
        "doc": "Draws a circle around the mouse\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/MouseCircle.spoon/init.lua",
        "lineno": "44",
        "name": "show",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "MouseCircle:show()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "MouseCircle.color",
        "desc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "doc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "file": "Source/MouseCircle.spoon/init.lua",
        "lineno": "21",
        "name": "color",
        "signature": "MouseCircle.color",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Draws a circle around the mouse pointer when a hotkey is pressed",
    "doc": "Draws a circle around the mouse pointer when a hotkey is pressed\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip)",
    "items": [
      {
        "def": "MouseCircle:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for MouseCircle",
        "doc": "Binds hotkeys for MouseCircle\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will cause the mouse circle to be drawn",
        "examples": [],
        "file": "Source/MouseCircle.spoon/init.lua",
        "lineno": "26",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * show - This will cause the mouse circle to be drawn"
        ],
        "returns": [],
        "signature": "MouseCircle:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseCircle.color",
        "desc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "doc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "file": "Source/MouseCircle.spoon/init.lua",
        "lineno": "21",
        "name": "color",
        "signature": "MouseCircle.color",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MouseCircle:show()",
        "desc": "Draws a circle around the mouse",
        "doc": "Draws a circle around the mouse\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/MouseCircle.spoon/init.lua",
        "lineno": "44",
        "name": "show",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "MouseCircle:show()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "MouseCircle",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MouseFollowsFocus:configure(configuration)",
        "desc": "Configures the spoon.  There is currently nothing to configure.",
        "doc": "Configures the spoon.  There is currently nothing to configure.\n\nParameters:\n * configuration - :",
        "examples": [],
        "file": "Source/MouseFollowsFocus.spoon/init.lua",
        "lineno": "26",
        "name": "configure",
        "notes": [],
        "parameters": [
          " * configuration - :"
        ],
        "returns": [],
        "signature": "MouseFollowsFocus:configure(configuration)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseFollowsFocus:start()",
        "desc": "Starts updating the mouse position when window focus changes",
        "doc": "Starts updating the mouse position when window focus changes\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MouseFollowsFocus.spoon/init.lua",
        "lineno": "35",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MouseFollowsFocus:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseFollowsFocus:stop()",
        "desc": "Stops updating the mouse position when window focus changes",
        "doc": "Stops updating the mouse position when window focus changes\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MouseFollowsFocus.spoon/init.lua",
        "lineno": "61",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MouseFollowsFocus:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseFollowsFocus:updateMouse(window)",
        "desc": "Moves the mouse to the center of the given window unless it's already inside the window",
        "doc": "Moves the mouse to the center of the given window unless it's already inside the window\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MouseFollowsFocus.spoon/init.lua",
        "lineno": "72",
        "name": "updateMouse",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MouseFollowsFocus:updateMouse(window)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "MouseFollowsFocus.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/MouseFollowsFocus.spoon/init.lua",
        "lineno": "21",
        "name": "logger",
        "signature": "MouseFollowsFocus.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Set the mouse pointer to the center of the focused window whenever focus changes.",
    "doc": "Set the mouse pointer to the center of the focused window whenever focus changes.\n\nAdditionally, if focused window moves when no mouse buttons are pressed, set the\nmouse pointer to the new center.  This is intended to work with other utilities\nwhich warp the focused window.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseFollowsFocus.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseFollowsFocus.spoon.zip)",
    "items": [
      {
        "def": "MouseFollowsFocus:configure(configuration)",
        "desc": "Configures the spoon.  There is currently nothing to configure.",
        "doc": "Configures the spoon.  There is currently nothing to configure.\n\nParameters:\n * configuration - :",
        "examples": [],
        "file": "Source/MouseFollowsFocus.spoon/init.lua",
        "lineno": "26",
        "name": "configure",
        "notes": [],
        "parameters": [
          " * configuration - :"
        ],
        "returns": [],
        "signature": "MouseFollowsFocus:configure(configuration)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseFollowsFocus.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/MouseFollowsFocus.spoon/init.lua",
        "lineno": "21",
        "name": "logger",
        "signature": "MouseFollowsFocus.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MouseFollowsFocus:start()",
        "desc": "Starts updating the mouse position when window focus changes",
        "doc": "Starts updating the mouse position when window focus changes\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MouseFollowsFocus.spoon/init.lua",
        "lineno": "35",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MouseFollowsFocus:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseFollowsFocus:stop()",
        "desc": "Stops updating the mouse position when window focus changes",
        "doc": "Stops updating the mouse position when window focus changes\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MouseFollowsFocus.spoon/init.lua",
        "lineno": "61",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MouseFollowsFocus:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseFollowsFocus:updateMouse(window)",
        "desc": "Moves the mouse to the center of the given window unless it's already inside the window",
        "doc": "Moves the mouse to the center of the given window unless it's already inside the window\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MouseFollowsFocus.spoon/init.lua",
        "lineno": "72",
        "name": "updateMouse",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MouseFollowsFocus:updateMouse(window)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "MouseFollowsFocus",
    "stripped_doc": "\nAdditionally, if focused window moves when no mouse buttons are pressed, set the\nmouse pointer to the new center.  This is intended to work with other utilities\nwhich warp the focused window.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseFollowsFocus.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseFollowsFocus.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "Move window to the space to the right or left",
    "doc": "Move window to the space to the right or left\n\nMuch of the code was written by Szymon Kaliski <hi@szymonkaliski.com>, converted to spoon by Tyler Thrailkill <tyler.b.thrailkill@gmail.com>\n\nhttps://github.com/snowe2010",
    "items": [],
    "name": "MoveSpaces",
    "stripped_doc": "\nMuch of the code was written by Szymon Kaliski <hi@szymonkaliski.com>, converted to spoon by Tyler Thrailkill <tyler.b.thrailkill@gmail.com>\n\nhttps://github.com/snowe2010",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MusicAppMediaFix:start()",
        "desc": "Starts the hs.eventtap that powers this Spoon",
        "doc": "Starts the hs.eventtap that powers this Spoon\n\nParameters:\n * None\n\nReturns:\n * The MusicAppMediaFix object",
        "examples": [],
        "file": "Source/MusicAppMediaFix.spoon/init.lua",
        "lineno": "54",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MusicAppMediaFix object"
        ],
        "signature": "MusicAppMediaFix:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MusicAppMediaFix:stop()",
        "desc": "Stops the hs.eventtap that powers this Spoon",
        "doc": "Stops the hs.eventtap that powers this Spoon\n\nParameters:\n * None\n\nReturns:\n * The MusicAppMediaFix object",
        "examples": [],
        "file": "Source/MusicAppMediaFix.spoon/init.lua",
        "lineno": "70",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MusicAppMediaFix object"
        ],
        "signature": "MusicAppMediaFix:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Override macOS behaviour and send all media keys (play/prev/next) to Music.app",
    "doc": "Override macOS behaviour and send all media keys (play/prev/next) to Music.app",
    "items": [
      {
        "def": "MusicAppMediaFix:start()",
        "desc": "Starts the hs.eventtap that powers this Spoon",
        "doc": "Starts the hs.eventtap that powers this Spoon\n\nParameters:\n * None\n\nReturns:\n * The MusicAppMediaFix object",
        "examples": [],
        "file": "Source/MusicAppMediaFix.spoon/init.lua",
        "lineno": "54",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MusicAppMediaFix object"
        ],
        "signature": "MusicAppMediaFix:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MusicAppMediaFix:stop()",
        "desc": "Stops the hs.eventtap that powers this Spoon",
        "doc": "Stops the hs.eventtap that powers this Spoon\n\nParameters:\n * None\n\nReturns:\n * The MusicAppMediaFix object",
        "examples": [],
        "file": "Source/MusicAppMediaFix.spoon/init.lua",
        "lineno": "70",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MusicAppMediaFix object"
        ],
        "signature": "MusicAppMediaFix:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "MusicAppMediaFix",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [
      {
        "def": "OBS.eventSubscriptionValues",
        "desc": "A table of the possible values for the `eventSubscriptions` parameter to [OBS:init()](#init)",
        "doc": "A table of the possible values for the `eventSubscriptions` parameter to [OBS:init()](#init)\n\nNotes:\n * The keys are:\n   * `None` - No events\n   * `General` - General events\n   * `Config` - Configuration events\n   * `Scenes` - Scene events\n   * `Inputs` - Input events\n   * `Transitions` - Transition events\n   * `Filters` - Filter events\n   * `Outputs` - Output events\n   * `SceneItems` - Scene item events\n   * `MediaInputs` - Media input events\n   * `Vendors` - Vendor events\n   * `UI` - UI events\n   * `All` - All of the above events\n   * `InputVolumeMeters` - Input volume meter events\n   * `InputActiveStateChanged` - Input active state changed events\n   * `InputShowStateChanged` - Input show state changed events\n   * `SceneItemTransformChanged` - Scene item transform changed events\n * For more information about these event categories and the events they contain, see the [obs-websocket documentation](https://github.com/obsproject/obs-websocket/blob/master/docs/generated/protocol.md#events)\n * To combine these as a bitmask, use boolean operators, e.g. `OBS.eventSubscriptionValues.General | OBS.eventSubscriptionValues.Scenes`\n * The final four values are considered \"high volume\" events, so are not included in `OBS.eventSubscriptionValues.All` by default",
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "58",
        "name": "eventSubscriptionValues",
        "notes": [
          " * The keys are:",
          "   * `None` - No events",
          "   * `General` - General events",
          "   * `Config` - Configuration events",
          "   * `Scenes` - Scene events",
          "   * `Inputs` - Input events",
          "   * `Transitions` - Transition events",
          "   * `Filters` - Filter events",
          "   * `Outputs` - Output events",
          "   * `SceneItems` - Scene item events",
          "   * `MediaInputs` - Media input events",
          "   * `Vendors` - Vendor events",
          "   * `UI` - UI events",
          "   * `All` - All of the above events",
          "   * `InputVolumeMeters` - Input volume meter events",
          "   * `InputActiveStateChanged` - Input active state changed events",
          "   * `InputShowStateChanged` - Input show state changed events",
          "   * `SceneItemTransformChanged` - Scene item transform changed events",
          " * For more information about these event categories and the events they contain, see the [obs-websocket documentation](https://github.com/obsproject/obs-websocket/blob/master/docs/generated/protocol.md#events)",
          " * To combine these as a bitmask, use boolean operators, e.g. `OBS.eventSubscriptionValues.General | OBS.eventSubscriptionValues.Scenes`",
          " * The final four values are considered \"high volume\" events, so are not included in `OBS.eventSubscriptionValues.All` by default"
        ],
        "signature": "OBS.eventSubscriptionValues",
        "stripped_doc": "",
        "type": "Constant"
      }
    ],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "OBS:addEventSubsciption(event)",
        "desc": "Adds an event subscription",
        "doc": "Adds an event subscription\n\nParameters:\n * `event` - The event to subscribe to, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)\n\nReturns:\n * None\n\nNotes:\n * If you wish to add multiple event subscriptions you can use the `|` operator to combine them, e.g. `spoon.OBS:addEventSubscription(spoon.OBS.eventSubscriptionValues.Config | spoon.OBS.eventSubscriptionValues.Scenes)`",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "309",
        "name": "addEventSubsciption",
        "notes": [
          " * If you wish to add multiple event subscriptions you can use the `|` operator to combine them, e.g. `spoon.OBS:addEventSubscription(spoon.OBS.eventSubscriptionValues.Config | spoon.OBS.eventSubscriptionValues.Scenes)`"
        ],
        "parameters": [
          " * `event` - The event to subscribe to, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)"
        ],
        "returns": [
          " * None"
        ],
        "signature": "OBS:addEventSubsciption(event)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "OBS:init(eventCallback, host, port[, password, eventSubscriptions])",
        "desc": "Initialisation method",
        "doc": "Initialisation method\n\nParameters:\n * `eventCallback` - A function to be called when an event is received from OBS. The function will be passed a table containing the event data. The keys of the table are:\n   * `eventType` - The type of event, e.g. `StudioModeStateChanged`\n   * `eventIntent` - The event subscription value that caused this event to be sent, e.g. `OBS.eventSubscriptionValues.General`\n   * `eventData` - A table containing the event data, e.g. `{ \"studioModeEnabled\": true }`\n * `host` - The hostname or IP address of the machine running OBS\n * `port` - The port number that obs-websocket is listening on\n * `password` - An optional password string that obs-websocket is configured to use\n * `eventSubscriptions` - An optional number containing the bitmask of the events to subscribe to, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)\n\nReturns:\n * None\n\nNotes:\n * This method does not connect to OBS, it just sets up the connection parameters for later use\n * By default, no events are subscribed to, so you will need to set `eventSubscriptions` to something useful if you want to receive events\n * If you do not wish to supply an `eventCallback`, pass `nil` instead\n * The events that OBS can produce are documented in the [obs-websocket documentation](https://github.com/obsproject/obs-websocket/blob/master/docs/generated/protocol.md#events)\n * There are some additional values for `eventType`, specific to this Spoon:\n   * `SpoonOBSConnected` - This event is sent when the websocket connection to OBS is established. All other fields will be `nil`.\n   * `SpoonOBSDisconnected` - This event is sent when the websocket connection to OBS is lost. All other fields will be nil. Return false to inhibit automatic reconnection.\n   * `SpoonRequestResponse` - This event is sent to pass replies to requests made via [OBS:request()](#request). Its `eventIntent` will be nil and the format of its `eventData` table will be:\n     * `requestId` - The ID of the request that this is a reply to\n     * `requestType` - The request type that was made\n     * `requestStatus` - A table containing:\n       * `result` - A bool, `true` if the request succeeded, otherwise `false`\n       * `code` - A number containing the response code\n       * `comment` - An optional string that may contain additional information about the response\n     * `responseData` - An table that contains the response data, if any\n   * `SpoonBatchRequestResponse` - This event is sent to pass replies to batch requests made via [OBS:requestBatch()](#requestBatch). Its `eventIntent` will be nil and the format of its `eventData` table will be:\n     * `requestId` - The ID of the request batch that this is a reply to\n     * `results` - A table containing the results of each request in the batch. Each entry in the table will be a table with the same format as `SpoonRequestResponse`",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "117",
        "name": "init",
        "notes": [
          " * This method does not connect to OBS, it just sets up the connection parameters for later use",
          " * By default, no events are subscribed to, so you will need to set `eventSubscriptions` to something useful if you want to receive events",
          " * If you do not wish to supply an `eventCallback`, pass `nil` instead",
          " * The events that OBS can produce are documented in the [obs-websocket documentation](https://github.com/obsproject/obs-websocket/blob/master/docs/generated/protocol.md#events)",
          " * There are some additional values for `eventType`, specific to this Spoon:",
          "   * `SpoonOBSConnected` - This event is sent when the websocket connection to OBS is established. All other fields will be `nil`.",
          "   * `SpoonOBSDisconnected` - This event is sent when the websocket connection to OBS is lost. All other fields will be nil. Return false to inhibit automatic reconnection.",
          "   * `SpoonRequestResponse` - This event is sent to pass replies to requests made via [OBS:request()](#request). Its `eventIntent` will be nil and the format of its `eventData` table will be:",
          "     * `requestId` - The ID of the request that this is a reply to",
          "     * `requestType` - The request type that was made",
          "     * `requestStatus` - A table containing:",
          "       * `result` - A bool, `true` if the request succeeded, otherwise `false`",
          "       * `code` - A number containing the response code",
          "       * `comment` - An optional string that may contain additional information about the response",
          "     * `responseData` - An table that contains the response data, if any",
          "   * `SpoonBatchRequestResponse` - This event is sent to pass replies to batch requests made via [OBS:requestBatch()](#requestBatch). Its `eventIntent` will be nil and the format of its `eventData` table will be:",
          "     * `requestId` - The ID of the request batch that this is a reply to",
          "     * `results` - A table containing the results of each request in the batch. Each entry in the table will be a table with the same format as `SpoonRequestResponse`"
        ],
        "parameters": [
          " * `eventCallback` - A function to be called when an event is received from OBS. The function will be passed a table containing the event data. The keys of the table are:\n   * `eventType` - The type of event, e.g. `StudioModeStateChanged`\n   * `eventIntent` - The event subscription value that caused this event to be sent, e.g. `OBS.eventSubscriptionValues.General`\n   * `eventData` - A table containing the event data, e.g. `{ \"studioModeEnabled\": true }`",
          " * `host` - The hostname or IP address of the machine running OBS",
          " * `port` - The port number that obs-websocket is listening on",
          " * `password` - An optional password string that obs-websocket is configured to use",
          " * `eventSubscriptions` - An optional number containing the bitmask of the events to subscribe to, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)"
        ],
        "returns": [
          " * None"
        ],
        "signature": "OBS:init(eventCallback, host, port[, password, eventSubscriptions])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "OBS:removeEventSubsciption(event)",
        "desc": "Removes an event subscription",
        "doc": "Removes an event subscription\n\nParameters:\n * `event` - The event to unsubscribe from, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)\n\nReturns:\n * None\n\nNotes:\n * If you wish to remove multiple event subscriptions you can use the `&` operator to combine them, e.g. `spoon.OBS:removeEventSubscription(spoon.OBS.eventSubscriptionValues.Config | spoon.OBS.eventSubscriptionValues.Scenes)`",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "326",
        "name": "removeEventSubsciption",
        "notes": [
          " * If you wish to remove multiple event subscriptions you can use the `&` operator to combine them, e.g. `spoon.OBS:removeEventSubscription(spoon.OBS.eventSubscriptionValues.Config | spoon.OBS.eventSubscriptionValues.Scenes)`"
        ],
        "parameters": [
          " * `event` - The event to unsubscribe from, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)"
        ],
        "returns": [
          " * None"
        ],
        "signature": "OBS:removeEventSubsciption(event)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "OBS:request(requestType[, requestData[, requestId]])",
        "desc": "Sends a request to OBS",
        "doc": "Sends a request to OBS\n\nParameters:\n * `requestType` - A string containing the type of request to send\n * `requestData` - An optional table containing the data to send with the request, or nil\n * `requestId` - An optional string containing the ID of the request\n\nReturns:\n * The `requestId` that was sent\n\nNotes:\n * If `requestId` is not specified then a random UUID will be generated.\n * The `requestId` will be passed to your event callback (provided to [OBS:init()](#init)) when the response is received.\n * Values for `requestType` can be found in the [obs-websocket documentation](https://github.com/obsproject/obs-websocket/blob/master/docs/generated/protocol.md#requests)",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "343",
        "name": "request",
        "notes": [
          " * If `requestId` is not specified then a random UUID will be generated.",
          " * The `requestId` will be passed to your event callback (provided to [OBS:init()](#init)) when the response is received.",
          " * Values for `requestType` can be found in the [obs-websocket documentation](https://github.com/obsproject/obs-websocket/blob/master/docs/generated/protocol.md#requests)"
        ],
        "parameters": [
          " * `requestType` - A string containing the type of request to send",
          " * `requestData` - An optional table containing the data to send with the request, or nil",
          " * `requestId` - An optional string containing the ID of the request"
        ],
        "returns": [
          " * The `requestId` that was sent"
        ],
        "signature": "OBS:request(requestType[, requestData[, requestId]])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "OBS:requestBatch(requests[, haltOnFailure])",
        "desc": "Sends a batch of requests to OBS",
        "doc": "Sends a batch of requests to OBS\n\nParameters:\n * `requests` - A table containing the requests to send\n * `haltOnFailure` - An optional boolean indicating whether to halt the batch if a request fails, defaults to false\n\nReturns:\n * The `requestId` that was sent for the batch\n\nNotes:\n * Each request should be a table with the keys:\n   * `requestType` - A string containing the type of request to send, see [OBS:request()](#request)\n   * `requestData` - An optional table containing the data to send with the request, or `nil`\n   * `requestId` - An optional string containing a unique ID for the request\n * Unlike [OBS:request()](#request) the `requestId` is an auto-generated UUID\n\nExample:\n```lua\nspoon.OBS:requestBatch({\n {[\"requestType\"] = \"StartVirtualCam\"},\n {[\"requestType\"] = \"SetCurrentProgramScene\", [\"requestData\"] = { [\"sceneName\"] = \"FancyScene\" }}\n})\n```",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "377",
        "name": "requestBatch",
        "notes": [
          " * Each request should be a table with the keys:",
          "   * `requestType` - A string containing the type of request to send, see [OBS:request()](#request)",
          "   * `requestData` - An optional table containing the data to send with the request, or `nil`",
          "   * `requestId` - An optional string containing a unique ID for the request",
          " * Unlike [OBS:request()](#request) the `requestId` is an auto-generated UUID",
          "",
          "Example:",
          "```lua",
          "spoon.OBS:requestBatch({",
          " {[\"requestType\"] = \"StartVirtualCam\"},",
          " {[\"requestType\"] = \"SetCurrentProgramScene\", [\"requestData\"] = { [\"sceneName\"] = \"FancyScene\" }}",
          "})",
          "```"
        ],
        "parameters": [
          " * `requests` - A table containing the requests to send",
          " * `haltOnFailure` - An optional boolean indicating whether to halt the batch if a request fails, defaults to false"
        ],
        "returns": [
          " * The `requestId` that was sent for the batch"
        ],
        "signature": "OBS:requestBatch(requests[, haltOnFailure])",
        "stripped_doc": "Example:\n```lua\nspoon.OBS:requestBatch({\n {[\"requestType\"] = \"StartVirtualCam\"},\n {[\"requestType\"] = \"SetCurrentProgramScene\", [\"requestData\"] = { [\"sceneName\"] = \"FancyScene\" }}\n})\n```",
        "type": "Method"
      },
      {
        "def": "OBS:setLogLevel(level)",
        "desc": "Sets the logging level for the OBS Spoon",
        "doc": "Sets the logging level for the OBS Spoon\n\nParameters:\n * `level` - A string containing the logging level to use, see [hs.logger.setLogLevel](https://www.hammerspoon.org/docs/hs.logger.html#setLogLevel) for possible values\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "419",
        "name": "setLogLevel",
        "notes": [],
        "parameters": [
          " * `level` - A string containing the logging level to use, see [hs.logger.setLogLevel](https://www.hammerspoon.org/docs/hs.logger.html#setLogLevel) for possible values"
        ],
        "returns": [
          " * None"
        ],
        "signature": "OBS:setLogLevel(level)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "OBS:start()",
        "desc": "Connects to OBS",
        "doc": "Connects to OBS\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "161",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "OBS:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "OBS:stop()",
        "desc": "Disconnects from OBS",
        "doc": "Disconnects from OBS\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "274",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "OBS:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "OBS:updateEventSubscriptions(eventSubscriptions)",
        "desc": "Updates the event subscriptions",
        "doc": "Updates the event subscriptions\n\nParameters:\n * `eventSubscriptions` - A bitmask of the events to subscribe to, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "289",
        "name": "updateEventSubscriptions",
        "notes": [],
        "parameters": [
          " * `eventSubscriptions` - A bitmask of the events to subscribe to, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)"
        ],
        "returns": [
          " * None"
        ],
        "signature": "OBS:updateEventSubscriptions(eventSubscriptions)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "OBS:reconnectDelay",
        "desc": "Controls how long to wait, in seconds, before attempting to reconnect to OBS. Defaults to `5`",
        "doc": "Controls how long to wait, in seconds, before attempting to reconnect to OBS. Defaults to `5`",
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "112",
        "name": "reconnectDelay",
        "signature": "OBS:reconnectDelay",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "OBS:shouldReconnect",
        "desc": "Controls whether the websocket connection should be re-established if it is lost. Defaults to `true`",
        "doc": "Controls whether the websocket connection should be re-established if it is lost. Defaults to `true`",
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "105",
        "name": "shouldReconnect",
        "signature": "OBS:shouldReconnect",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Control OBS and react to its events, via the obs-websocket plugin.",
    "doc": "Control OBS and react to its events, via the obs-websocket plugin.\n\nInstall and configure the obs-websocket plugin first from [their project](https://github.com/obsproject/obs-websocket/releases)\n\nNote: This Spoon will only work with Hammerspoon 0.9.100 or later.\n\nNote: This Spoon will only work with obs-websocket 5.0.1 or later, which also requires OBS Studio v27 or later.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/OBS.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/OBS.spoon.zip)\n\nExample:\n```\n-- This example will start OBS, connect to it, and then start streaming once connected\nobs = hs.loadSpoon(\"OBS\")\nobsCallback = function(eventType, eventIntent, eventData)\n  print(eventType)\n  print(eventIntent)\n  print(hs.inspect(eventData))\n\n  if eventType == \"SpoonOBSConnected\" then\n    obs:request(\"StartStream\")\n  end\nend\nobs:init(obsCallback, \"localhost\", 4444, \"password\")\nobs:start()\n```",
    "items": [
      {
        "def": "OBS:addEventSubsciption(event)",
        "desc": "Adds an event subscription",
        "doc": "Adds an event subscription\n\nParameters:\n * `event` - The event to subscribe to, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)\n\nReturns:\n * None\n\nNotes:\n * If you wish to add multiple event subscriptions you can use the `|` operator to combine them, e.g. `spoon.OBS:addEventSubscription(spoon.OBS.eventSubscriptionValues.Config | spoon.OBS.eventSubscriptionValues.Scenes)`",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "309",
        "name": "addEventSubsciption",
        "notes": [
          " * If you wish to add multiple event subscriptions you can use the `|` operator to combine them, e.g. `spoon.OBS:addEventSubscription(spoon.OBS.eventSubscriptionValues.Config | spoon.OBS.eventSubscriptionValues.Scenes)`"
        ],
        "parameters": [
          " * `event` - The event to subscribe to, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)"
        ],
        "returns": [
          " * None"
        ],
        "signature": "OBS:addEventSubsciption(event)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "OBS.eventSubscriptionValues",
        "desc": "A table of the possible values for the `eventSubscriptions` parameter to [OBS:init()](#init)",
        "doc": "A table of the possible values for the `eventSubscriptions` parameter to [OBS:init()](#init)\n\nNotes:\n * The keys are:\n   * `None` - No events\n   * `General` - General events\n   * `Config` - Configuration events\n   * `Scenes` - Scene events\n   * `Inputs` - Input events\n   * `Transitions` - Transition events\n   * `Filters` - Filter events\n   * `Outputs` - Output events\n   * `SceneItems` - Scene item events\n   * `MediaInputs` - Media input events\n   * `Vendors` - Vendor events\n   * `UI` - UI events\n   * `All` - All of the above events\n   * `InputVolumeMeters` - Input volume meter events\n   * `InputActiveStateChanged` - Input active state changed events\n   * `InputShowStateChanged` - Input show state changed events\n   * `SceneItemTransformChanged` - Scene item transform changed events\n * For more information about these event categories and the events they contain, see the [obs-websocket documentation](https://github.com/obsproject/obs-websocket/blob/master/docs/generated/protocol.md#events)\n * To combine these as a bitmask, use boolean operators, e.g. `OBS.eventSubscriptionValues.General | OBS.eventSubscriptionValues.Scenes`\n * The final four values are considered \"high volume\" events, so are not included in `OBS.eventSubscriptionValues.All` by default",
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "58",
        "name": "eventSubscriptionValues",
        "notes": [
          " * The keys are:",
          "   * `None` - No events",
          "   * `General` - General events",
          "   * `Config` - Configuration events",
          "   * `Scenes` - Scene events",
          "   * `Inputs` - Input events",
          "   * `Transitions` - Transition events",
          "   * `Filters` - Filter events",
          "   * `Outputs` - Output events",
          "   * `SceneItems` - Scene item events",
          "   * `MediaInputs` - Media input events",
          "   * `Vendors` - Vendor events",
          "   * `UI` - UI events",
          "   * `All` - All of the above events",
          "   * `InputVolumeMeters` - Input volume meter events",
          "   * `InputActiveStateChanged` - Input active state changed events",
          "   * `InputShowStateChanged` - Input show state changed events",
          "   * `SceneItemTransformChanged` - Scene item transform changed events",
          " * For more information about these event categories and the events they contain, see the [obs-websocket documentation](https://github.com/obsproject/obs-websocket/blob/master/docs/generated/protocol.md#events)",
          " * To combine these as a bitmask, use boolean operators, e.g. `OBS.eventSubscriptionValues.General | OBS.eventSubscriptionValues.Scenes`",
          " * The final four values are considered \"high volume\" events, so are not included in `OBS.eventSubscriptionValues.All` by default"
        ],
        "signature": "OBS.eventSubscriptionValues",
        "stripped_doc": "",
        "type": "Constant"
      },
      {
        "def": "OBS:init(eventCallback, host, port[, password, eventSubscriptions])",
        "desc": "Initialisation method",
        "doc": "Initialisation method\n\nParameters:\n * `eventCallback` - A function to be called when an event is received from OBS. The function will be passed a table containing the event data. The keys of the table are:\n   * `eventType` - The type of event, e.g. `StudioModeStateChanged`\n   * `eventIntent` - The event subscription value that caused this event to be sent, e.g. `OBS.eventSubscriptionValues.General`\n   * `eventData` - A table containing the event data, e.g. `{ \"studioModeEnabled\": true }`\n * `host` - The hostname or IP address of the machine running OBS\n * `port` - The port number that obs-websocket is listening on\n * `password` - An optional password string that obs-websocket is configured to use\n * `eventSubscriptions` - An optional number containing the bitmask of the events to subscribe to, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)\n\nReturns:\n * None\n\nNotes:\n * This method does not connect to OBS, it just sets up the connection parameters for later use\n * By default, no events are subscribed to, so you will need to set `eventSubscriptions` to something useful if you want to receive events\n * If you do not wish to supply an `eventCallback`, pass `nil` instead\n * The events that OBS can produce are documented in the [obs-websocket documentation](https://github.com/obsproject/obs-websocket/blob/master/docs/generated/protocol.md#events)\n * There are some additional values for `eventType`, specific to this Spoon:\n   * `SpoonOBSConnected` - This event is sent when the websocket connection to OBS is established. All other fields will be `nil`.\n   * `SpoonOBSDisconnected` - This event is sent when the websocket connection to OBS is lost. All other fields will be nil. Return false to inhibit automatic reconnection.\n   * `SpoonRequestResponse` - This event is sent to pass replies to requests made via [OBS:request()](#request). Its `eventIntent` will be nil and the format of its `eventData` table will be:\n     * `requestId` - The ID of the request that this is a reply to\n     * `requestType` - The request type that was made\n     * `requestStatus` - A table containing:\n       * `result` - A bool, `true` if the request succeeded, otherwise `false`\n       * `code` - A number containing the response code\n       * `comment` - An optional string that may contain additional information about the response\n     * `responseData` - An table that contains the response data, if any\n   * `SpoonBatchRequestResponse` - This event is sent to pass replies to batch requests made via [OBS:requestBatch()](#requestBatch). Its `eventIntent` will be nil and the format of its `eventData` table will be:\n     * `requestId` - The ID of the request batch that this is a reply to\n     * `results` - A table containing the results of each request in the batch. Each entry in the table will be a table with the same format as `SpoonRequestResponse`",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "117",
        "name": "init",
        "notes": [
          " * This method does not connect to OBS, it just sets up the connection parameters for later use",
          " * By default, no events are subscribed to, so you will need to set `eventSubscriptions` to something useful if you want to receive events",
          " * If you do not wish to supply an `eventCallback`, pass `nil` instead",
          " * The events that OBS can produce are documented in the [obs-websocket documentation](https://github.com/obsproject/obs-websocket/blob/master/docs/generated/protocol.md#events)",
          " * There are some additional values for `eventType`, specific to this Spoon:",
          "   * `SpoonOBSConnected` - This event is sent when the websocket connection to OBS is established. All other fields will be `nil`.",
          "   * `SpoonOBSDisconnected` - This event is sent when the websocket connection to OBS is lost. All other fields will be nil. Return false to inhibit automatic reconnection.",
          "   * `SpoonRequestResponse` - This event is sent to pass replies to requests made via [OBS:request()](#request). Its `eventIntent` will be nil and the format of its `eventData` table will be:",
          "     * `requestId` - The ID of the request that this is a reply to",
          "     * `requestType` - The request type that was made",
          "     * `requestStatus` - A table containing:",
          "       * `result` - A bool, `true` if the request succeeded, otherwise `false`",
          "       * `code` - A number containing the response code",
          "       * `comment` - An optional string that may contain additional information about the response",
          "     * `responseData` - An table that contains the response data, if any",
          "   * `SpoonBatchRequestResponse` - This event is sent to pass replies to batch requests made via [OBS:requestBatch()](#requestBatch). Its `eventIntent` will be nil and the format of its `eventData` table will be:",
          "     * `requestId` - The ID of the request batch that this is a reply to",
          "     * `results` - A table containing the results of each request in the batch. Each entry in the table will be a table with the same format as `SpoonRequestResponse`"
        ],
        "parameters": [
          " * `eventCallback` - A function to be called when an event is received from OBS. The function will be passed a table containing the event data. The keys of the table are:\n   * `eventType` - The type of event, e.g. `StudioModeStateChanged`\n   * `eventIntent` - The event subscription value that caused this event to be sent, e.g. `OBS.eventSubscriptionValues.General`\n   * `eventData` - A table containing the event data, e.g. `{ \"studioModeEnabled\": true }`",
          " * `host` - The hostname or IP address of the machine running OBS",
          " * `port` - The port number that obs-websocket is listening on",
          " * `password` - An optional password string that obs-websocket is configured to use",
          " * `eventSubscriptions` - An optional number containing the bitmask of the events to subscribe to, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)"
        ],
        "returns": [
          " * None"
        ],
        "signature": "OBS:init(eventCallback, host, port[, password, eventSubscriptions])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "OBS:reconnectDelay",
        "desc": "Controls how long to wait, in seconds, before attempting to reconnect to OBS. Defaults to `5`",
        "doc": "Controls how long to wait, in seconds, before attempting to reconnect to OBS. Defaults to `5`",
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "112",
        "name": "reconnectDelay",
        "signature": "OBS:reconnectDelay",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "OBS:removeEventSubsciption(event)",
        "desc": "Removes an event subscription",
        "doc": "Removes an event subscription\n\nParameters:\n * `event` - The event to unsubscribe from, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)\n\nReturns:\n * None\n\nNotes:\n * If you wish to remove multiple event subscriptions you can use the `&` operator to combine them, e.g. `spoon.OBS:removeEventSubscription(spoon.OBS.eventSubscriptionValues.Config | spoon.OBS.eventSubscriptionValues.Scenes)`",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "326",
        "name": "removeEventSubsciption",
        "notes": [
          " * If you wish to remove multiple event subscriptions you can use the `&` operator to combine them, e.g. `spoon.OBS:removeEventSubscription(spoon.OBS.eventSubscriptionValues.Config | spoon.OBS.eventSubscriptionValues.Scenes)`"
        ],
        "parameters": [
          " * `event` - The event to unsubscribe from, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)"
        ],
        "returns": [
          " * None"
        ],
        "signature": "OBS:removeEventSubsciption(event)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "OBS:request(requestType[, requestData[, requestId]])",
        "desc": "Sends a request to OBS",
        "doc": "Sends a request to OBS\n\nParameters:\n * `requestType` - A string containing the type of request to send\n * `requestData` - An optional table containing the data to send with the request, or nil\n * `requestId` - An optional string containing the ID of the request\n\nReturns:\n * The `requestId` that was sent\n\nNotes:\n * If `requestId` is not specified then a random UUID will be generated.\n * The `requestId` will be passed to your event callback (provided to [OBS:init()](#init)) when the response is received.\n * Values for `requestType` can be found in the [obs-websocket documentation](https://github.com/obsproject/obs-websocket/blob/master/docs/generated/protocol.md#requests)",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "343",
        "name": "request",
        "notes": [
          " * If `requestId` is not specified then a random UUID will be generated.",
          " * The `requestId` will be passed to your event callback (provided to [OBS:init()](#init)) when the response is received.",
          " * Values for `requestType` can be found in the [obs-websocket documentation](https://github.com/obsproject/obs-websocket/blob/master/docs/generated/protocol.md#requests)"
        ],
        "parameters": [
          " * `requestType` - A string containing the type of request to send",
          " * `requestData` - An optional table containing the data to send with the request, or nil",
          " * `requestId` - An optional string containing the ID of the request"
        ],
        "returns": [
          " * The `requestId` that was sent"
        ],
        "signature": "OBS:request(requestType[, requestData[, requestId]])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "OBS:requestBatch(requests[, haltOnFailure])",
        "desc": "Sends a batch of requests to OBS",
        "doc": "Sends a batch of requests to OBS\n\nParameters:\n * `requests` - A table containing the requests to send\n * `haltOnFailure` - An optional boolean indicating whether to halt the batch if a request fails, defaults to false\n\nReturns:\n * The `requestId` that was sent for the batch\n\nNotes:\n * Each request should be a table with the keys:\n   * `requestType` - A string containing the type of request to send, see [OBS:request()](#request)\n   * `requestData` - An optional table containing the data to send with the request, or `nil`\n   * `requestId` - An optional string containing a unique ID for the request\n * Unlike [OBS:request()](#request) the `requestId` is an auto-generated UUID\n\nExample:\n```lua\nspoon.OBS:requestBatch({\n {[\"requestType\"] = \"StartVirtualCam\"},\n {[\"requestType\"] = \"SetCurrentProgramScene\", [\"requestData\"] = { [\"sceneName\"] = \"FancyScene\" }}\n})\n```",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "377",
        "name": "requestBatch",
        "notes": [
          " * Each request should be a table with the keys:",
          "   * `requestType` - A string containing the type of request to send, see [OBS:request()](#request)",
          "   * `requestData` - An optional table containing the data to send with the request, or `nil`",
          "   * `requestId` - An optional string containing a unique ID for the request",
          " * Unlike [OBS:request()](#request) the `requestId` is an auto-generated UUID",
          "",
          "Example:",
          "```lua",
          "spoon.OBS:requestBatch({",
          " {[\"requestType\"] = \"StartVirtualCam\"},",
          " {[\"requestType\"] = \"SetCurrentProgramScene\", [\"requestData\"] = { [\"sceneName\"] = \"FancyScene\" }}",
          "})",
          "```"
        ],
        "parameters": [
          " * `requests` - A table containing the requests to send",
          " * `haltOnFailure` - An optional boolean indicating whether to halt the batch if a request fails, defaults to false"
        ],
        "returns": [
          " * The `requestId` that was sent for the batch"
        ],
        "signature": "OBS:requestBatch(requests[, haltOnFailure])",
        "stripped_doc": "Example:\n```lua\nspoon.OBS:requestBatch({\n {[\"requestType\"] = \"StartVirtualCam\"},\n {[\"requestType\"] = \"SetCurrentProgramScene\", [\"requestData\"] = { [\"sceneName\"] = \"FancyScene\" }}\n})\n```",
        "type": "Method"
      },
      {
        "def": "OBS:setLogLevel(level)",
        "desc": "Sets the logging level for the OBS Spoon",
        "doc": "Sets the logging level for the OBS Spoon\n\nParameters:\n * `level` - A string containing the logging level to use, see [hs.logger.setLogLevel](https://www.hammerspoon.org/docs/hs.logger.html#setLogLevel) for possible values\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "419",
        "name": "setLogLevel",
        "notes": [],
        "parameters": [
          " * `level` - A string containing the logging level to use, see [hs.logger.setLogLevel](https://www.hammerspoon.org/docs/hs.logger.html#setLogLevel) for possible values"
        ],
        "returns": [
          " * None"
        ],
        "signature": "OBS:setLogLevel(level)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "OBS:shouldReconnect",
        "desc": "Controls whether the websocket connection should be re-established if it is lost. Defaults to `true`",
        "doc": "Controls whether the websocket connection should be re-established if it is lost. Defaults to `true`",
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "105",
        "name": "shouldReconnect",
        "signature": "OBS:shouldReconnect",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "OBS:start()",
        "desc": "Connects to OBS",
        "doc": "Connects to OBS\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "161",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "OBS:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "OBS:stop()",
        "desc": "Disconnects from OBS",
        "doc": "Disconnects from OBS\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "274",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "OBS:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "OBS:updateEventSubscriptions(eventSubscriptions)",
        "desc": "Updates the event subscriptions",
        "doc": "Updates the event subscriptions\n\nParameters:\n * `eventSubscriptions` - A bitmask of the events to subscribe to, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/OBS.spoon/init.lua",
        "lineno": "289",
        "name": "updateEventSubscriptions",
        "notes": [],
        "parameters": [
          " * `eventSubscriptions` - A bitmask of the events to subscribe to, see [OBS.eventSubscriptionValues](#eventSubscriptionValues)"
        ],
        "returns": [
          " * None"
        ],
        "signature": "OBS:updateEventSubscriptions(eventSubscriptions)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "OBS",
    "stripped_doc": "\nInstall and configure the obs-websocket plugin first from [their project](https://github.com/obsproject/obs-websocket/releases)\n\nNote: This Spoon will only work with Hammerspoon 0.9.100 or later.\n\nNote: This Spoon will only work with obs-websocket 5.0.1 or later, which also requires OBS Studio v27 or later.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/OBS.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/OBS.spoon.zip)\n\nExample:\n```\n-- This example will start OBS, connect to it, and then start streaming once connected\nobs = hs.loadSpoon(\"OBS\")\nobsCallback = function(eventType, eventIntent, eventData)\n  print(eventType)\n  print(eventIntent)\n  print(hs.inspect(eventData))\n\n  if eventType == \"SpoonOBSConnected\" then\n    obs:request(\"StartStream\")\n  end\nend\nobs:init(obsCallback, \"localhost\", 4444, \"password\")\nobs:start()\n```",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "PasswordGenerator:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for PasswordGenerator",
        "doc": "Binds hotkeys for PasswordGenerator\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * copy - Generate password and copy to clipboard\n  * paste - Generate password and paste",
        "examples": [],
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "149",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * copy - Generate password and copy to clipboard\n   * paste - Generate password and paste"
        ],
        "returns": [],
        "signature": "PasswordGenerator:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PasswordGenerator:copyPassword()",
        "desc": "Generates a password and copies to clipboard",
        "doc": "Generates a password and copies to clipboard\n\nParameters:\n * None\n\nReturns:\n * The generated password",
        "examples": [],
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "178",
        "name": "copyPassword",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The generated password"
        ],
        "signature": "PasswordGenerator:copyPassword()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PasswordGenerator:pastePassword()",
        "desc": "Generates a password and types it",
        "doc": "Generates a password and types it\n\nParameters:\n * None\n\nReturns:\n * The generated password",
        "examples": [],
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "193",
        "name": "pastePassword",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The generated password"
        ],
        "signature": "PasswordGenerator:pastePassword()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "PasswordGenerator.password_generator_function",
        "desc": "Explicit function used to generate passwords, if nil style is used instead.",
        "doc": "Explicit function used to generate passwords, if nil style is used instead.",
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "108",
        "name": "password_generator_function",
        "signature": "PasswordGenerator.password_generator_function",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PasswordGenerator.password_length",
        "desc": "Length of generated passwords. Is ignored by style xkcd.",
        "doc": "Length of generated passwords. Is ignored by style xkcd.",
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "113",
        "name": "password_length",
        "signature": "PasswordGenerator.password_length",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PasswordGenerator.password_style",
        "desc": "Style for the generated password.",
        "doc": "Style for the generated password.",
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "100",
        "name": "password_style",
        "signature": "PasswordGenerator.password_style",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PasswordGenerator.word_count",
        "desc": "Number of words in generated passwords. Used by xkcd.",
        "doc": "Number of words in generated passwords. Used by xkcd.",
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "118",
        "name": "word_count",
        "signature": "PasswordGenerator.word_count",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PasswordGenerator.word_leet",
        "desc": "Which word number will have its word `733t` transformed.",
        "doc": "Which word number will have its word `733t` transformed.\n\nNotes:\n * Useful to ensure the word will at least have a one numeric value.\n * Defaults to 0",
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "123",
        "name": "word_leet",
        "notes": [
          " * Useful to ensure the word will at least have a one numeric value.",
          " * Defaults to 0"
        ],
        "signature": "PasswordGenerator.word_leet",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PasswordGenerator.word_separators",
        "desc": "String of separators to use between words.",
        "doc": "String of separators to use between words.\n\nNotes:\n * If multiple characters one will be chosen by random.\n * Used by xkcd. Default is \" _-,$\"",
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "132",
        "name": "word_separators",
        "notes": [
          " * If multiple characters one will be chosen by random.",
          " * Used by xkcd. Default is \" _-,$\""
        ],
        "signature": "PasswordGenerator.word_separators",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PasswordGenerator.word_uppercase",
        "desc": "Number of words to uppercase the first letter.",
        "doc": "Number of words to uppercase the first letter.\n\nNotes:\n * Used by xkcd. Default is 1.",
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "141",
        "name": "word_uppercase",
        "notes": [
          " * Used by xkcd. Default is 1."
        ],
        "signature": "PasswordGenerator.word_uppercase",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Generate a password and copy to the clipboard.",
    "doc": "Generate a password and copy to the clipboard.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/PasswordGenerator.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/PasswordGenerator.spoon.zip)",
    "items": [
      {
        "def": "PasswordGenerator:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for PasswordGenerator",
        "doc": "Binds hotkeys for PasswordGenerator\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * copy - Generate password and copy to clipboard\n  * paste - Generate password and paste",
        "examples": [],
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "149",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * copy - Generate password and copy to clipboard\n   * paste - Generate password and paste"
        ],
        "returns": [],
        "signature": "PasswordGenerator:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PasswordGenerator:copyPassword()",
        "desc": "Generates a password and copies to clipboard",
        "doc": "Generates a password and copies to clipboard\n\nParameters:\n * None\n\nReturns:\n * The generated password",
        "examples": [],
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "178",
        "name": "copyPassword",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The generated password"
        ],
        "signature": "PasswordGenerator:copyPassword()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PasswordGenerator.password_generator_function",
        "desc": "Explicit function used to generate passwords, if nil style is used instead.",
        "doc": "Explicit function used to generate passwords, if nil style is used instead.",
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "108",
        "name": "password_generator_function",
        "signature": "PasswordGenerator.password_generator_function",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PasswordGenerator.password_length",
        "desc": "Length of generated passwords. Is ignored by style xkcd.",
        "doc": "Length of generated passwords. Is ignored by style xkcd.",
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "113",
        "name": "password_length",
        "signature": "PasswordGenerator.password_length",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PasswordGenerator.password_style",
        "desc": "Style for the generated password.",
        "doc": "Style for the generated password.",
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "100",
        "name": "password_style",
        "signature": "PasswordGenerator.password_style",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PasswordGenerator:pastePassword()",
        "desc": "Generates a password and types it",
        "doc": "Generates a password and types it\n\nParameters:\n * None\n\nReturns:\n * The generated password",
        "examples": [],
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "193",
        "name": "pastePassword",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The generated password"
        ],
        "signature": "PasswordGenerator:pastePassword()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PasswordGenerator.word_count",
        "desc": "Number of words in generated passwords. Used by xkcd.",
        "doc": "Number of words in generated passwords. Used by xkcd.",
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "118",
        "name": "word_count",
        "signature": "PasswordGenerator.word_count",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PasswordGenerator.word_leet",
        "desc": "Which word number will have its word `733t` transformed.",
        "doc": "Which word number will have its word `733t` transformed.\n\nNotes:\n * Useful to ensure the word will at least have a one numeric value.\n * Defaults to 0",
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "123",
        "name": "word_leet",
        "notes": [
          " * Useful to ensure the word will at least have a one numeric value.",
          " * Defaults to 0"
        ],
        "signature": "PasswordGenerator.word_leet",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PasswordGenerator.word_separators",
        "desc": "String of separators to use between words.",
        "doc": "String of separators to use between words.\n\nNotes:\n * If multiple characters one will be chosen by random.\n * Used by xkcd. Default is \" _-,$\"",
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "132",
        "name": "word_separators",
        "notes": [
          " * If multiple characters one will be chosen by random.",
          " * Used by xkcd. Default is \" _-,$\""
        ],
        "signature": "PasswordGenerator.word_separators",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PasswordGenerator.word_uppercase",
        "desc": "Number of words to uppercase the first letter.",
        "doc": "Number of words to uppercase the first letter.\n\nNotes:\n * Used by xkcd. Default is 1.",
        "file": "Source/PasswordGenerator.spoon/init.lua",
        "lineno": "141",
        "name": "word_uppercase",
        "notes": [
          " * Used by xkcd. Default is 1."
        ],
        "signature": "PasswordGenerator.word_uppercase",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "PasswordGenerator",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/PasswordGenerator.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/PasswordGenerator.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Pastebin:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Pastebin",
        "doc": "Binds hotkeys for Pastebin\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * paste - paste to Pastebin",
        "examples": [],
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "368",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * paste - paste to Pastebin"
        ],
        "returns": [],
        "signature": "Pastebin:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Pastebin:paste(private, expire, format)",
        "desc": "Pastes an item to Pastebin using the Pastebin api",
        "doc": "Pastes an item to Pastebin using the Pastebin api\n\nParameters:\n * private - Integer specifying whether the paste should be public, private, or unlisted. Defaults to obj.private (0=public)\n * expire - String specifying the TTL for the paste. Defaults to obj.expire ('N'=never). Valid values are listed on obj.expire\n * format - String specifying the appropriate Pastebin format enum. Default is obj.format ('text'). Valid values are listed on obj.format",
        "examples": [],
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "318",
        "name": "paste",
        "notes": [],
        "parameters": [
          " * private - Integer specifying whether the paste should be public, private, or unlisted. Defaults to obj.private (0=public)",
          " * expire - String specifying the TTL for the paste. Defaults to obj.expire ('N'=never). Valid values are listed on obj.expire",
          " * format - String specifying the appropriate Pastebin format enum. Default is obj.format ('text'). Valid values are listed on obj.format"
        ],
        "returns": [],
        "signature": "Pastebin:paste(private, expire, format)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Pastebin.api_dev_key",
        "desc": "String api developer key. Can be found [here](http://pastebin.com/api)",
        "doc": "String api developer key. Can be found [here](http://pastebin.com/api)",
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "19",
        "name": "api_dev_key",
        "signature": "Pastebin.api_dev_key",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Pastebin.api_user_key",
        "desc": "String api user key. Can be generated [here](http://pastebin.com/api/api_user_key.html)",
        "doc": "String api user key. Can be generated [here](http://pastebin.com/api/api_user_key.html)",
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "24",
        "name": "api_user_key",
        "signature": "Pastebin.api_user_key",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Pastebin.expire",
        "desc": "String indicating how long until the paste expires. Default is 'N' (Never)",
        "doc": "String indicating how long until the paste expires. Default is 'N' (Never)\n\nNotes:\n * Valid expiration times at this time are (current list can be found [here](https://pastebin.com/api#6))\n  * N\n  * 10M\n  * 1H\n  * 1D\n  * 1W\n  * 2W\n  * 1M\n  * 6M\n  * 1Y",
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "34",
        "name": "expire",
        "notes": [
          " * Valid expiration times at this time are (current list can be found [here](https://pastebin.com/api#6))",
          "  * N",
          "  * 10M",
          "  * 1H",
          "  * 1D",
          "  * 1W",
          "  * 2W",
          "  * 1M",
          "  * 6M",
          "  * 1Y"
        ],
        "signature": "Pastebin.expire",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Pastebin.format",
        "desc": "String indicating the format of the paste. Default is 'text' (plain text). ",
        "doc": "String indicating the format of the paste. Default is 'text' (plain text). \n\nNotes:\n * Valid formats at this time are (current list can be found [here](https://pastebin.com/api#5)): \n  * '4cs'\n  * '6502acme'\n  * '6502kickass'\n  * '6502tasm'\n  * 'abap'\n  * 'actionscript'\n  * 'actionscript3'\n  * 'ada'\n  * 'aimms'\n  * 'algol68'\n  * 'apache'\n  * 'applescript'\n  * 'apt_sources'\n  * 'arm'\n  * 'asm'\n  * 'asp'\n  * 'asymptote'\n  * 'autoconf'\n  * 'autohotkey'\n  * 'autoit'\n  * 'avisynth'\n  * 'awk'\n  * 'bascomavr'\n  * 'bash'\n  * 'basic4gl'\n  * 'dos'\n  * 'bibtex'\n  * 'blitzbasic'\n  * 'b3d'\n  * 'bmx'\n  * 'bnf'\n  * 'boo'\n  * 'bf'\n  * 'c'\n  * 'c_winapi'\n  * 'c_mac'\n  * 'cil'\n  * 'csharp'\n  * 'cpp'\n  * 'cpp-winapi'\n  * 'cpp-qt'\n  * 'c_loadrunner'\n  * 'caddcl'\n  * 'cadlisp'\n  * 'ceylon'\n  * 'cfdg'\n  * 'chaiscript'\n  * 'chapel'\n  * 'clojure'\n  * 'klonec'\n  * 'klonecpp'\n  * 'cmake'\n  * 'cobol'\n  * 'coffeescript'\n  * 'cfm'\n  * 'css'\n  * 'cuesheet'\n  * 'd'\n  * 'dart'\n  * 'dcl'\n  * 'dcpu16'\n  * 'dcs'\n  * 'delphi'\n  * 'oxygene'\n  * 'diff'\n  * 'div'\n  * 'dot'\n  * 'e'\n  * 'ezt'\n  * 'ecmascript'\n  * 'eiffel'\n  * 'email'\n  * 'epc'\n  * 'erlang'\n  * 'euphoria'\n  * 'fsharp'\n  * 'falcon'\n  * 'filemaker'\n  * 'fo'\n  * 'f1'\n  * 'fortran'\n  * 'freebasic'\n  * 'freeswitch'\n  * 'gambas'\n  * 'gml'\n  * 'gdb'\n  * 'genero'\n  * 'genie'\n  * 'gettext'\n  * 'go'\n  * 'groovy'\n  * 'gwbasic'\n  * 'haskell'\n  * 'haxe'\n  * 'hicest'\n  * 'hq9plus'\n  * 'html4strict'\n  * 'html5'\n  * 'icon'\n  * 'idl'\n  * 'ini'\n  * 'inno'\n  * 'intercal'\n  * 'io'\n  * 'ispfpanel'\n  * 'j'\n  * 'java'\n  * 'java5'\n  * 'javascript'\n  * 'jcl'\n  * 'jquery'\n  * 'json'\n  * 'julia'\n  * 'kixtart'\n  * 'kotlin'\n  * 'latex'\n  * 'ldif'\n  * 'lb'\n  * 'lsl2'\n  * 'lisp'\n  * 'llvm'\n  * 'locobasic'\n  * 'logtalk'\n  * 'lolcode'\n  * 'lotusformulas'\n  * 'lotusscript'\n  * 'lscript'\n  * 'lua'\n  * 'm68k'\n  * 'magiksf'\n  * 'make'\n  * 'mapbasic'\n  * 'markdown'\n  * 'matlab'\n  * 'mirc'\n  * 'mmix'\n  * 'modula2'\n  * 'modula3'\n  * '68000devpac'\n  * 'mpasm'\n  * 'mxml'\n  * 'mysql'\n  * 'nagios'\n  * 'netrexx'\n  * 'newlisp'\n  * 'nginx'\n  * 'nim'\n  * 'text'\n  * 'nsis'\n  * 'oberon2'\n  * 'objeck'\n  * 'objc'\n  * 'ocaml-brief'\n  * 'ocaml'\n  * 'octave'\n  * 'oorexx'\n  * 'pf'\n  * 'glsl'\n  * 'oobas'\n  * 'oracle11'\n  * 'oracle8'\n  * 'oz'\n  * 'parasail'\n  * 'parigp'\n  * 'pascal'\n  * 'pawn'\n  * 'pcre'\n  * 'per'\n  * 'perl'\n  * 'perl6'\n  * 'php'\n  * 'php-brief'\n  * 'pic16'\n  * 'pike'\n  * 'pixelbender'\n  * 'pli'\n  * 'plsql'\n  * 'postgresql'\n  * 'postscript'\n  * 'povray'\n  * 'powerbuilder'\n  * 'powershell'\n  * 'proftpd'\n  * 'progress'\n  * 'prolog'\n  * 'properties'\n  * 'providex'\n  * 'puppet'\n  * 'purebasic'\n  * 'pycon'\n  * 'python'\n  * 'pys60'\n  * 'q'\n  * 'qbasic'\n  * 'qml'\n  * 'rsplus'\n  * 'racket'\n  * 'rails'\n  * 'rbs'\n  * 'rebol'\n  * 'reg'\n  * 'rexx'\n  * 'robots'\n  * 'rpmspec'\n  * 'ruby'\n  * 'gnuplot'\n  * 'rust'\n  * 'sas'\n  * 'scala'\n  * 'scheme'\n  * 'scilab'\n  * 'scl'\n  * 'sdlbasic'\n  * 'smalltalk'\n  * 'smarty'\n  * 'spark'\n  * 'sparql'\n  * 'sqf'\n  * 'sql'\n  * 'standardml'\n  * 'stonescript'\n  * 'sclang'\n  * 'swift'\n  * 'systemverilog'\n  * 'tsql'\n  * 'tcl'\n  * 'teraterm'\n  * 'thinbasic'\n  * 'typoscript'\n  * 'unicon'\n  * 'uscript'\n  * 'upc'\n  * 'urbi'\n  * 'vala'\n  * 'vbnet'\n  * 'vbscript'\n  * 'vedit'\n  * 'verilog'\n  * 'vhdl'\n  * 'vim'\n  * 'visualprolog'\n  * 'vb'\n  * 'visualfoxpro'\n  * 'whitespace'\n  * 'whois'\n  * 'winbatch'\n  * 'xbasic'\n  * 'xml'\n  * 'xorg_conf'\n  * 'xpp'\n  * 'yaml'\n  * 'z80'\n  * 'zxbasic'",
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "52",
        "name": "format",
        "notes": [
          " * Valid formats at this time are (current list can be found [here](https://pastebin.com/api#5)): ",
          "  * '4cs'",
          "  * '6502acme'",
          "  * '6502kickass'",
          "  * '6502tasm'",
          "  * 'abap'",
          "  * 'actionscript'",
          "  * 'actionscript3'",
          "  * 'ada'",
          "  * 'aimms'",
          "  * 'algol68'",
          "  * 'apache'",
          "  * 'applescript'",
          "  * 'apt_sources'",
          "  * 'arm'",
          "  * 'asm'",
          "  * 'asp'",
          "  * 'asymptote'",
          "  * 'autoconf'",
          "  * 'autohotkey'",
          "  * 'autoit'",
          "  * 'avisynth'",
          "  * 'awk'",
          "  * 'bascomavr'",
          "  * 'bash'",
          "  * 'basic4gl'",
          "  * 'dos'",
          "  * 'bibtex'",
          "  * 'blitzbasic'",
          "  * 'b3d'",
          "  * 'bmx'",
          "  * 'bnf'",
          "  * 'boo'",
          "  * 'bf'",
          "  * 'c'",
          "  * 'c_winapi'",
          "  * 'c_mac'",
          "  * 'cil'",
          "  * 'csharp'",
          "  * 'cpp'",
          "  * 'cpp-winapi'",
          "  * 'cpp-qt'",
          "  * 'c_loadrunner'",
          "  * 'caddcl'",
          "  * 'cadlisp'",
          "  * 'ceylon'",
          "  * 'cfdg'",
          "  * 'chaiscript'",
          "  * 'chapel'",
          "  * 'clojure'",
          "  * 'klonec'",
          "  * 'klonecpp'",
          "  * 'cmake'",
          "  * 'cobol'",
          "  * 'coffeescript'",
          "  * 'cfm'",
          "  * 'css'",
          "  * 'cuesheet'",
          "  * 'd'",
          "  * 'dart'",
          "  * 'dcl'",
          "  * 'dcpu16'",
          "  * 'dcs'",
          "  * 'delphi'",
          "  * 'oxygene'",
          "  * 'diff'",
          "  * 'div'",
          "  * 'dot'",
          "  * 'e'",
          "  * 'ezt'",
          "  * 'ecmascript'",
          "  * 'eiffel'",
          "  * 'email'",
          "  * 'epc'",
          "  * 'erlang'",
          "  * 'euphoria'",
          "  * 'fsharp'",
          "  * 'falcon'",
          "  * 'filemaker'",
          "  * 'fo'",
          "  * 'f1'",
          "  * 'fortran'",
          "  * 'freebasic'",
          "  * 'freeswitch'",
          "  * 'gambas'",
          "  * 'gml'",
          "  * 'gdb'",
          "  * 'genero'",
          "  * 'genie'",
          "  * 'gettext'",
          "  * 'go'",
          "  * 'groovy'",
          "  * 'gwbasic'",
          "  * 'haskell'",
          "  * 'haxe'",
          "  * 'hicest'",
          "  * 'hq9plus'",
          "  * 'html4strict'",
          "  * 'html5'",
          "  * 'icon'",
          "  * 'idl'",
          "  * 'ini'",
          "  * 'inno'",
          "  * 'intercal'",
          "  * 'io'",
          "  * 'ispfpanel'",
          "  * 'j'",
          "  * 'java'",
          "  * 'java5'",
          "  * 'javascript'",
          "  * 'jcl'",
          "  * 'jquery'",
          "  * 'json'",
          "  * 'julia'",
          "  * 'kixtart'",
          "  * 'kotlin'",
          "  * 'latex'",
          "  * 'ldif'",
          "  * 'lb'",
          "  * 'lsl2'",
          "  * 'lisp'",
          "  * 'llvm'",
          "  * 'locobasic'",
          "  * 'logtalk'",
          "  * 'lolcode'",
          "  * 'lotusformulas'",
          "  * 'lotusscript'",
          "  * 'lscript'",
          "  * 'lua'",
          "  * 'm68k'",
          "  * 'magiksf'",
          "  * 'make'",
          "  * 'mapbasic'",
          "  * 'markdown'",
          "  * 'matlab'",
          "  * 'mirc'",
          "  * 'mmix'",
          "  * 'modula2'",
          "  * 'modula3'",
          "  * '68000devpac'",
          "  * 'mpasm'",
          "  * 'mxml'",
          "  * 'mysql'",
          "  * 'nagios'",
          "  * 'netrexx'",
          "  * 'newlisp'",
          "  * 'nginx'",
          "  * 'nim'",
          "  * 'text'",
          "  * 'nsis'",
          "  * 'oberon2'",
          "  * 'objeck'",
          "  * 'objc'",
          "  * 'ocaml-brief'",
          "  * 'ocaml'",
          "  * 'octave'",
          "  * 'oorexx'",
          "  * 'pf'",
          "  * 'glsl'",
          "  * 'oobas'",
          "  * 'oracle11'",
          "  * 'oracle8'",
          "  * 'oz'",
          "  * 'parasail'",
          "  * 'parigp'",
          "  * 'pascal'",
          "  * 'pawn'",
          "  * 'pcre'",
          "  * 'per'",
          "  * 'perl'",
          "  * 'perl6'",
          "  * 'php'",
          "  * 'php-brief'",
          "  * 'pic16'",
          "  * 'pike'",
          "  * 'pixelbender'",
          "  * 'pli'",
          "  * 'plsql'",
          "  * 'postgresql'",
          "  * 'postscript'",
          "  * 'povray'",
          "  * 'powerbuilder'",
          "  * 'powershell'",
          "  * 'proftpd'",
          "  * 'progress'",
          "  * 'prolog'",
          "  * 'properties'",
          "  * 'providex'",
          "  * 'puppet'",
          "  * 'purebasic'",
          "  * 'pycon'",
          "  * 'python'",
          "  * 'pys60'",
          "  * 'q'",
          "  * 'qbasic'",
          "  * 'qml'",
          "  * 'rsplus'",
          "  * 'racket'",
          "  * 'rails'",
          "  * 'rbs'",
          "  * 'rebol'",
          "  * 'reg'",
          "  * 'rexx'",
          "  * 'robots'",
          "  * 'rpmspec'",
          "  * 'ruby'",
          "  * 'gnuplot'",
          "  * 'rust'",
          "  * 'sas'",
          "  * 'scala'",
          "  * 'scheme'",
          "  * 'scilab'",
          "  * 'scl'",
          "  * 'sdlbasic'",
          "  * 'smalltalk'",
          "  * 'smarty'",
          "  * 'spark'",
          "  * 'sparql'",
          "  * 'sqf'",
          "  * 'sql'",
          "  * 'standardml'",
          "  * 'stonescript'",
          "  * 'sclang'",
          "  * 'swift'",
          "  * 'systemverilog'",
          "  * 'tsql'",
          "  * 'tcl'",
          "  * 'teraterm'",
          "  * 'thinbasic'",
          "  * 'typoscript'",
          "  * 'unicon'",
          "  * 'uscript'",
          "  * 'upc'",
          "  * 'urbi'",
          "  * 'vala'",
          "  * 'vbnet'",
          "  * 'vbscript'",
          "  * 'vedit'",
          "  * 'verilog'",
          "  * 'vhdl'",
          "  * 'vim'",
          "  * 'visualprolog'",
          "  * 'vb'",
          "  * 'visualfoxpro'",
          "  * 'whitespace'",
          "  * 'whois'",
          "  * 'winbatch'",
          "  * 'xbasic'",
          "  * 'xml'",
          "  * 'xorg_conf'",
          "  * 'xpp'",
          "  * 'yaml'",
          "  * 'z80'",
          "  * 'zxbasic'"
        ],
        "signature": "Pastebin.format",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Pastebin.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "313",
        "name": "logger",
        "signature": "Pastebin.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Pastebin.private",
        "desc": "Integer indicating whether a paste should be public, unlisted, or private. Default is 0 (public). (0=public, 1=unlisted, 2=private)",
        "doc": "Integer indicating whether a paste should be public, unlisted, or private. Default is 0 (public). (0=public, 1=unlisted, 2=private)",
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "29",
        "name": "private",
        "signature": "Pastebin.private",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Send clipboard contents to Pastebin",
    "doc": "Send clipboard contents to Pastebin\n\nConversion of tldm's pastebin gist to a Spoon https://gist.github.com/tdlm/5eba0299f2924a8aaf46\nCode by @tdlm, spoon by Tyler Thrailkill <tyler.b.thrailkill@gmail.com>\n\nhttps://github.com/snowe2010",
    "items": [
      {
        "def": "Pastebin.api_dev_key",
        "desc": "String api developer key. Can be found [here](http://pastebin.com/api)",
        "doc": "String api developer key. Can be found [here](http://pastebin.com/api)",
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "19",
        "name": "api_dev_key",
        "signature": "Pastebin.api_dev_key",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Pastebin.api_user_key",
        "desc": "String api user key. Can be generated [here](http://pastebin.com/api/api_user_key.html)",
        "doc": "String api user key. Can be generated [here](http://pastebin.com/api/api_user_key.html)",
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "24",
        "name": "api_user_key",
        "signature": "Pastebin.api_user_key",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Pastebin:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Pastebin",
        "doc": "Binds hotkeys for Pastebin\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * paste - paste to Pastebin",
        "examples": [],
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "368",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * paste - paste to Pastebin"
        ],
        "returns": [],
        "signature": "Pastebin:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Pastebin.expire",
        "desc": "String indicating how long until the paste expires. Default is 'N' (Never)",
        "doc": "String indicating how long until the paste expires. Default is 'N' (Never)\n\nNotes:\n * Valid expiration times at this time are (current list can be found [here](https://pastebin.com/api#6))\n  * N\n  * 10M\n  * 1H\n  * 1D\n  * 1W\n  * 2W\n  * 1M\n  * 6M\n  * 1Y",
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "34",
        "name": "expire",
        "notes": [
          " * Valid expiration times at this time are (current list can be found [here](https://pastebin.com/api#6))",
          "  * N",
          "  * 10M",
          "  * 1H",
          "  * 1D",
          "  * 1W",
          "  * 2W",
          "  * 1M",
          "  * 6M",
          "  * 1Y"
        ],
        "signature": "Pastebin.expire",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Pastebin.format",
        "desc": "String indicating the format of the paste. Default is 'text' (plain text). ",
        "doc": "String indicating the format of the paste. Default is 'text' (plain text). \n\nNotes:\n * Valid formats at this time are (current list can be found [here](https://pastebin.com/api#5)): \n  * '4cs'\n  * '6502acme'\n  * '6502kickass'\n  * '6502tasm'\n  * 'abap'\n  * 'actionscript'\n  * 'actionscript3'\n  * 'ada'\n  * 'aimms'\n  * 'algol68'\n  * 'apache'\n  * 'applescript'\n  * 'apt_sources'\n  * 'arm'\n  * 'asm'\n  * 'asp'\n  * 'asymptote'\n  * 'autoconf'\n  * 'autohotkey'\n  * 'autoit'\n  * 'avisynth'\n  * 'awk'\n  * 'bascomavr'\n  * 'bash'\n  * 'basic4gl'\n  * 'dos'\n  * 'bibtex'\n  * 'blitzbasic'\n  * 'b3d'\n  * 'bmx'\n  * 'bnf'\n  * 'boo'\n  * 'bf'\n  * 'c'\n  * 'c_winapi'\n  * 'c_mac'\n  * 'cil'\n  * 'csharp'\n  * 'cpp'\n  * 'cpp-winapi'\n  * 'cpp-qt'\n  * 'c_loadrunner'\n  * 'caddcl'\n  * 'cadlisp'\n  * 'ceylon'\n  * 'cfdg'\n  * 'chaiscript'\n  * 'chapel'\n  * 'clojure'\n  * 'klonec'\n  * 'klonecpp'\n  * 'cmake'\n  * 'cobol'\n  * 'coffeescript'\n  * 'cfm'\n  * 'css'\n  * 'cuesheet'\n  * 'd'\n  * 'dart'\n  * 'dcl'\n  * 'dcpu16'\n  * 'dcs'\n  * 'delphi'\n  * 'oxygene'\n  * 'diff'\n  * 'div'\n  * 'dot'\n  * 'e'\n  * 'ezt'\n  * 'ecmascript'\n  * 'eiffel'\n  * 'email'\n  * 'epc'\n  * 'erlang'\n  * 'euphoria'\n  * 'fsharp'\n  * 'falcon'\n  * 'filemaker'\n  * 'fo'\n  * 'f1'\n  * 'fortran'\n  * 'freebasic'\n  * 'freeswitch'\n  * 'gambas'\n  * 'gml'\n  * 'gdb'\n  * 'genero'\n  * 'genie'\n  * 'gettext'\n  * 'go'\n  * 'groovy'\n  * 'gwbasic'\n  * 'haskell'\n  * 'haxe'\n  * 'hicest'\n  * 'hq9plus'\n  * 'html4strict'\n  * 'html5'\n  * 'icon'\n  * 'idl'\n  * 'ini'\n  * 'inno'\n  * 'intercal'\n  * 'io'\n  * 'ispfpanel'\n  * 'j'\n  * 'java'\n  * 'java5'\n  * 'javascript'\n  * 'jcl'\n  * 'jquery'\n  * 'json'\n  * 'julia'\n  * 'kixtart'\n  * 'kotlin'\n  * 'latex'\n  * 'ldif'\n  * 'lb'\n  * 'lsl2'\n  * 'lisp'\n  * 'llvm'\n  * 'locobasic'\n  * 'logtalk'\n  * 'lolcode'\n  * 'lotusformulas'\n  * 'lotusscript'\n  * 'lscript'\n  * 'lua'\n  * 'm68k'\n  * 'magiksf'\n  * 'make'\n  * 'mapbasic'\n  * 'markdown'\n  * 'matlab'\n  * 'mirc'\n  * 'mmix'\n  * 'modula2'\n  * 'modula3'\n  * '68000devpac'\n  * 'mpasm'\n  * 'mxml'\n  * 'mysql'\n  * 'nagios'\n  * 'netrexx'\n  * 'newlisp'\n  * 'nginx'\n  * 'nim'\n  * 'text'\n  * 'nsis'\n  * 'oberon2'\n  * 'objeck'\n  * 'objc'\n  * 'ocaml-brief'\n  * 'ocaml'\n  * 'octave'\n  * 'oorexx'\n  * 'pf'\n  * 'glsl'\n  * 'oobas'\n  * 'oracle11'\n  * 'oracle8'\n  * 'oz'\n  * 'parasail'\n  * 'parigp'\n  * 'pascal'\n  * 'pawn'\n  * 'pcre'\n  * 'per'\n  * 'perl'\n  * 'perl6'\n  * 'php'\n  * 'php-brief'\n  * 'pic16'\n  * 'pike'\n  * 'pixelbender'\n  * 'pli'\n  * 'plsql'\n  * 'postgresql'\n  * 'postscript'\n  * 'povray'\n  * 'powerbuilder'\n  * 'powershell'\n  * 'proftpd'\n  * 'progress'\n  * 'prolog'\n  * 'properties'\n  * 'providex'\n  * 'puppet'\n  * 'purebasic'\n  * 'pycon'\n  * 'python'\n  * 'pys60'\n  * 'q'\n  * 'qbasic'\n  * 'qml'\n  * 'rsplus'\n  * 'racket'\n  * 'rails'\n  * 'rbs'\n  * 'rebol'\n  * 'reg'\n  * 'rexx'\n  * 'robots'\n  * 'rpmspec'\n  * 'ruby'\n  * 'gnuplot'\n  * 'rust'\n  * 'sas'\n  * 'scala'\n  * 'scheme'\n  * 'scilab'\n  * 'scl'\n  * 'sdlbasic'\n  * 'smalltalk'\n  * 'smarty'\n  * 'spark'\n  * 'sparql'\n  * 'sqf'\n  * 'sql'\n  * 'standardml'\n  * 'stonescript'\n  * 'sclang'\n  * 'swift'\n  * 'systemverilog'\n  * 'tsql'\n  * 'tcl'\n  * 'teraterm'\n  * 'thinbasic'\n  * 'typoscript'\n  * 'unicon'\n  * 'uscript'\n  * 'upc'\n  * 'urbi'\n  * 'vala'\n  * 'vbnet'\n  * 'vbscript'\n  * 'vedit'\n  * 'verilog'\n  * 'vhdl'\n  * 'vim'\n  * 'visualprolog'\n  * 'vb'\n  * 'visualfoxpro'\n  * 'whitespace'\n  * 'whois'\n  * 'winbatch'\n  * 'xbasic'\n  * 'xml'\n  * 'xorg_conf'\n  * 'xpp'\n  * 'yaml'\n  * 'z80'\n  * 'zxbasic'",
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "52",
        "name": "format",
        "notes": [
          " * Valid formats at this time are (current list can be found [here](https://pastebin.com/api#5)): ",
          "  * '4cs'",
          "  * '6502acme'",
          "  * '6502kickass'",
          "  * '6502tasm'",
          "  * 'abap'",
          "  * 'actionscript'",
          "  * 'actionscript3'",
          "  * 'ada'",
          "  * 'aimms'",
          "  * 'algol68'",
          "  * 'apache'",
          "  * 'applescript'",
          "  * 'apt_sources'",
          "  * 'arm'",
          "  * 'asm'",
          "  * 'asp'",
          "  * 'asymptote'",
          "  * 'autoconf'",
          "  * 'autohotkey'",
          "  * 'autoit'",
          "  * 'avisynth'",
          "  * 'awk'",
          "  * 'bascomavr'",
          "  * 'bash'",
          "  * 'basic4gl'",
          "  * 'dos'",
          "  * 'bibtex'",
          "  * 'blitzbasic'",
          "  * 'b3d'",
          "  * 'bmx'",
          "  * 'bnf'",
          "  * 'boo'",
          "  * 'bf'",
          "  * 'c'",
          "  * 'c_winapi'",
          "  * 'c_mac'",
          "  * 'cil'",
          "  * 'csharp'",
          "  * 'cpp'",
          "  * 'cpp-winapi'",
          "  * 'cpp-qt'",
          "  * 'c_loadrunner'",
          "  * 'caddcl'",
          "  * 'cadlisp'",
          "  * 'ceylon'",
          "  * 'cfdg'",
          "  * 'chaiscript'",
          "  * 'chapel'",
          "  * 'clojure'",
          "  * 'klonec'",
          "  * 'klonecpp'",
          "  * 'cmake'",
          "  * 'cobol'",
          "  * 'coffeescript'",
          "  * 'cfm'",
          "  * 'css'",
          "  * 'cuesheet'",
          "  * 'd'",
          "  * 'dart'",
          "  * 'dcl'",
          "  * 'dcpu16'",
          "  * 'dcs'",
          "  * 'delphi'",
          "  * 'oxygene'",
          "  * 'diff'",
          "  * 'div'",
          "  * 'dot'",
          "  * 'e'",
          "  * 'ezt'",
          "  * 'ecmascript'",
          "  * 'eiffel'",
          "  * 'email'",
          "  * 'epc'",
          "  * 'erlang'",
          "  * 'euphoria'",
          "  * 'fsharp'",
          "  * 'falcon'",
          "  * 'filemaker'",
          "  * 'fo'",
          "  * 'f1'",
          "  * 'fortran'",
          "  * 'freebasic'",
          "  * 'freeswitch'",
          "  * 'gambas'",
          "  * 'gml'",
          "  * 'gdb'",
          "  * 'genero'",
          "  * 'genie'",
          "  * 'gettext'",
          "  * 'go'",
          "  * 'groovy'",
          "  * 'gwbasic'",
          "  * 'haskell'",
          "  * 'haxe'",
          "  * 'hicest'",
          "  * 'hq9plus'",
          "  * 'html4strict'",
          "  * 'html5'",
          "  * 'icon'",
          "  * 'idl'",
          "  * 'ini'",
          "  * 'inno'",
          "  * 'intercal'",
          "  * 'io'",
          "  * 'ispfpanel'",
          "  * 'j'",
          "  * 'java'",
          "  * 'java5'",
          "  * 'javascript'",
          "  * 'jcl'",
          "  * 'jquery'",
          "  * 'json'",
          "  * 'julia'",
          "  * 'kixtart'",
          "  * 'kotlin'",
          "  * 'latex'",
          "  * 'ldif'",
          "  * 'lb'",
          "  * 'lsl2'",
          "  * 'lisp'",
          "  * 'llvm'",
          "  * 'locobasic'",
          "  * 'logtalk'",
          "  * 'lolcode'",
          "  * 'lotusformulas'",
          "  * 'lotusscript'",
          "  * 'lscript'",
          "  * 'lua'",
          "  * 'm68k'",
          "  * 'magiksf'",
          "  * 'make'",
          "  * 'mapbasic'",
          "  * 'markdown'",
          "  * 'matlab'",
          "  * 'mirc'",
          "  * 'mmix'",
          "  * 'modula2'",
          "  * 'modula3'",
          "  * '68000devpac'",
          "  * 'mpasm'",
          "  * 'mxml'",
          "  * 'mysql'",
          "  * 'nagios'",
          "  * 'netrexx'",
          "  * 'newlisp'",
          "  * 'nginx'",
          "  * 'nim'",
          "  * 'text'",
          "  * 'nsis'",
          "  * 'oberon2'",
          "  * 'objeck'",
          "  * 'objc'",
          "  * 'ocaml-brief'",
          "  * 'ocaml'",
          "  * 'octave'",
          "  * 'oorexx'",
          "  * 'pf'",
          "  * 'glsl'",
          "  * 'oobas'",
          "  * 'oracle11'",
          "  * 'oracle8'",
          "  * 'oz'",
          "  * 'parasail'",
          "  * 'parigp'",
          "  * 'pascal'",
          "  * 'pawn'",
          "  * 'pcre'",
          "  * 'per'",
          "  * 'perl'",
          "  * 'perl6'",
          "  * 'php'",
          "  * 'php-brief'",
          "  * 'pic16'",
          "  * 'pike'",
          "  * 'pixelbender'",
          "  * 'pli'",
          "  * 'plsql'",
          "  * 'postgresql'",
          "  * 'postscript'",
          "  * 'povray'",
          "  * 'powerbuilder'",
          "  * 'powershell'",
          "  * 'proftpd'",
          "  * 'progress'",
          "  * 'prolog'",
          "  * 'properties'",
          "  * 'providex'",
          "  * 'puppet'",
          "  * 'purebasic'",
          "  * 'pycon'",
          "  * 'python'",
          "  * 'pys60'",
          "  * 'q'",
          "  * 'qbasic'",
          "  * 'qml'",
          "  * 'rsplus'",
          "  * 'racket'",
          "  * 'rails'",
          "  * 'rbs'",
          "  * 'rebol'",
          "  * 'reg'",
          "  * 'rexx'",
          "  * 'robots'",
          "  * 'rpmspec'",
          "  * 'ruby'",
          "  * 'gnuplot'",
          "  * 'rust'",
          "  * 'sas'",
          "  * 'scala'",
          "  * 'scheme'",
          "  * 'scilab'",
          "  * 'scl'",
          "  * 'sdlbasic'",
          "  * 'smalltalk'",
          "  * 'smarty'",
          "  * 'spark'",
          "  * 'sparql'",
          "  * 'sqf'",
          "  * 'sql'",
          "  * 'standardml'",
          "  * 'stonescript'",
          "  * 'sclang'",
          "  * 'swift'",
          "  * 'systemverilog'",
          "  * 'tsql'",
          "  * 'tcl'",
          "  * 'teraterm'",
          "  * 'thinbasic'",
          "  * 'typoscript'",
          "  * 'unicon'",
          "  * 'uscript'",
          "  * 'upc'",
          "  * 'urbi'",
          "  * 'vala'",
          "  * 'vbnet'",
          "  * 'vbscript'",
          "  * 'vedit'",
          "  * 'verilog'",
          "  * 'vhdl'",
          "  * 'vim'",
          "  * 'visualprolog'",
          "  * 'vb'",
          "  * 'visualfoxpro'",
          "  * 'whitespace'",
          "  * 'whois'",
          "  * 'winbatch'",
          "  * 'xbasic'",
          "  * 'xml'",
          "  * 'xorg_conf'",
          "  * 'xpp'",
          "  * 'yaml'",
          "  * 'z80'",
          "  * 'zxbasic'"
        ],
        "signature": "Pastebin.format",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Pastebin.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "313",
        "name": "logger",
        "signature": "Pastebin.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Pastebin:paste(private, expire, format)",
        "desc": "Pastes an item to Pastebin using the Pastebin api",
        "doc": "Pastes an item to Pastebin using the Pastebin api\n\nParameters:\n * private - Integer specifying whether the paste should be public, private, or unlisted. Defaults to obj.private (0=public)\n * expire - String specifying the TTL for the paste. Defaults to obj.expire ('N'=never). Valid values are listed on obj.expire\n * format - String specifying the appropriate Pastebin format enum. Default is obj.format ('text'). Valid values are listed on obj.format",
        "examples": [],
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "318",
        "name": "paste",
        "notes": [],
        "parameters": [
          " * private - Integer specifying whether the paste should be public, private, or unlisted. Defaults to obj.private (0=public)",
          " * expire - String specifying the TTL for the paste. Defaults to obj.expire ('N'=never). Valid values are listed on obj.expire",
          " * format - String specifying the appropriate Pastebin format enum. Default is obj.format ('text'). Valid values are listed on obj.format"
        ],
        "returns": [],
        "signature": "Pastebin:paste(private, expire, format)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Pastebin.private",
        "desc": "Integer indicating whether a paste should be public, unlisted, or private. Default is 0 (public). (0=public, 1=unlisted, 2=private)",
        "doc": "Integer indicating whether a paste should be public, unlisted, or private. Default is 0 (public). (0=public, 1=unlisted, 2=private)",
        "file": "Source/Pastebin.spoon/init.lua",
        "lineno": "29",
        "name": "private",
        "signature": "Pastebin.private",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "Pastebin",
    "stripped_doc": "\nConversion of tldm's pastebin gist to a Spoon https://gist.github.com/tdlm/5eba0299f2924a8aaf46\nCode by @tdlm, spoon by Tyler Thrailkill <tyler.b.thrailkill@gmail.com>\n\nhttps://github.com/snowe2010",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "PersonalHotspot:bindHotkeys(mapping) -> Self",
        "desc": "Binds hotkey mappings for this spoon.",
        "doc": "Binds hotkey mappings for this spoon.\n\nParameters:\n * mapping (Table) - A table with keys who's names correspond to methods of this spoon, and values that represent hotkey mappings. For example:\n   * `{ toggle = { {\"cmd\", \"option\", \"ctrl\" }, \"h\" }`\n\nReturns:\n * Self",
        "examples": [],
        "file": "Source/PersonalHotspot.spoon/init.lua",
        "lineno": "216",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping (Table) - A table with keys who's names correspond to methods of this spoon, and values that represent hotkey mappings. For example:\n   * `{ toggle = { {\"cmd\", \"option\", \"ctrl\" }, \"h\" }`"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:bindHotkeys(mapping) -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PersonalHotspot:connect() -> Self",
        "desc": "Tries to connect to the personal hotspot named in `PersonalHotspot.hotspotName`. If `PersonalHotspot.hotspotName` is `nil`, the first hotspot in the Wi-Fi menu will be selected, and `PersonalHotspot.hotspotName` will be assigned to the name of that hotspot. Once connected to the hotspot, the applications specified in `PersonalHotspot.appsToKill` are killed.",
        "doc": "Tries to connect to the personal hotspot named in `PersonalHotspot.hotspotName`. If `PersonalHotspot.hotspotName` is `nil`, the first hotspot in the Wi-Fi menu will be selected, and `PersonalHotspot.hotspotName` will be assigned to the name of that hotspot. Once connected to the hotspot, the applications specified in `PersonalHotspot.appsToKill` are killed.\n\nParameters:\n * None\n\nReturns:\n * Self\n\nNotes:\n * If there are no hotspots with the name in `PersonalHotspot.hotspotName`, or if `PersonalHotspot.hotspotName` is `nil` and there are no hotspots in the Wi-Fi menu, the Wi-Fi menu will be closed after `PersonalHotspot.timeout` seconds.",
        "examples": [],
        "file": "Source/PersonalHotspot.spoon/init.lua",
        "lineno": "139",
        "name": "connect",
        "notes": [
          " * If there are no hotspots with the name in `PersonalHotspot.hotspotName`, or if `PersonalHotspot.hotspotName` is `nil` and there are no hotspots in the Wi-Fi menu, the Wi-Fi menu will be closed after `PersonalHotspot.timeout` seconds."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:connect() -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PersonalHotspot:disconnect() -> Self",
        "desc": "If currently connected to the personal hotspot named in `PersonalHotspot.hotspotName`, this method will disconnect from that hotspot and open the applications specified in `PersonalHostspot.appsToKill`.",
        "doc": "If currently connected to the personal hotspot named in `PersonalHotspot.hotspotName`, this method will disconnect from that hotspot and open the applications specified in `PersonalHostspot.appsToKill`.\n\nParameters:\n * None\n\nReturns:\n * Self",
        "examples": [],
        "file": "Source/PersonalHotspot.spoon/init.lua",
        "lineno": "172",
        "name": "disconnect",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:disconnect() -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PersonalHotspot:toggle() -> Self",
        "desc": "Toggles personal hotspot connection.",
        "doc": "Toggles personal hotspot connection.\n\nParameters:\n * None\n\nReturns:\n * Self\n\nNotes:\n * If the current wireless network name is `PersonalHotspot.hotspotName` this method calls `PersonalHotspot:disconnect()`, otherwise this method will call `PersonalHotspot:connect()`.",
        "examples": [],
        "file": "Source/PersonalHotspot.spoon/init.lua",
        "lineno": "194",
        "name": "toggle",
        "notes": [
          " * If the current wireless network name is `PersonalHotspot.hotspotName` this method calls `PersonalHotspot:disconnect()`, otherwise this method will call `PersonalHotspot:connect()`."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:toggle() -> Self",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "PersonalHotspot.appsToKill (List)",
        "desc": "A list of strings representing applications to kill/open, when `PersonalHotspot:connect()` and `PersonalHotspot:disconnect()` are called respectively.",
        "doc": "A list of strings representing applications to kill/open, when `PersonalHotspot:connect()` and `PersonalHotspot:disconnect()` are called respectively.\n\nNotes:\n * Each string should be either:\n  * a bundle ID string as per `hs.application:bundleID()`, or\n  * an application name string as per `hs.application:name()`.",
        "file": "Source/PersonalHotspot.spoon/init.lua",
        "lineno": "116",
        "name": "appsToKill",
        "notes": [
          " * Each string should be either:",
          "  * a bundle ID string as per `hs.application:bundleID()`, or",
          "  * an application name string as per `hs.application:name()`."
        ],
        "signature": "PersonalHotspot.appsToKill (List)",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PersonalHotspot.hotspotName (String)",
        "desc": "The name of the personal hotspot you want to connect/disconnect from, e.g., \"John Appleseed’s iPhone\".",
        "doc": "The name of the personal hotspot you want to connect/disconnect from, e.g., \"John Appleseed’s iPhone\".\n\nNotes:\n * You can see the names of available hotspots by clicking on the Wi-Fi icon in the macOS menu bar and looking for menu items under the \"Personal Hotspot(s)\" heading.",
        "file": "Source/PersonalHotspot.spoon/init.lua",
        "lineno": "126",
        "name": "hotspotName",
        "notes": [
          " * You can see the names of available hotspots by clicking on the Wi-Fi icon in the macOS menu bar and looking for menu items under the \"Personal Hotspot(s)\" heading."
        ],
        "signature": "PersonalHotspot.hotspotName (String)",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PersonalHotspot.timeout (Number)",
        "desc": "The number of seconds to wait for personal hotspot to appear in Wi-Fi menu before attempting to connect/disconnect. Default is 3 seconds.",
        "doc": "The number of seconds to wait for personal hotspot to appear in Wi-Fi menu before attempting to connect/disconnect. Default is 3 seconds.",
        "file": "Source/PersonalHotspot.spoon/init.lua",
        "lineno": "134",
        "name": "timeout",
        "signature": "PersonalHotspot.timeout (Number)",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Connect, disconnect, or toggle connection to/from a personal hotspot. Optionally kills/opens a list of apps on connect/disconnect respectively.",
    "doc": "Connect, disconnect, or toggle connection to/from a personal hotspot. Optionally kills/opens a list of apps on connect/disconnect respectively.\n\nExample configuration (using SpoonInstall.spoon):\n```\nspoon.SpoonInstall:andUse(\n  \"PersonalHotspot\",\n  {\n    config = {\n      hotspotName = \"John Appleseed’s iPhone\",\n      appsToKill = {\n        \"Arq\",\n        \"Arq Agent\",\n        \"Dropbox\"\n      }\n    },\n    hotkeys = {\n      toggle = {{\"cmd\", \"option\", \"ctrl\"}, \"h\"}\n    }\n  }\n)\n```\n\nIf `PersonalHotspot.hotspotName` isn't set, the first personal hotspot in the Wi-Fi menu will be selected, and `PersonalHotspot.hotspotName` will be set to the name of that hotspot.",
    "items": [
      {
        "def": "PersonalHotspot.appsToKill (List)",
        "desc": "A list of strings representing applications to kill/open, when `PersonalHotspot:connect()` and `PersonalHotspot:disconnect()` are called respectively.",
        "doc": "A list of strings representing applications to kill/open, when `PersonalHotspot:connect()` and `PersonalHotspot:disconnect()` are called respectively.\n\nNotes:\n * Each string should be either:\n  * a bundle ID string as per `hs.application:bundleID()`, or\n  * an application name string as per `hs.application:name()`.",
        "file": "Source/PersonalHotspot.spoon/init.lua",
        "lineno": "116",
        "name": "appsToKill",
        "notes": [
          " * Each string should be either:",
          "  * a bundle ID string as per `hs.application:bundleID()`, or",
          "  * an application name string as per `hs.application:name()`."
        ],
        "signature": "PersonalHotspot.appsToKill (List)",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PersonalHotspot:bindHotkeys(mapping) -> Self",
        "desc": "Binds hotkey mappings for this spoon.",
        "doc": "Binds hotkey mappings for this spoon.\n\nParameters:\n * mapping (Table) - A table with keys who's names correspond to methods of this spoon, and values that represent hotkey mappings. For example:\n   * `{ toggle = { {\"cmd\", \"option\", \"ctrl\" }, \"h\" }`\n\nReturns:\n * Self",
        "examples": [],
        "file": "Source/PersonalHotspot.spoon/init.lua",
        "lineno": "216",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping (Table) - A table with keys who's names correspond to methods of this spoon, and values that represent hotkey mappings. For example:\n   * `{ toggle = { {\"cmd\", \"option\", \"ctrl\" }, \"h\" }`"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:bindHotkeys(mapping) -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PersonalHotspot:connect() -> Self",
        "desc": "Tries to connect to the personal hotspot named in `PersonalHotspot.hotspotName`. If `PersonalHotspot.hotspotName` is `nil`, the first hotspot in the Wi-Fi menu will be selected, and `PersonalHotspot.hotspotName` will be assigned to the name of that hotspot. Once connected to the hotspot, the applications specified in `PersonalHotspot.appsToKill` are killed.",
        "doc": "Tries to connect to the personal hotspot named in `PersonalHotspot.hotspotName`. If `PersonalHotspot.hotspotName` is `nil`, the first hotspot in the Wi-Fi menu will be selected, and `PersonalHotspot.hotspotName` will be assigned to the name of that hotspot. Once connected to the hotspot, the applications specified in `PersonalHotspot.appsToKill` are killed.\n\nParameters:\n * None\n\nReturns:\n * Self\n\nNotes:\n * If there are no hotspots with the name in `PersonalHotspot.hotspotName`, or if `PersonalHotspot.hotspotName` is `nil` and there are no hotspots in the Wi-Fi menu, the Wi-Fi menu will be closed after `PersonalHotspot.timeout` seconds.",
        "examples": [],
        "file": "Source/PersonalHotspot.spoon/init.lua",
        "lineno": "139",
        "name": "connect",
        "notes": [
          " * If there are no hotspots with the name in `PersonalHotspot.hotspotName`, or if `PersonalHotspot.hotspotName` is `nil` and there are no hotspots in the Wi-Fi menu, the Wi-Fi menu will be closed after `PersonalHotspot.timeout` seconds."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:connect() -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PersonalHotspot:disconnect() -> Self",
        "desc": "If currently connected to the personal hotspot named in `PersonalHotspot.hotspotName`, this method will disconnect from that hotspot and open the applications specified in `PersonalHostspot.appsToKill`.",
        "doc": "If currently connected to the personal hotspot named in `PersonalHotspot.hotspotName`, this method will disconnect from that hotspot and open the applications specified in `PersonalHostspot.appsToKill`.\n\nParameters:\n * None\n\nReturns:\n * Self",
        "examples": [],
        "file": "Source/PersonalHotspot.spoon/init.lua",
        "lineno": "172",
        "name": "disconnect",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:disconnect() -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PersonalHotspot.hotspotName (String)",
        "desc": "The name of the personal hotspot you want to connect/disconnect from, e.g., \"John Appleseed’s iPhone\".",
        "doc": "The name of the personal hotspot you want to connect/disconnect from, e.g., \"John Appleseed’s iPhone\".\n\nNotes:\n * You can see the names of available hotspots by clicking on the Wi-Fi icon in the macOS menu bar and looking for menu items under the \"Personal Hotspot(s)\" heading.",
        "file": "Source/PersonalHotspot.spoon/init.lua",
        "lineno": "126",
        "name": "hotspotName",
        "notes": [
          " * You can see the names of available hotspots by clicking on the Wi-Fi icon in the macOS menu bar and looking for menu items under the \"Personal Hotspot(s)\" heading."
        ],
        "signature": "PersonalHotspot.hotspotName (String)",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PersonalHotspot.timeout (Number)",
        "desc": "The number of seconds to wait for personal hotspot to appear in Wi-Fi menu before attempting to connect/disconnect. Default is 3 seconds.",
        "doc": "The number of seconds to wait for personal hotspot to appear in Wi-Fi menu before attempting to connect/disconnect. Default is 3 seconds.",
        "file": "Source/PersonalHotspot.spoon/init.lua",
        "lineno": "134",
        "name": "timeout",
        "signature": "PersonalHotspot.timeout (Number)",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PersonalHotspot:toggle() -> Self",
        "desc": "Toggles personal hotspot connection.",
        "doc": "Toggles personal hotspot connection.\n\nParameters:\n * None\n\nReturns:\n * Self\n\nNotes:\n * If the current wireless network name is `PersonalHotspot.hotspotName` this method calls `PersonalHotspot:disconnect()`, otherwise this method will call `PersonalHotspot:connect()`.",
        "examples": [],
        "file": "Source/PersonalHotspot.spoon/init.lua",
        "lineno": "194",
        "name": "toggle",
        "notes": [
          " * If the current wireless network name is `PersonalHotspot.hotspotName` this method calls `PersonalHotspot:disconnect()`, otherwise this method will call `PersonalHotspot:connect()`."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:toggle() -> Self",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "PersonalHotspot",
    "stripped_doc": "\nExample configuration (using SpoonInstall.spoon):\n```\nspoon.SpoonInstall:andUse(\n  \"PersonalHotspot\",\n  {\n    config = {\n      hotspotName = \"John Appleseed’s iPhone\",\n      appsToKill = {\n        \"Arq\",\n        \"Arq Agent\",\n        \"Dropbox\"\n      }\n    },\n    hotkeys = {\n      toggle = {{\"cmd\", \"option\", \"ctrl\"}, \"h\"}\n    }\n  }\n)\n```\n\nIf `PersonalHotspot.hotspotName` isn't set, the first personal hotspot in the Wi-Fi menu will be selected, and `PersonalHotspot.hotspotName` will be set to the name of that hotspot.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "PopupTranslateSelection:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for PopupTranslateSelection",
        "doc": "Binds hotkeys for PopupTranslateSelection\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * `translate` - translate the selected text without specifying source/destination languages (source defaults to auto-detect, destination defaults to your last choice or to English)\n  * `translate_to_<lang>` - translate the selected text to the given destination language. Source language will be auto-detected.\n  * `translate_from_<lang>` - translate the selected text from the given destination language. Destination language will default to your last choice, or to English.\n  * `translate_<from>_<to>` - translate the selected text between the given languages.\n\nExamples:\n * Sample value for `mapping`:\n```\n {\n    translate_to_en = { { \"ctrl\", \"alt\", \"cmd\" }, \"e\" },\n    translate_to_de = { { \"ctrl\", \"alt\", \"cmd\" }, \"d\" },\n    translate_to_es = { { \"ctrl\", \"alt\", \"cmd\" }, \"s\" },\n    translate_de_en = { { \"shift\", \"ctrl\", \"alt\", \"cmd\" }, \"e\" },\n    translate_en_de = { { \"shift\", \"ctrl\", \"alt\", \"cmd\" }, \"d\" },\n }\n```",
        "examples": [
          " * Sample value for `mapping`:",
          "```",
          " {",
          "    translate_to_en = { { \"ctrl\", \"alt\", \"cmd\" }, \"e\" },",
          "    translate_to_de = { { \"ctrl\", \"alt\", \"cmd\" }, \"d\" },",
          "    translate_to_es = { { \"ctrl\", \"alt\", \"cmd\" }, \"s\" },",
          "    translate_de_en = { { \"shift\", \"ctrl\", \"alt\", \"cmd\" }, \"e\" },",
          "    translate_en_de = { { \"shift\", \"ctrl\", \"alt\", \"cmd\" }, \"d\" },",
          " }",
          "```"
        ],
        "file": "Source/PopupTranslateSelection.spoon/init.lua",
        "lineno": "112",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * `translate` - translate the selected text without specifying source/destination languages (source defaults to auto-detect, destination defaults to your last choice or to English)\n   * `translate_to_<lang>` - translate the selected text to the given destination language. Source language will be auto-detected.\n   * `translate_from_<lang>` - translate the selected text from the given destination language. Destination language will default to your last choice, or to English.\n   * `translate_<from>_<to>` - translate the selected text between the given languages."
        ],
        "returns": [],
        "signature": "PopupTranslateSelection:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PopupTranslateSelection:translatePopup(text, to, from)",
        "desc": "Display a translation popup with the translation of the given text between the specified languages",
        "doc": "Display a translation popup with the translation of the given text between the specified languages\n\nParameters:\n * text - string containing the text to translate\n * to - two-letter code for destination language. If `nil`, Google Translate will use your most recent selection, or default to English\n * from - two-letter code for source language. If `nil`, Google Translate will try to auto-detect it\n\nReturns:\n * The PopupTranslateSelection object",
        "examples": [],
        "file": "Source/PopupTranslateSelection.spoon/init.lua",
        "lineno": "46",
        "name": "translatePopup",
        "notes": [],
        "parameters": [
          " * text - string containing the text to translate",
          " * to - two-letter code for destination language. If `nil`, Google Translate will use your most recent selection, or default to English",
          " * from - two-letter code for source language. If `nil`, Google Translate will try to auto-detect it"
        ],
        "returns": [
          " * The PopupTranslateSelection object"
        ],
        "signature": "PopupTranslateSelection:translatePopup(text, to, from)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PopupTranslateSelection:translateSelectionPopup(to, from)",
        "desc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages",
        "doc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages\n\nParameters:\n * to - two-letter code for destination language. If `nil`, Google Translate will use your most recent selection, or default to English\n * from - two-letter code for source language. If `nil`, Google Translate will try to auto-detect it\n\nReturns:\n * The PopupTranslateSelection object",
        "examples": [],
        "file": "Source/PopupTranslateSelection.spoon/init.lua",
        "lineno": "97",
        "name": "translateSelectionPopup",
        "notes": [],
        "parameters": [
          " * to - two-letter code for destination language. If `nil`, Google Translate will use your most recent selection, or default to English",
          " * from - two-letter code for source language. If `nil`, Google Translate will try to auto-detect it"
        ],
        "returns": [
          " * The PopupTranslateSelection object"
        ],
        "signature": "PopupTranslateSelection:translateSelectionPopup(to, from)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "PopupTranslateSelection.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/PopupTranslateSelection.spoon/init.lua",
        "lineno": "36",
        "name": "logger",
        "signature": "PopupTranslateSelection.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PopupTranslateSelection.popup_close_on_escape",
        "desc": "If true, pressing ESC on the popup window will close it. Defaults to `true`",
        "doc": "If true, pressing ESC on the popup window will close it. Defaults to `true`",
        "file": "Source/PopupTranslateSelection.spoon/init.lua",
        "lineno": "31",
        "name": "popup_close_on_escape",
        "signature": "PopupTranslateSelection.popup_close_on_escape",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PopupTranslateSelection.popup_size",
        "desc": "`hs.geometry` object representing the size to use for the translation popup window. Defaults to `hs.geometry.size(770, 610)`.",
        "doc": "`hs.geometry` object representing the size to use for the translation popup window. Defaults to `hs.geometry.size(770, 610)`.",
        "file": "Source/PopupTranslateSelection.spoon/init.lua",
        "lineno": "21",
        "name": "popup_size",
        "signature": "PopupTranslateSelection.popup_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PopupTranslateSelection.popup_style",
        "desc": "Value representing the window style to be used for the translation popup window. This value needs to be a valid argument to [`hs.webview.setStyle()`](http://www.hammerspoon.org/docs/hs.webview.html#windowStyle) (i.e. a combination of values from [`hs.webview.windowMasks`](http://www.hammerspoon.org/docs/hs.webview.html#windowMasks[]). Default value: `hs.webview.windowMasks.utility|hs.webview.windowMasks.HUD|hs.webview.windowMasks.titled|hs.webview.windowMasks.closable`",
        "doc": "Value representing the window style to be used for the translation popup window. This value needs to be a valid argument to [`hs.webview.setStyle()`](http://www.hammerspoon.org/docs/hs.webview.html#windowStyle) (i.e. a combination of values from [`hs.webview.windowMasks`](http://www.hammerspoon.org/docs/hs.webview.html#windowMasks[]). Default value: `hs.webview.windowMasks.utility|hs.webview.windowMasks.HUD|hs.webview.windowMasks.titled|hs.webview.windowMasks.closable`",
        "file": "Source/PopupTranslateSelection.spoon/init.lua",
        "lineno": "26",
        "name": "popup_style",
        "signature": "PopupTranslateSelection.popup_style",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Show a popup window with the translation of the currently selected (or other) text",
    "doc": "Show a popup window with the translation of the currently selected (or other) text\n\nSupported language codes are listed at https://cloud.google.com/translate/docs/languages\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/PopupTranslateSelection.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/PopupTranslateSelection.spoon.zip)",
    "items": [
      {
        "def": "PopupTranslateSelection:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for PopupTranslateSelection",
        "doc": "Binds hotkeys for PopupTranslateSelection\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * `translate` - translate the selected text without specifying source/destination languages (source defaults to auto-detect, destination defaults to your last choice or to English)\n  * `translate_to_<lang>` - translate the selected text to the given destination language. Source language will be auto-detected.\n  * `translate_from_<lang>` - translate the selected text from the given destination language. Destination language will default to your last choice, or to English.\n  * `translate_<from>_<to>` - translate the selected text between the given languages.\n\nExamples:\n * Sample value for `mapping`:\n```\n {\n    translate_to_en = { { \"ctrl\", \"alt\", \"cmd\" }, \"e\" },\n    translate_to_de = { { \"ctrl\", \"alt\", \"cmd\" }, \"d\" },\n    translate_to_es = { { \"ctrl\", \"alt\", \"cmd\" }, \"s\" },\n    translate_de_en = { { \"shift\", \"ctrl\", \"alt\", \"cmd\" }, \"e\" },\n    translate_en_de = { { \"shift\", \"ctrl\", \"alt\", \"cmd\" }, \"d\" },\n }\n```",
        "examples": [
          " * Sample value for `mapping`:",
          "```",
          " {",
          "    translate_to_en = { { \"ctrl\", \"alt\", \"cmd\" }, \"e\" },",
          "    translate_to_de = { { \"ctrl\", \"alt\", \"cmd\" }, \"d\" },",
          "    translate_to_es = { { \"ctrl\", \"alt\", \"cmd\" }, \"s\" },",
          "    translate_de_en = { { \"shift\", \"ctrl\", \"alt\", \"cmd\" }, \"e\" },",
          "    translate_en_de = { { \"shift\", \"ctrl\", \"alt\", \"cmd\" }, \"d\" },",
          " }",
          "```"
        ],
        "file": "Source/PopupTranslateSelection.spoon/init.lua",
        "lineno": "112",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * `translate` - translate the selected text without specifying source/destination languages (source defaults to auto-detect, destination defaults to your last choice or to English)\n   * `translate_to_<lang>` - translate the selected text to the given destination language. Source language will be auto-detected.\n   * `translate_from_<lang>` - translate the selected text from the given destination language. Destination language will default to your last choice, or to English.\n   * `translate_<from>_<to>` - translate the selected text between the given languages."
        ],
        "returns": [],
        "signature": "PopupTranslateSelection:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PopupTranslateSelection.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/PopupTranslateSelection.spoon/init.lua",
        "lineno": "36",
        "name": "logger",
        "signature": "PopupTranslateSelection.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PopupTranslateSelection.popup_close_on_escape",
        "desc": "If true, pressing ESC on the popup window will close it. Defaults to `true`",
        "doc": "If true, pressing ESC on the popup window will close it. Defaults to `true`",
        "file": "Source/PopupTranslateSelection.spoon/init.lua",
        "lineno": "31",
        "name": "popup_close_on_escape",
        "signature": "PopupTranslateSelection.popup_close_on_escape",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PopupTranslateSelection.popup_size",
        "desc": "`hs.geometry` object representing the size to use for the translation popup window. Defaults to `hs.geometry.size(770, 610)`.",
        "doc": "`hs.geometry` object representing the size to use for the translation popup window. Defaults to `hs.geometry.size(770, 610)`.",
        "file": "Source/PopupTranslateSelection.spoon/init.lua",
        "lineno": "21",
        "name": "popup_size",
        "signature": "PopupTranslateSelection.popup_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PopupTranslateSelection.popup_style",
        "desc": "Value representing the window style to be used for the translation popup window. This value needs to be a valid argument to [`hs.webview.setStyle()`](http://www.hammerspoon.org/docs/hs.webview.html#windowStyle) (i.e. a combination of values from [`hs.webview.windowMasks`](http://www.hammerspoon.org/docs/hs.webview.html#windowMasks[]). Default value: `hs.webview.windowMasks.utility|hs.webview.windowMasks.HUD|hs.webview.windowMasks.titled|hs.webview.windowMasks.closable`",
        "doc": "Value representing the window style to be used for the translation popup window. This value needs to be a valid argument to [`hs.webview.setStyle()`](http://www.hammerspoon.org/docs/hs.webview.html#windowStyle) (i.e. a combination of values from [`hs.webview.windowMasks`](http://www.hammerspoon.org/docs/hs.webview.html#windowMasks[]). Default value: `hs.webview.windowMasks.utility|hs.webview.windowMasks.HUD|hs.webview.windowMasks.titled|hs.webview.windowMasks.closable`",
        "file": "Source/PopupTranslateSelection.spoon/init.lua",
        "lineno": "26",
        "name": "popup_style",
        "signature": "PopupTranslateSelection.popup_style",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PopupTranslateSelection:translatePopup(text, to, from)",
        "desc": "Display a translation popup with the translation of the given text between the specified languages",
        "doc": "Display a translation popup with the translation of the given text between the specified languages\n\nParameters:\n * text - string containing the text to translate\n * to - two-letter code for destination language. If `nil`, Google Translate will use your most recent selection, or default to English\n * from - two-letter code for source language. If `nil`, Google Translate will try to auto-detect it\n\nReturns:\n * The PopupTranslateSelection object",
        "examples": [],
        "file": "Source/PopupTranslateSelection.spoon/init.lua",
        "lineno": "46",
        "name": "translatePopup",
        "notes": [],
        "parameters": [
          " * text - string containing the text to translate",
          " * to - two-letter code for destination language. If `nil`, Google Translate will use your most recent selection, or default to English",
          " * from - two-letter code for source language. If `nil`, Google Translate will try to auto-detect it"
        ],
        "returns": [
          " * The PopupTranslateSelection object"
        ],
        "signature": "PopupTranslateSelection:translatePopup(text, to, from)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PopupTranslateSelection:translateSelectionPopup(to, from)",
        "desc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages",
        "doc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages\n\nParameters:\n * to - two-letter code for destination language. If `nil`, Google Translate will use your most recent selection, or default to English\n * from - two-letter code for source language. If `nil`, Google Translate will try to auto-detect it\n\nReturns:\n * The PopupTranslateSelection object",
        "examples": [],
        "file": "Source/PopupTranslateSelection.spoon/init.lua",
        "lineno": "97",
        "name": "translateSelectionPopup",
        "notes": [],
        "parameters": [
          " * to - two-letter code for destination language. If `nil`, Google Translate will use your most recent selection, or default to English",
          " * from - two-letter code for source language. If `nil`, Google Translate will try to auto-detect it"
        ],
        "returns": [
          " * The PopupTranslateSelection object"
        ],
        "signature": "PopupTranslateSelection:translateSelectionPopup(to, from)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "PopupTranslateSelection",
    "stripped_doc": "\nSupported language codes are listed at https://cloud.google.com/translate/docs/languages\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/PopupTranslateSelection.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/PopupTranslateSelection.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "PushToTalk:init()",
        "desc": "Starts menu and key watcher",
        "doc": "Starts menu and key watcher\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/PushToTalk.spoon/init.lua",
        "lineno": "134",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "PushToTalk:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PushToTalk:stop()",
        "desc": "Stops PushToTalk",
        "doc": "Stops PushToTalk\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/PushToTalk.spoon/init.lua",
        "lineno": "154",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "PushToTalk:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PushToTalk:toggleStates()",
        "desc": "Cycle states in order",
        "doc": "Cycle states in order\n\nParameters:\n * states - A array of states to toggle. For example: `{'push-to-talk', 'release-to-talk'}`",
        "examples": [],
        "file": "Source/PushToTalk.spoon/init.lua",
        "lineno": "166",
        "name": "toggleStates",
        "notes": [],
        "parameters": [
          " * states - A array of states to toggle. For example: `{'push-to-talk', 'release-to-talk'}`"
        ],
        "returns": [],
        "signature": "PushToTalk:toggleStates()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "PushToTalk.app_switcher",
        "desc": "Takes mapping from application name to mic state.",
        "doc": "Takes mapping from application name to mic state.\n\nNotes:\n * For example this `{ ['zoom.us'] = 'push-to-talk' }` will switch mic to `push-to-talk` state when Zoom app starts.",
        "file": "Source/PushToTalk.spoon/init.lua",
        "lineno": "35",
        "name": "app_switcher",
        "notes": [
          " * For example this `{ ['zoom.us'] = 'push-to-talk' }` will switch mic to `push-to-talk` state when Zoom app starts."
        ],
        "signature": "PushToTalk.app_switcher",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PushToTalk.detect_on_start",
        "desc": "Check running applications when starting PushToTalk.",
        "doc": "Check running applications when starting PushToTalk.\n\nNotes:\n * Defaults to false for backwards compatibility. With this disabled, PushToTalk will only change state when applications are launched or quit while PushToTalk is already active. Enable this to look through list of running applications when PushToTalk is started. If multiple apps defined in app_switcher are running, it will set state to the first one it encounters.",
        "file": "Source/PushToTalk.spoon/init.lua",
        "lineno": "43",
        "name": "detect_on_start",
        "notes": [
          " * Defaults to false for backwards compatibility. With this disabled, PushToTalk will only change state when applications are launched or quit while PushToTalk is already active. Enable this to look through list of running applications when PushToTalk is started. If multiple apps defined in app_switcher are running, it will set state to the first one it encounters."
        ],
        "signature": "PushToTalk.detect_on_start",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Implements push-to-talk and push-to-mute functionality with `fn` key.",
    "doc": "Implements push-to-talk and push-to-mute functionality with `fn` key.\nI implemented this after reading Gitlab remote handbook https://about.gitlab.com/handbook/communication/ about Shush utility.\n\nMy workflow:\n\nWhen Zoom starts, PushToTalk automatically changes mic state from `default`\nto `push-to-talk`, so I need to press `fn` key to unmute myself and speak.\nIf I need to actively chat in group meeting or it's one-on-one meeting,\nI'm switching to `push-to-mute` state, so mic will be unmute by default and `fn` key mutes it.\n\nPushToTalk has menubar with colorful icons so you can easily see current mic state.\n\nSample config: `spoon.SpoonInstall:andUse(\"PushToTalk\", {start = true, config = { app_switcher = { ['zoom.us'] = 'push-to-talk' }}})`\nand separate keybinding to toggle states with lambda function `function() spoon.PushToTalk.toggleStates({'push-to-talk', 'release-to-talk'}) end`\n\nCheck out my config: https://github.com/skrypka/hammerspoon_config/blob/master/init.lua",
    "items": [
      {
        "def": "PushToTalk.app_switcher",
        "desc": "Takes mapping from application name to mic state.",
        "doc": "Takes mapping from application name to mic state.\n\nNotes:\n * For example this `{ ['zoom.us'] = 'push-to-talk' }` will switch mic to `push-to-talk` state when Zoom app starts.",
        "file": "Source/PushToTalk.spoon/init.lua",
        "lineno": "35",
        "name": "app_switcher",
        "notes": [
          " * For example this `{ ['zoom.us'] = 'push-to-talk' }` will switch mic to `push-to-talk` state when Zoom app starts."
        ],
        "signature": "PushToTalk.app_switcher",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PushToTalk.detect_on_start",
        "desc": "Check running applications when starting PushToTalk.",
        "doc": "Check running applications when starting PushToTalk.\n\nNotes:\n * Defaults to false for backwards compatibility. With this disabled, PushToTalk will only change state when applications are launched or quit while PushToTalk is already active. Enable this to look through list of running applications when PushToTalk is started. If multiple apps defined in app_switcher are running, it will set state to the first one it encounters.",
        "file": "Source/PushToTalk.spoon/init.lua",
        "lineno": "43",
        "name": "detect_on_start",
        "notes": [
          " * Defaults to false for backwards compatibility. With this disabled, PushToTalk will only change state when applications are launched or quit while PushToTalk is already active. Enable this to look through list of running applications when PushToTalk is started. If multiple apps defined in app_switcher are running, it will set state to the first one it encounters."
        ],
        "signature": "PushToTalk.detect_on_start",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PushToTalk:init()",
        "desc": "Starts menu and key watcher",
        "doc": "Starts menu and key watcher\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/PushToTalk.spoon/init.lua",
        "lineno": "134",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "PushToTalk:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PushToTalk:stop()",
        "desc": "Stops PushToTalk",
        "doc": "Stops PushToTalk\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/PushToTalk.spoon/init.lua",
        "lineno": "154",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "PushToTalk:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PushToTalk:toggleStates()",
        "desc": "Cycle states in order",
        "doc": "Cycle states in order\n\nParameters:\n * states - A array of states to toggle. For example: `{'push-to-talk', 'release-to-talk'}`",
        "examples": [],
        "file": "Source/PushToTalk.spoon/init.lua",
        "lineno": "166",
        "name": "toggleStates",
        "notes": [],
        "parameters": [
          " * states - A array of states to toggle. For example: `{'push-to-talk', 'release-to-talk'}`"
        ],
        "returns": [],
        "signature": "PushToTalk:toggleStates()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "PushToTalk",
    "stripped_doc": "I implemented this after reading Gitlab remote handbook https://about.gitlab.com/handbook/communication/ about Shush utility.\n\nMy workflow:\n\nWhen Zoom starts, PushToTalk automatically changes mic state from `default`\nto `push-to-talk`, so I need to press `fn` key to unmute myself and speak.\nIf I need to actively chat in group meeting or it's one-on-one meeting,\nI'm switching to `push-to-mute` state, so mic will be unmute by default and `fn` key mutes it.\n\nPushToTalk has menubar with colorful icons so you can easily see current mic state.\n\nSample config: `spoon.SpoonInstall:andUse(\"PushToTalk\", {start = true, config = { app_switcher = { ['zoom.us'] = 'push-to-talk' }}})`\nand separate keybinding to toggle states with lambda function `function() spoon.PushToTalk.toggleStates({'push-to-talk', 'release-to-talk'}) end`\n\nCheck out my config: https://github.com/skrypka/hammerspoon_config/blob/master/init.lua",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "RecursiveBinder.recursiveBind(keymap)",
        "desc": "Bind sequential keys by a nested keymap.",
        "doc": "Bind sequential keys by a nested keymap.\n\nParameters:\n * keymap - A table that specifies the mapping.\n\nReturns:\n * A function to start. Bind it to a initial key binding.\n\nNotes:\n * Spec of keymap:\n  * Every key is of format {{modifers}, key, (optional) description}\n  * The first two element is what you usually pass into a hs.hotkey.bind() function.\n  * Each value of key can be in two form:\n     1. A function. Then pressing the key invokes the function\n     2. A table. Then pressing the key bring to another layer of keybindings.\n     And the table have the same format of top table: keys to keys, value to table or function",
        "examples": [],
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "229",
        "name": "recursiveBind",
        "notes": [
          " * Spec of keymap:",
          "  * Every key is of format {{modifers}, key, (optional) description}",
          "  * The first two element is what you usually pass into a hs.hotkey.bind() function.",
          "  * Each value of key can be in two form:",
          "     1. A function. Then pressing the key invokes the function",
          "     2. A table. Then pressing the key bring to another layer of keybindings.",
          "     And the table have the same format of top table: keys to keys, value to table or function"
        ],
        "parameters": [
          " * keymap - A table that specifies the mapping."
        ],
        "returns": [
          " * A function to start. Bind it to a initial key binding."
        ],
        "signature": "RecursiveBinder.recursiveBind(keymap)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "RecursiveBinder.singleKey(key, name)",
        "desc": "this function simply return a table with empty modifiers also it translates capital letters to normal letter with shift modifer",
        "doc": "this function simply return a table with empty modifiers also it translates capital letters to normal letter with shift modifer\n\nParameters:\n * key - a letter\n * name - the description to pass to the keys binding function\n\nReturns:\n * a table of modifiers and keys and names, ready to be used in keymap\n   to pass to RecursiveBinder.recursiveBind()",
        "examples": [],
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "137",
        "name": "singleKey",
        "notes": [],
        "parameters": [
          " * key - a letter",
          " * name - the description to pass to the keys binding function"
        ],
        "returns": [
          " * a table of modifiers and keys and names, ready to be used in keymap",
          "   to pass to RecursiveBinder.recursiveBind()"
        ],
        "signature": "RecursiveBinder.singleKey(key, name)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "RecursiveBinder.escapeKey",
        "desc": "key to abort, default to {keyNone, 'escape'}",
        "doc": "key to abort, default to {keyNone, 'escape'}",
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "20",
        "name": "escapeKey",
        "signature": "RecursiveBinder.escapeKey",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RecursiveBinder.helperEntryEachLine",
        "desc": "Number of entries each line of helper. Default to 5.",
        "doc": "Number of entries each line of helper. Default to 5.",
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "25",
        "name": "helperEntryEachLine",
        "signature": "RecursiveBinder.helperEntryEachLine",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RecursiveBinder.helperEntryLengthInChar",
        "desc": "Length of each entry in char. Default to 20.",
        "doc": "Length of each entry in char. Default to 20.",
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "30",
        "name": "helperEntryLengthInChar",
        "signature": "RecursiveBinder.helperEntryLengthInChar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RecursiveBinder.helperFormat",
        "desc": "format of helper, the helper is just a hs.alert",
        "doc": "format of helper, the helper is just a hs.alert\n\nNotes:\n * default to {atScreenEdge=2,\n            strokeColor={ white = 0, alpha = 2 },\n            textFont='SF Mono'\n            textSize=20}",
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "35",
        "name": "helperFormat",
        "notes": [
          " * default to {atScreenEdge=2,",
          "            strokeColor={ white = 0, alpha = 2 },",
          "            textFont='SF Mono'",
          "            textSize=20}"
        ],
        "signature": "RecursiveBinder.helperFormat",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RecursiveBinder.helperModifierMapping()",
        "desc": "The mapping used to display modifiers on helper.",
        "doc": "The mapping used to display modifiers on helper.\n\nNotes:\n * Default to {\n command = '⌘',\n control = '⌃',\n option = '⌥',\n shift = '⇧',\n}",
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "54",
        "name": "helperModifierMapping",
        "notes": [
          " * Default to {",
          " command = '⌘',",
          " control = '⌃',",
          " option = '⌥',",
          " shift = '⇧',",
          "}"
        ],
        "signature": "RecursiveBinder.helperModifierMapping()",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RecursiveBinder.showBindHelper()",
        "desc": "whether to show helper, can be true of false",
        "doc": "whether to show helper, can be true of false",
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "49",
        "name": "showBindHelper",
        "signature": "RecursiveBinder.showBindHelper()",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "A spoon that let you bind sequential bindings.",
    "doc": "A spoon that let you bind sequential bindings.\nIt also (optionally) shows a bar about current keys bindings.\n\n[Click to download](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RecursiveBinder.spoon.zip)",
    "items": [
      {
        "def": "RecursiveBinder.escapeKey",
        "desc": "key to abort, default to {keyNone, 'escape'}",
        "doc": "key to abort, default to {keyNone, 'escape'}",
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "20",
        "name": "escapeKey",
        "signature": "RecursiveBinder.escapeKey",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RecursiveBinder.helperEntryEachLine",
        "desc": "Number of entries each line of helper. Default to 5.",
        "doc": "Number of entries each line of helper. Default to 5.",
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "25",
        "name": "helperEntryEachLine",
        "signature": "RecursiveBinder.helperEntryEachLine",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RecursiveBinder.helperEntryLengthInChar",
        "desc": "Length of each entry in char. Default to 20.",
        "doc": "Length of each entry in char. Default to 20.",
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "30",
        "name": "helperEntryLengthInChar",
        "signature": "RecursiveBinder.helperEntryLengthInChar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RecursiveBinder.helperFormat",
        "desc": "format of helper, the helper is just a hs.alert",
        "doc": "format of helper, the helper is just a hs.alert\n\nNotes:\n * default to {atScreenEdge=2,\n            strokeColor={ white = 0, alpha = 2 },\n            textFont='SF Mono'\n            textSize=20}",
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "35",
        "name": "helperFormat",
        "notes": [
          " * default to {atScreenEdge=2,",
          "            strokeColor={ white = 0, alpha = 2 },",
          "            textFont='SF Mono'",
          "            textSize=20}"
        ],
        "signature": "RecursiveBinder.helperFormat",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RecursiveBinder.helperModifierMapping()",
        "desc": "The mapping used to display modifiers on helper.",
        "doc": "The mapping used to display modifiers on helper.\n\nNotes:\n * Default to {\n command = '⌘',\n control = '⌃',\n option = '⌥',\n shift = '⇧',\n}",
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "54",
        "name": "helperModifierMapping",
        "notes": [
          " * Default to {",
          " command = '⌘',",
          " control = '⌃',",
          " option = '⌥',",
          " shift = '⇧',",
          "}"
        ],
        "signature": "RecursiveBinder.helperModifierMapping()",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RecursiveBinder.recursiveBind(keymap)",
        "desc": "Bind sequential keys by a nested keymap.",
        "doc": "Bind sequential keys by a nested keymap.\n\nParameters:\n * keymap - A table that specifies the mapping.\n\nReturns:\n * A function to start. Bind it to a initial key binding.\n\nNotes:\n * Spec of keymap:\n  * Every key is of format {{modifers}, key, (optional) description}\n  * The first two element is what you usually pass into a hs.hotkey.bind() function.\n  * Each value of key can be in two form:\n     1. A function. Then pressing the key invokes the function\n     2. A table. Then pressing the key bring to another layer of keybindings.\n     And the table have the same format of top table: keys to keys, value to table or function",
        "examples": [],
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "229",
        "name": "recursiveBind",
        "notes": [
          " * Spec of keymap:",
          "  * Every key is of format {{modifers}, key, (optional) description}",
          "  * The first two element is what you usually pass into a hs.hotkey.bind() function.",
          "  * Each value of key can be in two form:",
          "     1. A function. Then pressing the key invokes the function",
          "     2. A table. Then pressing the key bring to another layer of keybindings.",
          "     And the table have the same format of top table: keys to keys, value to table or function"
        ],
        "parameters": [
          " * keymap - A table that specifies the mapping."
        ],
        "returns": [
          " * A function to start. Bind it to a initial key binding."
        ],
        "signature": "RecursiveBinder.recursiveBind(keymap)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "RecursiveBinder.showBindHelper()",
        "desc": "whether to show helper, can be true of false",
        "doc": "whether to show helper, can be true of false",
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "49",
        "name": "showBindHelper",
        "signature": "RecursiveBinder.showBindHelper()",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RecursiveBinder.singleKey(key, name)",
        "desc": "this function simply return a table with empty modifiers also it translates capital letters to normal letter with shift modifer",
        "doc": "this function simply return a table with empty modifiers also it translates capital letters to normal letter with shift modifer\n\nParameters:\n * key - a letter\n * name - the description to pass to the keys binding function\n\nReturns:\n * a table of modifiers and keys and names, ready to be used in keymap\n   to pass to RecursiveBinder.recursiveBind()",
        "examples": [],
        "file": "Source/RecursiveBinder.spoon/init.lua",
        "lineno": "137",
        "name": "singleKey",
        "notes": [],
        "parameters": [
          " * key - a letter",
          " * name - the description to pass to the keys binding function"
        ],
        "returns": [
          " * a table of modifiers and keys and names, ready to be used in keymap",
          "   to pass to RecursiveBinder.recursiveBind()"
        ],
        "signature": "RecursiveBinder.singleKey(key, name)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "RecursiveBinder",
    "stripped_doc": "It also (optionally) shows a bar about current keys bindings.\n\n[Click to download](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RecursiveBinder.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "ReloadConfiguration:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ReloadConfiguration",
        "doc": "Binds hotkeys for ReloadConfiguration\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * reloadConfiguration - This will cause the configuration to be reloaded",
        "examples": [],
        "file": "Source/ReloadConfiguration.spoon/init.lua",
        "lineno": "23",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * reloadConfiguration - This will cause the configuration to be reloaded"
        ],
        "returns": [],
        "signature": "ReloadConfiguration:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ReloadConfiguration:start()",
        "desc": "Start ReloadConfiguration",
        "doc": "Start ReloadConfiguration\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ReloadConfiguration.spoon/init.lua",
        "lineno": "35",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ReloadConfiguration:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "ReloadConfiguration.watch_paths",
        "desc": "List of directories to watch for changes, defaults to hs.configdir",
        "doc": "List of directories to watch for changes, defaults to hs.configdir",
        "file": "Source/ReloadConfiguration.spoon/init.lua",
        "lineno": "18",
        "name": "watch_paths",
        "signature": "ReloadConfiguration.watch_paths",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Adds a hotkey to reload the hammerspoon configuration, and a pathwatcher to automatically reload on changes.",
    "doc": "Adds a hotkey to reload the hammerspoon configuration, and a pathwatcher to automatically reload on changes.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ReloadConfiguration.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ReloadConfiguration.spoon.zip)",
    "items": [
      {
        "def": "ReloadConfiguration:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ReloadConfiguration",
        "doc": "Binds hotkeys for ReloadConfiguration\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * reloadConfiguration - This will cause the configuration to be reloaded",
        "examples": [],
        "file": "Source/ReloadConfiguration.spoon/init.lua",
        "lineno": "23",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * reloadConfiguration - This will cause the configuration to be reloaded"
        ],
        "returns": [],
        "signature": "ReloadConfiguration:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ReloadConfiguration:start()",
        "desc": "Start ReloadConfiguration",
        "doc": "Start ReloadConfiguration\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/ReloadConfiguration.spoon/init.lua",
        "lineno": "35",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "ReloadConfiguration:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ReloadConfiguration.watch_paths",
        "desc": "List of directories to watch for changes, defaults to hs.configdir",
        "doc": "List of directories to watch for changes, defaults to hs.configdir",
        "file": "Source/ReloadConfiguration.spoon/init.lua",
        "lineno": "18",
        "name": "watch_paths",
        "signature": "ReloadConfiguration.watch_paths",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "ReloadConfiguration",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ReloadConfiguration.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ReloadConfiguration.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "RoundedCorners:start()",
        "desc": "Starts RoundedCorners",
        "doc": "Starts RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly",
        "examples": [],
        "file": "Source/RoundedCorners.spoon/init.lua",
        "lineno": "45",
        "name": "start",
        "notes": [
          " * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "RoundedCorners:stop()",
        "desc": "Stops RoundedCorners",
        "doc": "Stops RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts",
        "examples": [],
        "file": "Source/RoundedCorners.spoon/init.lua",
        "lineno": "63",
        "name": "stop",
        "notes": [
          " * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "RoundedCorners.allScreens",
        "desc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "doc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "file": "Source/RoundedCorners.spoon/init.lua",
        "lineno": "19",
        "name": "allScreens",
        "signature": "RoundedCorners.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.level",
        "desc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "doc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "file": "Source/RoundedCorners.spoon/init.lua",
        "lineno": "29",
        "name": "level",
        "signature": "RoundedCorners.level",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.radius",
        "desc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "doc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "file": "Source/RoundedCorners.spoon/init.lua",
        "lineno": "24",
        "name": "radius",
        "signature": "RoundedCorners.radius",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Give your screens rounded corners",
    "doc": "Give your screens rounded corners\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip)",
    "items": [
      {
        "def": "RoundedCorners.allScreens",
        "desc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "doc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "file": "Source/RoundedCorners.spoon/init.lua",
        "lineno": "19",
        "name": "allScreens",
        "signature": "RoundedCorners.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.level",
        "desc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "doc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "file": "Source/RoundedCorners.spoon/init.lua",
        "lineno": "29",
        "name": "level",
        "signature": "RoundedCorners.level",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.radius",
        "desc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "doc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "file": "Source/RoundedCorners.spoon/init.lua",
        "lineno": "24",
        "name": "radius",
        "signature": "RoundedCorners.radius",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners:start()",
        "desc": "Starts RoundedCorners",
        "doc": "Starts RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly",
        "examples": [],
        "file": "Source/RoundedCorners.spoon/init.lua",
        "lineno": "45",
        "name": "start",
        "notes": [
          " * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "RoundedCorners:stop()",
        "desc": "Stops RoundedCorners",
        "doc": "Stops RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts",
        "examples": [],
        "file": "Source/RoundedCorners.spoon/init.lua",
        "lineno": "63",
        "name": "stop",
        "notes": [
          " * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "RoundedCorners",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Seal:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Seal",
        "doc": "Binds hotkeys for Seal\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following (optional) items:\n  * show - This will cause Seal's UI to be shown\n  * toggle - This will cause Seal's UI to be shown or hidden depending on its current state\n\nReturns:\n * The Seal object",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "157",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following (optional) items:\n   * show - This will cause Seal's UI to be shown\n   * toggle - This will cause Seal's UI to be shown or hidden depending on its current state"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:loadPluginFromFile(plugin_name, file)",
        "desc": "Loads a plugin from a given file",
        "doc": "Loads a plugin from a given file\n\nParameters:\n * plugin_name - the name of the plugin, without \"seal_\" at the beginning or \".lua\" at the end\n * file - the file where the plugin code is stored.\n\nReturns:\n * The Seal object if the plugin was successfully loaded, `nil` otherwise\n\nNotes:\n * You should normally use `Seal:loadPlugins()`. This method allows you to load plugins\n   from non-standard locations and is mostly a development interface.\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "94",
        "name": "loadPluginFromFile",
        "notes": [
          " * You should normally use `Seal:loadPlugins()`. This method allows you to load plugins",
          "   from non-standard locations and is mostly a development interface.",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * plugin_name - the name of the plugin, without \"seal_\" at the beginning or \".lua\" at the end",
          " * file - the file where the plugin code is stored."
        ],
        "returns": [
          " * The Seal object if the plugin was successfully loaded, `nil` otherwise"
        ],
        "signature": "Seal:loadPluginFromFile(plugin_name, file)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:loadPlugins(plugins)",
        "desc": "Loads a list of Seal plugins",
        "doc": "Loads a list of Seal plugins\n\nParameters:\n * plugins - A list containing the names of plugins to load\n\nReturns:\n * The Seal object\n\nNotes:\n * The plugins live inside the Seal.spoon directory\n * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "122",
        "name": "loadPlugins",
        "notes": [
          " * The plugins live inside the Seal.spoon directory",
          " * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * plugins - A list containing the names of plugins to load"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:loadPlugins(plugins)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:refreshAllCommands()",
        "desc": "Refresh the list of commands provided by all the currently loaded plugins.",
        "doc": "Refresh the list of commands provided by all the currently loaded plugins.\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands.",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "75",
        "name": "refreshAllCommands",
        "notes": [
          " * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:refreshAllCommands()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:refreshCommandsForPlugin(plugin_name)",
        "desc": "Refresh the list of commands provided by the given plugin.",
        "doc": "Refresh the list of commands provided by the given plugin.\n\nParameters:\n * plugin_name - the name of the plugin. Should be the name as passed to `loadPlugins()` or `loadPluginFromFile`.\n\nReturns:\n * The Seal object\n\nNotes:\n * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands.",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "50",
        "name": "refreshCommandsForPlugin",
        "notes": [
          " * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands."
        ],
        "parameters": [
          " * plugin_name - the name of the plugin. Should be the name as passed to `loadPlugins()` or `loadPluginFromFile`."
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:refreshCommandsForPlugin(plugin_name)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:show(query)",
        "desc": "Shows the Seal UI",
        "doc": "Shows the Seal UI\n\nParameters:\n * query - An optional string to pre-populate the query box with\n\nReturns:\n * None\n\nNotes:\n * This may be useful if you wish to show Seal in response to something other than its hotkey",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "234",
        "name": "show",
        "notes": [
          " * This may be useful if you wish to show Seal in response to something other than its hotkey"
        ],
        "parameters": [
          " * query - An optional string to pre-populate the query box with"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal:show(query)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:start()",
        "desc": "Starts Seal",
        "doc": "Starts Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "190",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:stop()",
        "desc": "Stops Seal",
        "doc": "Stops Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "210",
        "name": "stop",
        "notes": [
          " * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:toggle(query)",
        "desc": "Shows or hides the Seal UI",
        "doc": "Shows or hides the Seal UI\n\nParameters:\n * query - An optional string to pre-populate the query box with\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "252",
        "name": "toggle",
        "notes": [],
        "parameters": [
          " * query - An optional string to pre-populate the query box with"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal:toggle(query)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Seal.plugin_search_paths",
        "desc": "List of directories where Seal will look for plugins. Defaults to `~/.hammerspoon/seal_plugins/` and the Seal Spoon directory.",
        "doc": "List of directories where Seal will look for plugins. Defaults to `~/.hammerspoon/seal_plugins/` and the Seal Spoon directory.",
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "45",
        "name": "plugin_search_paths",
        "signature": "Seal.plugin_search_paths",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Seal.queryChangedTimerDuration",
        "desc": "Time between the last keystroke and the start of the recalculation of the choices to display, in seconds.",
        "doc": "Time between the last keystroke and the start of the recalculation of the choices to display, in seconds.\n\nNotes:\n * Defaults to 0.02s (20ms).",
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "37",
        "name": "queryChangedTimerDuration",
        "notes": [
          " * Defaults to 0.02s (20ms)."
        ],
        "signature": "Seal.queryChangedTimerDuration",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Pluggable launch bar",
    "doc": "Pluggable launch bar\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip)\n\nSeal includes a number of plugins, which you can choose to load (see `:loadPlugins()` below):\n * apps : Launch applications by name\n * calc : Simple calculator\n * rot13 : Apply ROT13 substitution cipher\n * safari_bookmarks : Open Safari bookmarks (this is broken since at least High Sierra)\n * screencapture : Lets you take screenshots in various ways\n * urlformats : User defined URL formats to open\n * useractions : User defined custom actions\n * vpn : Connect and disconnect VPNs (currently supports Viscosity and macOS system preferences)A",
    "items": [
      {
        "def": "Seal:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Seal",
        "doc": "Binds hotkeys for Seal\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following (optional) items:\n  * show - This will cause Seal's UI to be shown\n  * toggle - This will cause Seal's UI to be shown or hidden depending on its current state\n\nReturns:\n * The Seal object",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "157",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following (optional) items:\n   * show - This will cause Seal's UI to be shown\n   * toggle - This will cause Seal's UI to be shown or hidden depending on its current state"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:loadPluginFromFile(plugin_name, file)",
        "desc": "Loads a plugin from a given file",
        "doc": "Loads a plugin from a given file\n\nParameters:\n * plugin_name - the name of the plugin, without \"seal_\" at the beginning or \".lua\" at the end\n * file - the file where the plugin code is stored.\n\nReturns:\n * The Seal object if the plugin was successfully loaded, `nil` otherwise\n\nNotes:\n * You should normally use `Seal:loadPlugins()`. This method allows you to load plugins\n   from non-standard locations and is mostly a development interface.\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "94",
        "name": "loadPluginFromFile",
        "notes": [
          " * You should normally use `Seal:loadPlugins()`. This method allows you to load plugins",
          "   from non-standard locations and is mostly a development interface.",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * plugin_name - the name of the plugin, without \"seal_\" at the beginning or \".lua\" at the end",
          " * file - the file where the plugin code is stored."
        ],
        "returns": [
          " * The Seal object if the plugin was successfully loaded, `nil` otherwise"
        ],
        "signature": "Seal:loadPluginFromFile(plugin_name, file)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:loadPlugins(plugins)",
        "desc": "Loads a list of Seal plugins",
        "doc": "Loads a list of Seal plugins\n\nParameters:\n * plugins - A list containing the names of plugins to load\n\nReturns:\n * The Seal object\n\nNotes:\n * The plugins live inside the Seal.spoon directory\n * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "122",
        "name": "loadPlugins",
        "notes": [
          " * The plugins live inside the Seal.spoon directory",
          " * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * plugins - A list containing the names of plugins to load"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:loadPlugins(plugins)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal.plugin_search_paths",
        "desc": "List of directories where Seal will look for plugins. Defaults to `~/.hammerspoon/seal_plugins/` and the Seal Spoon directory.",
        "doc": "List of directories where Seal will look for plugins. Defaults to `~/.hammerspoon/seal_plugins/` and the Seal Spoon directory.",
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "45",
        "name": "plugin_search_paths",
        "signature": "Seal.plugin_search_paths",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Seal.queryChangedTimerDuration",
        "desc": "Time between the last keystroke and the start of the recalculation of the choices to display, in seconds.",
        "doc": "Time between the last keystroke and the start of the recalculation of the choices to display, in seconds.\n\nNotes:\n * Defaults to 0.02s (20ms).",
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "37",
        "name": "queryChangedTimerDuration",
        "notes": [
          " * Defaults to 0.02s (20ms)."
        ],
        "signature": "Seal.queryChangedTimerDuration",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Seal:refreshAllCommands()",
        "desc": "Refresh the list of commands provided by all the currently loaded plugins.",
        "doc": "Refresh the list of commands provided by all the currently loaded plugins.\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands.",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "75",
        "name": "refreshAllCommands",
        "notes": [
          " * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:refreshAllCommands()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:refreshCommandsForPlugin(plugin_name)",
        "desc": "Refresh the list of commands provided by the given plugin.",
        "doc": "Refresh the list of commands provided by the given plugin.\n\nParameters:\n * plugin_name - the name of the plugin. Should be the name as passed to `loadPlugins()` or `loadPluginFromFile`.\n\nReturns:\n * The Seal object\n\nNotes:\n * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands.",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "50",
        "name": "refreshCommandsForPlugin",
        "notes": [
          " * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands."
        ],
        "parameters": [
          " * plugin_name - the name of the plugin. Should be the name as passed to `loadPlugins()` or `loadPluginFromFile`."
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:refreshCommandsForPlugin(plugin_name)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:show(query)",
        "desc": "Shows the Seal UI",
        "doc": "Shows the Seal UI\n\nParameters:\n * query - An optional string to pre-populate the query box with\n\nReturns:\n * None\n\nNotes:\n * This may be useful if you wish to show Seal in response to something other than its hotkey",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "234",
        "name": "show",
        "notes": [
          " * This may be useful if you wish to show Seal in response to something other than its hotkey"
        ],
        "parameters": [
          " * query - An optional string to pre-populate the query box with"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal:show(query)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:start()",
        "desc": "Starts Seal",
        "doc": "Starts Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "190",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:stop()",
        "desc": "Stops Seal",
        "doc": "Stops Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "210",
        "name": "stop",
        "notes": [
          " * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:toggle(query)",
        "desc": "Shows or hides the Seal UI",
        "doc": "Shows or hides the Seal UI\n\nParameters:\n * query - An optional string to pre-populate the query box with\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Seal.spoon/init.lua",
        "lineno": "252",
        "name": "toggle",
        "notes": [],
        "parameters": [
          " * query - An optional string to pre-populate the query box with"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal:toggle(query)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Seal",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip)\n\nSeal includes a number of plugins, which you can choose to load (see `:loadPlugins()` below):\n * apps : Launch applications by name\n * calc : Simple calculator\n * rot13 : Apply ROT13 substitution cipher\n * safari_bookmarks : Open Safari bookmarks (this is broken since at least High Sierra)\n * screencapture : Lets you take screenshots in various ways\n * urlformats : User defined URL formats to open\n * useractions : User defined custom actions\n * vpn : Connect and disconnect VPNs (currently supports Viscosity and macOS system preferences)A",
    "submodules": [
      "plugins"
    ],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "Various APIs for Seal plugins",
    "doc": "Various APIs for Seal plugins",
    "items": [],
    "name": "Seal.plugins",
    "stripped_doc": "",
    "submodules": [
      "apps",
      "filesearch",
      "pasteboard",
      "safari_bookmarks",
      "screencapture",
      "urlformats",
      "useractions"
    ],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Seal.plugins.apps:restart()",
        "desc": "Restarts the Spotlight app searcher",
        "doc": "Restarts the Spotlight app searcher\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Seal.spoon/seal_apps.lua",
        "lineno": "105",
        "name": "restart",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal.plugins.apps:restart()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal.plugins.apps:start()",
        "desc": "Starts the Spotlight app searcher",
        "doc": "Starts the Spotlight app searcher\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This is called automatically when the plugin is loaded",
        "examples": [],
        "file": "Source/Seal.spoon/seal_apps.lua",
        "lineno": "70",
        "name": "start",
        "notes": [
          " * This is called automatically when the plugin is loaded"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal.plugins.apps:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal.plugins.apps:stop()",
        "desc": "Stops the Spotlight app searcher",
        "doc": "Stops the Spotlight app searcher\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Seal.spoon/seal_apps.lua",
        "lineno": "90",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal.plugins.apps:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Seal.plugins.apps.appSearchPaths",
        "desc": "Table containing the paths to search for launchable items",
        "doc": "Table containing the paths to search for launchable items\n\nNotes:\n * If you change this, you will need to call `spoon.Seal.plugins.apps:restart()` to force Spotlight to search for new items.",
        "file": "Source/Seal.spoon/seal_apps.lua",
        "lineno": "9",
        "name": "appSearchPaths",
        "notes": [
          " * If you change this, you will need to call `spoon.Seal.plugins.apps:restart()` to force Spotlight to search for new items."
        ],
        "signature": "Seal.plugins.apps.appSearchPaths",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "A plugin to add launchable apps/scripts, making Seal act as a launch bar",
    "doc": "A plugin to add launchable apps/scripts, making Seal act as a launch bar",
    "items": [
      {
        "def": "Seal.plugins.apps.appSearchPaths",
        "desc": "Table containing the paths to search for launchable items",
        "doc": "Table containing the paths to search for launchable items\n\nNotes:\n * If you change this, you will need to call `spoon.Seal.plugins.apps:restart()` to force Spotlight to search for new items.",
        "file": "Source/Seal.spoon/seal_apps.lua",
        "lineno": "9",
        "name": "appSearchPaths",
        "notes": [
          " * If you change this, you will need to call `spoon.Seal.plugins.apps:restart()` to force Spotlight to search for new items."
        ],
        "signature": "Seal.plugins.apps.appSearchPaths",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Seal.plugins.apps:restart()",
        "desc": "Restarts the Spotlight app searcher",
        "doc": "Restarts the Spotlight app searcher\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Seal.spoon/seal_apps.lua",
        "lineno": "105",
        "name": "restart",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal.plugins.apps:restart()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal.plugins.apps:start()",
        "desc": "Starts the Spotlight app searcher",
        "doc": "Starts the Spotlight app searcher\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This is called automatically when the plugin is loaded",
        "examples": [],
        "file": "Source/Seal.spoon/seal_apps.lua",
        "lineno": "70",
        "name": "start",
        "notes": [
          " * This is called automatically when the plugin is loaded"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal.plugins.apps:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal.plugins.apps:stop()",
        "desc": "Stops the Spotlight app searcher",
        "doc": "Stops the Spotlight app searcher\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Seal.spoon/seal_apps.lua",
        "lineno": "90",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal.plugins.apps:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Seal.plugins.apps",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [
      {
        "def": "Seal.plugins.filesearch.displayResultsTimeout",
        "desc": "Maximum time to wait before displaying the results",
        "doc": "Maximum time to wait before displaying the results\nDefaults to 0.2s (200ms).\n\nNotes:\n * higher value might give you more results but will give a less snappy experience",
        "file": "Source/Seal.spoon/seal_filesearch.lua",
        "lineno": "21",
        "name": "displayResultsTimeout",
        "notes": [
          " * higher value might give you more results but will give a less snappy experience"
        ],
        "signature": "Seal.plugins.filesearch.displayResultsTimeout",
        "stripped_doc": "Defaults to 0.2s (200ms).",
        "type": "Variable"
      },
      {
        "def": "Seal.plugins.filesearch.fileSearchPaths",
        "desc": "Table containing the paths to search for files",
        "doc": "Table containing the paths to search for files\n\nNotes:\n * You will need to authorize hammerspoon to access the folders in this list in order for this to work.",
        "file": "Source/Seal.spoon/seal_filesearch.lua",
        "lineno": "8",
        "name": "fileSearchPaths",
        "notes": [
          " * You will need to authorize hammerspoon to access the folders in this list in order for this to work."
        ],
        "signature": "Seal.plugins.filesearch.fileSearchPaths",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Seal.plugins.filesearch.maxResults",
        "desc": "Maximum number of results to display",
        "doc": "Maximum number of results to display",
        "file": "Source/Seal.spoon/seal_filesearch.lua",
        "lineno": "16",
        "name": "maxResults",
        "signature": "Seal.plugins.filesearch.maxResults",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "A plugin to add file search capabilities, making Seal act as a spotlight file search",
    "doc": "A plugin to add file search capabilities, making Seal act as a spotlight file search",
    "items": [
      {
        "def": "Seal.plugins.filesearch.displayResultsTimeout",
        "desc": "Maximum time to wait before displaying the results",
        "doc": "Maximum time to wait before displaying the results\nDefaults to 0.2s (200ms).\n\nNotes:\n * higher value might give you more results but will give a less snappy experience",
        "file": "Source/Seal.spoon/seal_filesearch.lua",
        "lineno": "21",
        "name": "displayResultsTimeout",
        "notes": [
          " * higher value might give you more results but will give a less snappy experience"
        ],
        "signature": "Seal.plugins.filesearch.displayResultsTimeout",
        "stripped_doc": "Defaults to 0.2s (200ms).",
        "type": "Variable"
      },
      {
        "def": "Seal.plugins.filesearch.fileSearchPaths",
        "desc": "Table containing the paths to search for files",
        "doc": "Table containing the paths to search for files\n\nNotes:\n * You will need to authorize hammerspoon to access the folders in this list in order for this to work.",
        "file": "Source/Seal.spoon/seal_filesearch.lua",
        "lineno": "8",
        "name": "fileSearchPaths",
        "notes": [
          " * You will need to authorize hammerspoon to access the folders in this list in order for this to work."
        ],
        "signature": "Seal.plugins.filesearch.fileSearchPaths",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Seal.plugins.filesearch.maxResults",
        "desc": "Maximum number of results to display",
        "doc": "Maximum number of results to display",
        "file": "Source/Seal.spoon/seal_filesearch.lua",
        "lineno": "16",
        "name": "maxResults",
        "signature": "Seal.plugins.filesearch.maxResults",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "Seal.plugins.filesearch",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [
      {
        "def": "Seal.plugins.pasteboard.historySize",
        "desc": "",
        "doc": "\nThe number of history items to keep. Defaults to 50",
        "file": "Source/Seal.spoon/seal_pasteboard.lua",
        "lineno": "11",
        "name": "historySize",
        "signature": "Seal.plugins.pasteboard.historySize",
        "stripped_doc": "The number of history items to keep. Defaults to 50",
        "type": "Variable"
      },
      {
        "def": "Seal.plugins.pasteboard.saveHistory",
        "desc": "",
        "doc": "\nA boolean, true if Seal should automatically load/save clipboard history. Defaults to true",
        "file": "Source/Seal.spoon/seal_pasteboard.lua",
        "lineno": "17",
        "name": "saveHistory",
        "signature": "Seal.plugins.pasteboard.saveHistory",
        "stripped_doc": "A boolean, true if Seal should automatically load/save clipboard history. Defaults to true",
        "type": "Variable"
      }
    ],
    "desc": "Visual, searchable pasteboard (ie clipboard) history",
    "doc": "Visual, searchable pasteboard (ie clipboard) history",
    "items": [
      {
        "def": "Seal.plugins.pasteboard.historySize",
        "desc": "",
        "doc": "\nThe number of history items to keep. Defaults to 50",
        "file": "Source/Seal.spoon/seal_pasteboard.lua",
        "lineno": "11",
        "name": "historySize",
        "signature": "Seal.plugins.pasteboard.historySize",
        "stripped_doc": "The number of history items to keep. Defaults to 50",
        "type": "Variable"
      },
      {
        "def": "Seal.plugins.pasteboard.saveHistory",
        "desc": "",
        "doc": "\nA boolean, true if Seal should automatically load/save clipboard history. Defaults to true",
        "file": "Source/Seal.spoon/seal_pasteboard.lua",
        "lineno": "17",
        "name": "saveHistory",
        "signature": "Seal.plugins.pasteboard.saveHistory",
        "stripped_doc": "A boolean, true if Seal should automatically load/save clipboard history. Defaults to true",
        "type": "Variable"
      }
    ],
    "name": "Seal.plugins.pasteboard",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [
      {
        "def": "Seal.plugins.safari_bookmarks.always_open_with_safari",
        "desc": "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `/usr/bin/open` command.",
        "doc": "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `/usr/bin/open` command.",
        "file": "Source/Seal.spoon/seal_safari_bookmarks.lua",
        "lineno": "11",
        "name": "always_open_with_safari",
        "signature": "Seal.plugins.safari_bookmarks.always_open_with_safari",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "",
    "doc": "\nNote: Apple has changed the way Safari stores bookmarks and this plugin no longer works on recent macOS releases.",
    "items": [
      {
        "def": "Seal.plugins.safari_bookmarks.always_open_with_safari",
        "desc": "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `/usr/bin/open` command.",
        "doc": "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `/usr/bin/open` command.",
        "file": "Source/Seal.spoon/seal_safari_bookmarks.lua",
        "lineno": "11",
        "name": "always_open_with_safari",
        "signature": "Seal.plugins.safari_bookmarks.always_open_with_safari",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "Seal.plugins.safari_bookmarks",
    "stripped_doc": "Note: Apple has changed the way Safari stores bookmarks and this plugin no longer works on recent macOS releases.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [
      {
        "def": "Seal.plugins.screencapture.showPostUI",
        "desc": "Whether or not to show the screen capture UI in macOS 10.14 or later",
        "doc": "Whether or not to show the screen capture UI in macOS 10.14 or later",
        "file": "Source/Seal.spoon/seal_screencapture.lua",
        "lineno": "8",
        "name": "showPostUI",
        "signature": "Seal.plugins.screencapture.showPostUI",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "A plugin to capture the screen in various ways",
    "doc": "A plugin to capture the screen in various ways",
    "items": [
      {
        "def": "Seal.plugins.screencapture.showPostUI",
        "desc": "Whether or not to show the screen capture UI in macOS 10.14 or later",
        "doc": "Whether or not to show the screen capture UI in macOS 10.14 or later",
        "file": "Source/Seal.spoon/seal_screencapture.lua",
        "lineno": "8",
        "name": "showPostUI",
        "signature": "Seal.plugins.screencapture.showPostUI",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "Seal.plugins.screencapture",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Seal.plugins.urlformats:providersTable(aTable)",
        "desc": "Gets or sets the current providers table",
        "doc": "Gets or sets the current providers table\n\nParameters:\n * aTable - An optional table of providers, which must contain the following keys:\n   * name - A string naming the provider, which will be shown in the Seal results\n   * url - A string containing the URL to insert the user's query into. This should contain one and only one `%s`\n\nReturns:\n * Either a table of current providers, if no parameter was passed, or nothing if a parmameter was passed.\n\nNotes:\n * An example table might look like:\n```lua\n{\n  rhbz = { name = \"Red Hat Bugzilla\", url = \"https://bugzilla.redhat.com/show_bug.cgi?id=%s\", },\n  lp = { name = \"Launchpad Bug\", url = \"https://launchpad.net/bugs/%s\", },\n}\n```",
        "examples": [],
        "file": "Source/Seal.spoon/seal_urlformats.lua",
        "lineno": "97",
        "name": "providersTable",
        "notes": [
          " * An example table might look like:",
          "```lua",
          "{",
          "  rhbz = { name = \"Red Hat Bugzilla\", url = \"https://bugzilla.redhat.com/show_bug.cgi?id=%s\", },",
          "  lp = { name = \"Launchpad Bug\", url = \"https://launchpad.net/bugs/%s\", },",
          "}",
          "```"
        ],
        "parameters": [
          " * aTable - An optional table of providers, which must contain the following keys:\n   * name - A string naming the provider, which will be shown in the Seal results\n   * url - A string containing the URL to insert the user's query into. This should contain one and only one `%s`"
        ],
        "returns": [
          " * Either a table of current providers, if no parameter was passed, or nothing if a parmameter was passed."
        ],
        "signature": "Seal.plugins.urlformats:providersTable(aTable)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "A plugin to quickly open URLs containing a search/query term",
    "doc": "A plugin to quickly open URLs containing a search/query term\nThis plugin is invoked with the `uf` keyword and requires some configuration, see `:providersTable()`\n\nThe way this works is by defining a set of providers, each of which contains a URL with a `%s` somewhere insert it.\nWhen the user types `uf` in Seal, followed by some more characters, those characters will be inserted into the string at the point where the `%s` is.\n\nBy way of an example, you could define a provider with a url like `http://bugs.mycorp.com/showBug?id=%s`, and just need to type `uf 123456` in Seal to get a quick shortcut to open the full URL.",
    "items": [
      {
        "def": "Seal.plugins.urlformats:providersTable(aTable)",
        "desc": "Gets or sets the current providers table",
        "doc": "Gets or sets the current providers table\n\nParameters:\n * aTable - An optional table of providers, which must contain the following keys:\n   * name - A string naming the provider, which will be shown in the Seal results\n   * url - A string containing the URL to insert the user's query into. This should contain one and only one `%s`\n\nReturns:\n * Either a table of current providers, if no parameter was passed, or nothing if a parmameter was passed.\n\nNotes:\n * An example table might look like:\n```lua\n{\n  rhbz = { name = \"Red Hat Bugzilla\", url = \"https://bugzilla.redhat.com/show_bug.cgi?id=%s\", },\n  lp = { name = \"Launchpad Bug\", url = \"https://launchpad.net/bugs/%s\", },\n}\n```",
        "examples": [],
        "file": "Source/Seal.spoon/seal_urlformats.lua",
        "lineno": "97",
        "name": "providersTable",
        "notes": [
          " * An example table might look like:",
          "```lua",
          "{",
          "  rhbz = { name = \"Red Hat Bugzilla\", url = \"https://bugzilla.redhat.com/show_bug.cgi?id=%s\", },",
          "  lp = { name = \"Launchpad Bug\", url = \"https://launchpad.net/bugs/%s\", },",
          "}",
          "```"
        ],
        "parameters": [
          " * aTable - An optional table of providers, which must contain the following keys:\n   * name - A string naming the provider, which will be shown in the Seal results\n   * url - A string containing the URL to insert the user's query into. This should contain one and only one `%s`"
        ],
        "returns": [
          " * Either a table of current providers, if no parameter was passed, or nothing if a parmameter was passed."
        ],
        "signature": "Seal.plugins.urlformats:providersTable(aTable)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Seal.plugins.urlformats",
    "stripped_doc": "This plugin is invoked with the `uf` keyword and requires some configuration, see `:providersTable()`\n\nThe way this works is by defining a set of providers, each of which contains a URL with a `%s` somewhere insert it.\nWhen the user types `uf` in Seal, followed by some more characters, those characters will be inserted into the string at the point where the `%s` is.\n\nBy way of an example, you could define a provider with a url like `http://bugs.mycorp.com/showBug?id=%s`, and just need to type `uf 123456` in Seal to get a quick shortcut to open the full URL.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [
      {
        "def": "Seal.plugins.useractions.actions",
        "desc": "",
        "doc": "\nNotes:\n * A table containing the definitions of static user-defined actions. Each entry is indexed by the name of the entry as it will be shown in the chooser. Its value is a table which can have the following keys (one of `fn` or `url` is required. If both are provided, `url` is ignored):\n  * fn - A function which will be called when the entry is selected. The function receives no arguments.\n  * url - A URL which will be opened when the entry is selected. Can also be non-HTTP URLs, such as `mailto:` or other app-specific URLs.\n  * description - (optional) A string or `hs.styledtext` object that will be shown underneath the main text of the choice.\n  * icon - (optional) An `hs.image` object that will be shown next to the entry in the chooser. If not provided, `Seal.plugins.useractions.default_icon` is used. For `url` bookmarks, it can be set to `\"favicon\"` to fetch and use the website's favicon.\n  * keyword - (optional) A command by which this action will be invoked, effectively turning it into a Seal command. Any arguments passed to the command will be handled as follows:\n    * For `fn` actions, passed as an argument to the function\n    * For `url` actions, substituted into the URL, taking the place of any occurrences of `${query}`.\n  * hotkey - (optional) A hotkey specification in the form `{ modifiers, key }` by which this action can be invoked.\n * Example configuration:\n```\nspoon.Seal:loadPlugins({\"useractions\"})\nspoon.Seal.plugins.useractions.actions =\n   {\n      [\"Hammerspoon docs webpage\"] = {\n         url = \"http://hammerspoon.org/docs/\",\n         icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),\n         description = \"Open Hammerspoon documentation\",\n         hotkey = { hyper, \"h\" },\n      },\n      [\"Leave corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('foo', 'corpnet01')\n         end,\n      },\n      [\"Arrive in corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('corpnet01', 'foo')\n         end,\n      },\n      [\"Translate using Leo\"] = {\n         url = \"http://dict.leo.org/ende/index_de.html#/search=${query}\",\n         icon = 'favicon',\n         keyword = \"leo\",\n      },\n      [\"Tell me something\"] = {\n         keyword = \"tellme\",\n         fn = function(str) hs.alert.show(str) end,\n      }\n```",
        "file": "Source/Seal.spoon/seal_useractions.lua",
        "lineno": "12",
        "name": "actions",
        "notes": [
          " * A table containing the definitions of static user-defined actions. Each entry is indexed by the name of the entry as it will be shown in the chooser. Its value is a table which can have the following keys (one of `fn` or `url` is required. If both are provided, `url` is ignored):",
          "  * fn - A function which will be called when the entry is selected. The function receives no arguments.",
          "  * url - A URL which will be opened when the entry is selected. Can also be non-HTTP URLs, such as `mailto:` or other app-specific URLs.",
          "  * description - (optional) A string or `hs.styledtext` object that will be shown underneath the main text of the choice.",
          "  * icon - (optional) An `hs.image` object that will be shown next to the entry in the chooser. If not provided, `Seal.plugins.useractions.default_icon` is used. For `url` bookmarks, it can be set to `\"favicon\"` to fetch and use the website's favicon.",
          "  * keyword - (optional) A command by which this action will be invoked, effectively turning it into a Seal command. Any arguments passed to the command will be handled as follows:",
          "    * For `fn` actions, passed as an argument to the function",
          "    * For `url` actions, substituted into the URL, taking the place of any occurrences of `${query}`.",
          "  * hotkey - (optional) A hotkey specification in the form `{ modifiers, key }` by which this action can be invoked.",
          " * Example configuration:",
          "```",
          "spoon.Seal:loadPlugins({\"useractions\"})",
          "spoon.Seal.plugins.useractions.actions =",
          "   {",
          "      [\"Hammerspoon docs webpage\"] = {",
          "         url = \"http://hammerspoon.org/docs/\",",
          "         icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),",
          "         description = \"Open Hammerspoon documentation\",",
          "         hotkey = { hyper, \"h\" },",
          "      },",
          "      [\"Leave corpnet\"] = {",
          "         fn = function()",
          "            spoon.WiFiTransitions:processTransition('foo', 'corpnet01')",
          "         end,",
          "      },",
          "      [\"Arrive in corpnet\"] = {",
          "         fn = function()",
          "            spoon.WiFiTransitions:processTransition('corpnet01', 'foo')",
          "         end,",
          "      },",
          "      [\"Translate using Leo\"] = {",
          "         url = \"http://dict.leo.org/ende/index_de.html#/search=${query}\",",
          "         icon = 'favicon',",
          "         keyword = \"leo\",",
          "      },",
          "      [\"Tell me something\"] = {",
          "         keyword = \"tellme\",",
          "         fn = function(str) hs.alert.show(str) end,",
          "      }",
          "```"
        ],
        "signature": "Seal.plugins.useractions.actions",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Seal.plugins.useractions.get_favicon",
        "desc": "",
        "doc": "\nIf `true`, attempt to obtain the favicon for URLs added through the `add` command, and use it in the chooser. Defaults to `true`",
        "file": "Source/Seal.spoon/seal_useractions.lua",
        "lineno": "58",
        "name": "get_favicon",
        "signature": "Seal.plugins.useractions.get_favicon",
        "stripped_doc": "If `true`, attempt to obtain the favicon for URLs added through the `add` command, and use it in the chooser. Defaults to `true`",
        "type": "Variable"
      }
    ],
    "desc": "Allow accessing user-defined bookmarks and arbitrary actions from Seal.",
    "doc": "Allow accessing user-defined bookmarks and arbitrary actions from Seal.\n",
    "items": [
      {
        "def": "Seal.plugins.useractions.actions",
        "desc": "",
        "doc": "\nNotes:\n * A table containing the definitions of static user-defined actions. Each entry is indexed by the name of the entry as it will be shown in the chooser. Its value is a table which can have the following keys (one of `fn` or `url` is required. If both are provided, `url` is ignored):\n  * fn - A function which will be called when the entry is selected. The function receives no arguments.\n  * url - A URL which will be opened when the entry is selected. Can also be non-HTTP URLs, such as `mailto:` or other app-specific URLs.\n  * description - (optional) A string or `hs.styledtext` object that will be shown underneath the main text of the choice.\n  * icon - (optional) An `hs.image` object that will be shown next to the entry in the chooser. If not provided, `Seal.plugins.useractions.default_icon` is used. For `url` bookmarks, it can be set to `\"favicon\"` to fetch and use the website's favicon.\n  * keyword - (optional) A command by which this action will be invoked, effectively turning it into a Seal command. Any arguments passed to the command will be handled as follows:\n    * For `fn` actions, passed as an argument to the function\n    * For `url` actions, substituted into the URL, taking the place of any occurrences of `${query}`.\n  * hotkey - (optional) A hotkey specification in the form `{ modifiers, key }` by which this action can be invoked.\n * Example configuration:\n```\nspoon.Seal:loadPlugins({\"useractions\"})\nspoon.Seal.plugins.useractions.actions =\n   {\n      [\"Hammerspoon docs webpage\"] = {\n         url = \"http://hammerspoon.org/docs/\",\n         icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),\n         description = \"Open Hammerspoon documentation\",\n         hotkey = { hyper, \"h\" },\n      },\n      [\"Leave corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('foo', 'corpnet01')\n         end,\n      },\n      [\"Arrive in corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('corpnet01', 'foo')\n         end,\n      },\n      [\"Translate using Leo\"] = {\n         url = \"http://dict.leo.org/ende/index_de.html#/search=${query}\",\n         icon = 'favicon',\n         keyword = \"leo\",\n      },\n      [\"Tell me something\"] = {\n         keyword = \"tellme\",\n         fn = function(str) hs.alert.show(str) end,\n      }\n```",
        "file": "Source/Seal.spoon/seal_useractions.lua",
        "lineno": "12",
        "name": "actions",
        "notes": [
          " * A table containing the definitions of static user-defined actions. Each entry is indexed by the name of the entry as it will be shown in the chooser. Its value is a table which can have the following keys (one of `fn` or `url` is required. If both are provided, `url` is ignored):",
          "  * fn - A function which will be called when the entry is selected. The function receives no arguments.",
          "  * url - A URL which will be opened when the entry is selected. Can also be non-HTTP URLs, such as `mailto:` or other app-specific URLs.",
          "  * description - (optional) A string or `hs.styledtext` object that will be shown underneath the main text of the choice.",
          "  * icon - (optional) An `hs.image` object that will be shown next to the entry in the chooser. If not provided, `Seal.plugins.useractions.default_icon` is used. For `url` bookmarks, it can be set to `\"favicon\"` to fetch and use the website's favicon.",
          "  * keyword - (optional) A command by which this action will be invoked, effectively turning it into a Seal command. Any arguments passed to the command will be handled as follows:",
          "    * For `fn` actions, passed as an argument to the function",
          "    * For `url` actions, substituted into the URL, taking the place of any occurrences of `${query}`.",
          "  * hotkey - (optional) A hotkey specification in the form `{ modifiers, key }` by which this action can be invoked.",
          " * Example configuration:",
          "```",
          "spoon.Seal:loadPlugins({\"useractions\"})",
          "spoon.Seal.plugins.useractions.actions =",
          "   {",
          "      [\"Hammerspoon docs webpage\"] = {",
          "         url = \"http://hammerspoon.org/docs/\",",
          "         icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),",
          "         description = \"Open Hammerspoon documentation\",",
          "         hotkey = { hyper, \"h\" },",
          "      },",
          "      [\"Leave corpnet\"] = {",
          "         fn = function()",
          "            spoon.WiFiTransitions:processTransition('foo', 'corpnet01')",
          "         end,",
          "      },",
          "      [\"Arrive in corpnet\"] = {",
          "         fn = function()",
          "            spoon.WiFiTransitions:processTransition('corpnet01', 'foo')",
          "         end,",
          "      },",
          "      [\"Translate using Leo\"] = {",
          "         url = \"http://dict.leo.org/ende/index_de.html#/search=${query}\",",
          "         icon = 'favicon',",
          "         keyword = \"leo\",",
          "      },",
          "      [\"Tell me something\"] = {",
          "         keyword = \"tellme\",",
          "         fn = function(str) hs.alert.show(str) end,",
          "      }",
          "```"
        ],
        "signature": "Seal.plugins.useractions.actions",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Seal.plugins.useractions.get_favicon",
        "desc": "",
        "doc": "\nIf `true`, attempt to obtain the favicon for URLs added through the `add` command, and use it in the chooser. Defaults to `true`",
        "file": "Source/Seal.spoon/seal_useractions.lua",
        "lineno": "58",
        "name": "get_favicon",
        "signature": "Seal.plugins.useractions.get_favicon",
        "stripped_doc": "If `true`, attempt to obtain the favicon for URLs added through the `add` command, and use it in the chooser. Defaults to `true`",
        "type": "Variable"
      }
    ],
    "name": "Seal.plugins.useractions",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "SendToOmniFocus:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for SendToOmniFocus",
        "doc": "Binds hotkeys for SendToOmniFocus\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * send_to_omnifocus - file current item to OmniFocus.",
        "examples": [],
        "file": "Source/SendToOmniFocus.spoon/init.lua",
        "lineno": "201",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * send_to_omnifocus - file current item to OmniFocus."
        ],
        "returns": [],
        "signature": "SendToOmniFocus:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "desc": "Register a new application handler",
        "doc": "Register a new application handler\n\nParameters:\n * app - application name\n * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application.",
        "examples": [],
        "file": "Source/SendToOmniFocus.spoon/init.lua",
        "lineno": "190",
        "name": "registerApplication",
        "notes": [],
        "parameters": [
          " * app - application name",
          " * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application."
        ],
        "returns": [],
        "signature": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus:sendCurrentItem()",
        "desc": "Send current item in current application to OmniFocus by triggering the appropriate handler.",
        "doc": "Send current item in current application to OmniFocus by triggering the appropriate handler.\n\nParameters:\n * None\n\nReturns:\n * The SendToOmniFocus object",
        "examples": [],
        "file": "Source/SendToOmniFocus.spoon/init.lua",
        "lineno": "135",
        "name": "sendCurrentItem",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The SendToOmniFocus object"
        ],
        "signature": "SendToOmniFocus:sendCurrentItem()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "SendToOmniFocus.actions",
        "desc": "Table containing application handlers for sending the current item to OmniFocus.",
        "doc": "Table containing application handlers for sending the current item to OmniFocus.\n\nNotes:\n * Each entry's key is the application name, and its value is another table with the following keys:\n  * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".\n  * One of the following, invoked to do the actual filing:\n    * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.\n    * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.\n    * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.\n    * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).\n * The built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.\n * New handlers can be registered using `SendToOmniFocus:registerApplication()`\n * Default value:\n```\n  {\n     [\"Microsoft Outlook\"] = {\n        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     },\n     Evernote = {\n        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),\n        itemname = \"note\"\n     },\n     [\"Google Chrome\"] = {\n        apptype = \"chromeapp\",\n        itemname = \"tab\"\n     },\n     Mail = {\n        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     }\n  }\n```",
        "file": "Source/SendToOmniFocus.spoon/init.lua",
        "lineno": "65",
        "name": "actions",
        "notes": [
          " * Each entry's key is the application name, and its value is another table with the following keys:",
          "  * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".",
          "  * One of the following, invoked to do the actual filing:",
          "    * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.",
          "    * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.",
          "    * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.",
          "    * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).",
          " * The built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.",
          " * New handlers can be registered using `SendToOmniFocus:registerApplication()`",
          " * Default value:",
          "```",
          "  {",
          "     [\"Microsoft Outlook\"] = {",
          "        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),",
          "        itemname = \"message\"",
          "     },",
          "     Evernote = {",
          "        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),",
          "        itemname = \"note\"",
          "     },",
          "     [\"Google Chrome\"] = {",
          "        apptype = \"chromeapp\",",
          "        itemname = \"tab\"",
          "     },",
          "     Mail = {",
          "        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),",
          "        itemname = \"message\"",
          "     }",
          "  }",
          "```"
        ],
        "signature": "SendToOmniFocus.actions",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/SendToOmniFocus.spoon/init.lua",
        "lineno": "50",
        "name": "logger",
        "signature": "SendToOmniFocus.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.notifications",
        "desc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "doc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "file": "Source/SendToOmniFocus.spoon/init.lua",
        "lineno": "55",
        "name": "notifications",
        "signature": "SendToOmniFocus.notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.quickentrydialog",
        "desc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "doc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "file": "Source/SendToOmniFocus.spoon/init.lua",
        "lineno": "60",
        "name": "quickentrydialog",
        "signature": "SendToOmniFocus.quickentrydialog",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Handles \"send current item to OmniFocus\" for multiple applications",
    "doc": "Handles \"send current item to OmniFocus\" for multiple applications\n\nThe following applications are supported: out of the box: Outlook, Evernote, Mail, Chrome and any Chrome-based apps (such as SSBs created by [Epichrome](https://github.com/dmarmor/epichrome))\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip)",
    "items": [
      {
        "def": "SendToOmniFocus.actions",
        "desc": "Table containing application handlers for sending the current item to OmniFocus.",
        "doc": "Table containing application handlers for sending the current item to OmniFocus.\n\nNotes:\n * Each entry's key is the application name, and its value is another table with the following keys:\n  * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".\n  * One of the following, invoked to do the actual filing:\n    * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.\n    * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.\n    * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.\n    * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).\n * The built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.\n * New handlers can be registered using `SendToOmniFocus:registerApplication()`\n * Default value:\n```\n  {\n     [\"Microsoft Outlook\"] = {\n        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     },\n     Evernote = {\n        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),\n        itemname = \"note\"\n     },\n     [\"Google Chrome\"] = {\n        apptype = \"chromeapp\",\n        itemname = \"tab\"\n     },\n     Mail = {\n        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     }\n  }\n```",
        "file": "Source/SendToOmniFocus.spoon/init.lua",
        "lineno": "65",
        "name": "actions",
        "notes": [
          " * Each entry's key is the application name, and its value is another table with the following keys:",
          "  * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".",
          "  * One of the following, invoked to do the actual filing:",
          "    * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.",
          "    * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.",
          "    * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.",
          "    * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).",
          " * The built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.",
          " * New handlers can be registered using `SendToOmniFocus:registerApplication()`",
          " * Default value:",
          "```",
          "  {",
          "     [\"Microsoft Outlook\"] = {",
          "        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),",
          "        itemname = \"message\"",
          "     },",
          "     Evernote = {",
          "        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),",
          "        itemname = \"note\"",
          "     },",
          "     [\"Google Chrome\"] = {",
          "        apptype = \"chromeapp\",",
          "        itemname = \"tab\"",
          "     },",
          "     Mail = {",
          "        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),",
          "        itemname = \"message\"",
          "     }",
          "  }",
          "```"
        ],
        "signature": "SendToOmniFocus.actions",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for SendToOmniFocus",
        "doc": "Binds hotkeys for SendToOmniFocus\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * send_to_omnifocus - file current item to OmniFocus.",
        "examples": [],
        "file": "Source/SendToOmniFocus.spoon/init.lua",
        "lineno": "201",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * send_to_omnifocus - file current item to OmniFocus."
        ],
        "returns": [],
        "signature": "SendToOmniFocus:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/SendToOmniFocus.spoon/init.lua",
        "lineno": "50",
        "name": "logger",
        "signature": "SendToOmniFocus.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.notifications",
        "desc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "doc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "file": "Source/SendToOmniFocus.spoon/init.lua",
        "lineno": "55",
        "name": "notifications",
        "signature": "SendToOmniFocus.notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.quickentrydialog",
        "desc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "doc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "file": "Source/SendToOmniFocus.spoon/init.lua",
        "lineno": "60",
        "name": "quickentrydialog",
        "signature": "SendToOmniFocus.quickentrydialog",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "desc": "Register a new application handler",
        "doc": "Register a new application handler\n\nParameters:\n * app - application name\n * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application.",
        "examples": [],
        "file": "Source/SendToOmniFocus.spoon/init.lua",
        "lineno": "190",
        "name": "registerApplication",
        "notes": [],
        "parameters": [
          " * app - application name",
          " * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application."
        ],
        "returns": [],
        "signature": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus:sendCurrentItem()",
        "desc": "Send current item in current application to OmniFocus by triggering the appropriate handler.",
        "doc": "Send current item in current application to OmniFocus by triggering the appropriate handler.\n\nParameters:\n * None\n\nReturns:\n * The SendToOmniFocus object",
        "examples": [],
        "file": "Source/SendToOmniFocus.spoon/init.lua",
        "lineno": "135",
        "name": "sendCurrentItem",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The SendToOmniFocus object"
        ],
        "signature": "SendToOmniFocus:sendCurrentItem()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "SendToOmniFocus",
    "stripped_doc": "\nThe following applications are supported: out of the box: Outlook, Evernote, Mail, Chrome and any Chrome-based apps (such as SSBs created by [Epichrome](https://github.com/dmarmor/epichrome))\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [
      {
        "def": "Shade:toggleShade()",
        "desc": "Turns shade on/off",
        "doc": "Turns shade on/off\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Shade.spoon/init.lua",
        "lineno": "220",
        "name": "toggleShade",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Shade:toggleShade()",
        "stripped_doc": "",
        "type": "Function"
      }
    ],
    "Method": [
      {
        "def": "Shade:bindHotkeys(map)",
        "desc": "Binds hotkeys for Shade",
        "doc": "Binds hotkeys for Shade\n\nParameters:\n * map - A table containing hotkey modifier/key details for the following item:\n  * toggleShade - This will toggle the shade on/off, and update the menubar graphic\n\nExamples:\n * E.g.: { toggleShade = { {\"cmd\",\"alt\",\"ctrl\"},\"s\" } }\n\nReturns:\n * None",
        "examples": [
          " * E.g.: { toggleShade = { {\"cmd\",\"alt\",\"ctrl\"},\"s\" } }"
        ],
        "file": "Source/Shade.spoon/init.lua",
        "lineno": "252",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * map - A table containing hotkey modifier/key details for the following item:\n   * toggleShade - This will toggle the shade on/off, and update the menubar graphic"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Shade:bindHotkeys(map)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Shade:init()",
        "desc": "Sets up the Spoon",
        "doc": "Sets up the Spoon\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Shade.spoon/init.lua",
        "lineno": "121",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Shade:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Shade:start()",
        "desc": "Turn the shade on, darkening the screen",
        "doc": "Turn the shade on, darkening the screen\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Shade.spoon/init.lua",
        "lineno": "176",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Shade:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Shade:stop()",
        "desc": "Turn the shade off, brightening the screen",
        "doc": "Turn the shade off, brightening the screen\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Shade.spoon/init.lua",
        "lineno": "202",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Shade:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Shade.shadeIsOn",
        "desc": "Flag for Shade status, 'false' means shade off, 'true' means on.",
        "doc": "Flag for Shade status, 'false' means shade off, 'true' means on.",
        "file": "Source/Shade.spoon/init.lua",
        "lineno": "112",
        "name": "shadeIsOn",
        "signature": "Shade.shadeIsOn",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Shade.shadeTransparency",
        "desc": "Contains the alpha (transparency) of the overlay, from 0.0 (completely transparent to 1.0 (completely opaque). Default is 0.5.",
        "doc": "Contains the alpha (transparency) of the overlay, from 0.0 (completely transparent to 1.0 (completely opaque). Default is 0.5.",
        "file": "Source/Shade.spoon/init.lua",
        "lineno": "86",
        "name": "shadeTransparency",
        "signature": "Shade.shadeTransparency",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Creates a semitransparent overlay to reduce screen brightness.",
    "doc": "Creates a semitransparent overlay to reduce screen brightness.\n\nDownload: https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Shade.spoon.zip",
    "items": [
      {
        "def": "Shade:bindHotkeys(map)",
        "desc": "Binds hotkeys for Shade",
        "doc": "Binds hotkeys for Shade\n\nParameters:\n * map - A table containing hotkey modifier/key details for the following item:\n  * toggleShade - This will toggle the shade on/off, and update the menubar graphic\n\nExamples:\n * E.g.: { toggleShade = { {\"cmd\",\"alt\",\"ctrl\"},\"s\" } }\n\nReturns:\n * None",
        "examples": [
          " * E.g.: { toggleShade = { {\"cmd\",\"alt\",\"ctrl\"},\"s\" } }"
        ],
        "file": "Source/Shade.spoon/init.lua",
        "lineno": "252",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * map - A table containing hotkey modifier/key details for the following item:\n   * toggleShade - This will toggle the shade on/off, and update the menubar graphic"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Shade:bindHotkeys(map)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Shade:init()",
        "desc": "Sets up the Spoon",
        "doc": "Sets up the Spoon\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Shade.spoon/init.lua",
        "lineno": "121",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Shade:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Shade.shadeIsOn",
        "desc": "Flag for Shade status, 'false' means shade off, 'true' means on.",
        "doc": "Flag for Shade status, 'false' means shade off, 'true' means on.",
        "file": "Source/Shade.spoon/init.lua",
        "lineno": "112",
        "name": "shadeIsOn",
        "signature": "Shade.shadeIsOn",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Shade.shadeTransparency",
        "desc": "Contains the alpha (transparency) of the overlay, from 0.0 (completely transparent to 1.0 (completely opaque). Default is 0.5.",
        "doc": "Contains the alpha (transparency) of the overlay, from 0.0 (completely transparent to 1.0 (completely opaque). Default is 0.5.",
        "file": "Source/Shade.spoon/init.lua",
        "lineno": "86",
        "name": "shadeTransparency",
        "signature": "Shade.shadeTransparency",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Shade:start()",
        "desc": "Turn the shade on, darkening the screen",
        "doc": "Turn the shade on, darkening the screen\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Shade.spoon/init.lua",
        "lineno": "176",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Shade:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Shade:stop()",
        "desc": "Turn the shade off, brightening the screen",
        "doc": "Turn the shade off, brightening the screen\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Shade.spoon/init.lua",
        "lineno": "202",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Shade:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Shade:toggleShade()",
        "desc": "Turns shade on/off",
        "doc": "Turns shade on/off\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Shade.spoon/init.lua",
        "lineno": "220",
        "name": "toggleShade",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Shade:toggleShade()",
        "stripped_doc": "",
        "type": "Function"
      }
    ],
    "name": "Shade",
    "stripped_doc": "\nDownload: https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Shade.spoon.zip",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "SleepCorners:bindHotkeys(mapping) -> self",
        "desc": "Binds hotkeys for SleepCorners",
        "doc": "Binds hotkeys for SleepCorners\n\nParameters:\n * `mapping` - A table containing hotkey modifier/key details for one or more of the following commands:\n   * \"start\"  - start monitoring the defined corners\n   * \"stop\"   - stop monitoring the defined corners\n   * \"toggle\" - toggles monitoring on or off\n   * \"show\"   - shows the current corners for 3 seconds as a reminder of their assigned locations\n\nReturns:\n * the SleepCorners spoon object\n\nNotes:\n * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:\n   * `command`   - is one of the commands listed above\n   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`\n   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`",
        "examples": [],
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "632",
        "name": "bindHotkeys",
        "notes": [
          " * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:",
          "   * `command`   - is one of the commands listed above",
          "   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`",
          "   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`"
        ],
        "parameters": [
          " * `mapping` - A table containing hotkey modifier/key details for one or more of the following commands:\n   * \"start\"  - start monitoring the defined corners\n   * \"stop\"   - stop monitoring the defined corners\n   * \"toggle\" - toggles monitoring on or off\n   * \"show\"   - shows the current corners for 3 seconds as a reminder of their assigned locations"
        ],
        "returns": [
          " * the SleepCorners spoon object"
        ],
        "signature": "SleepCorners:bindHotkeys(mapping) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SleepCorners:isActive() -> boolean",
        "desc": "Returns whether or not the sleep corners are currently active",
        "doc": "Returns whether or not the sleep corners are currently active\n\nParameters:\n * None\n\nReturns:\n * `true` if the sleep corners are currently active or `false` if they are not\n\nNotes:\n * This method only identifies whether or not the SleepCorners spoon has been started; it does not check whether or not the specified corners have been set to a location of \"*\" with [SleepCorners.sleepNowCorner](#sleepNowCorner) or [SleepCorners.neverSleepCorner](#neverSleepCorner).\n * If you want to check to see if SleepCorners has been started and that at least one of the corners is assigned to a corner, you should use something like `SleepCorners:isActive() and (SleepCorners.sleepNowCorner ~= \"*\" or SleepCorners.neverSleepCorner ~= \"*\")`",
        "examples": [],
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "458",
        "name": "isActive",
        "notes": [
          " * This method only identifies whether or not the SleepCorners spoon has been started; it does not check whether or not the specified corners have been set to a location of \"*\" with [SleepCorners.sleepNowCorner](#sleepNowCorner) or [SleepCorners.neverSleepCorner](#neverSleepCorner).",
          " * If you want to check to see if SleepCorners has been started and that at least one of the corners is assigned to a corner, you should use something like `SleepCorners:isActive() and (SleepCorners.sleepNowCorner ~= \"*\" or SleepCorners.neverSleepCorner ~= \"*\")`"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * `true` if the sleep corners are currently active or `false` if they are not"
        ],
        "signature": "SleepCorners:isActive() -> boolean",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SleepCorners:show([duration]) -> self",
        "desc": "Temporarily show the SleepCorner feedback images in their current locations as a reminder of their positions on the screen.",
        "doc": "Temporarily show the SleepCorner feedback images in their current locations as a reminder of their positions on the screen.\n\nParameters:\n * `duration` - an optional number, default 3, specifying the number of seconds the feedback images should be displayed. If you specify `false` and the feedback images are currently being shown, the timer will be cur short and the images will be removed immediately.\n\nReturns:\n * the SleepCorners spoon object\n\nNotes:\n * this method will temporarily show the feedback images even if SleepCorners has been stopped (or has not yet been started).",
        "examples": [],
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "580",
        "name": "show",
        "notes": [
          " * this method will temporarily show the feedback images even if SleepCorners has been stopped (or has not yet been started)."
        ],
        "parameters": [
          " * `duration` - an optional number, default 3, specifying the number of seconds the feedback images should be displayed. If you specify `false` and the feedback images are currently being shown, the timer will be cur short and the images will be removed immediately."
        ],
        "returns": [
          " * the SleepCorners spoon object"
        ],
        "signature": "SleepCorners:show([duration]) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SleepCorners:start() -> self",
        "desc": "Starts monitoring the defined sleep corners to allow triggering or preventing the system display  sleep state.",
        "doc": "Starts monitoring the defined sleep corners to allow triggering or preventing the system display  sleep state.\n\nParameters:\n * None\n\nReturns:\n * the SleepCorners spoon object\n\nNotes:\n * has no effect if SleepCorners has already been started",
        "examples": [],
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "478",
        "name": "start",
        "notes": [
          " * has no effect if SleepCorners has already been started"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * the SleepCorners spoon object"
        ],
        "signature": "SleepCorners:start() -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SleepCorners:stop() -> self",
        "desc": "Stop monitoring the defined sleep corners.",
        "doc": "Stop monitoring the defined sleep corners.\n\nParameters:\n * None\n\nReturns:\n * the SleepCorners spoon object\n\nNotes:\n * has no effect if SleepCorners has already been stopped\n * if SleepCorners was active, this method will return the display idle sleep setting back to its previous state and reset the never sleep lock if it has been triggered.",
        "examples": [],
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "508",
        "name": "stop",
        "notes": [
          " * has no effect if SleepCorners has already been stopped",
          " * if SleepCorners was active, this method will return the display idle sleep setting back to its previous state and reset the never sleep lock if it has been triggered."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * the SleepCorners spoon object"
        ],
        "signature": "SleepCorners:stop() -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SleepCorners:toggle([state]) -> self",
        "desc": "Toggles or sets whether or not SleepCorners is currently monitoring the defined screen corners for managing the system display's sleep state and displays an alert indicating the new state of the SleepCorners spoon.",
        "doc": "Toggles or sets whether or not SleepCorners is currently monitoring the defined screen corners for managing the system display's sleep state and displays an alert indicating the new state of the SleepCorners spoon.\n\nParameters:\n * `state` - an optional boolean which specifies specifically whether SleepCorners should be started if it isn't already running (true) or stopped if it currently is running (false)\n\nReturns:\n * the SleepCorners spoon object\n\nNotes:\n * If `state` is not provided, this method will start SleepCorners if it is currently stopped or stop it if is currently started.\n * `SleepCorners:toggle(true)` is equivalent to [SleepCorners:start()](#start) with the addition of displaying an alert specifying that SleepCorners is active.\n * `SleepCorners:toggle(false)` is equivalent to [SleepCorners:stop()](#stop) with the addition of displaying an alert specifying that SleepCorners has been deactivated.",
        "examples": [],
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "544",
        "name": "toggle",
        "notes": [
          " * If `state` is not provided, this method will start SleepCorners if it is currently stopped or stop it if is currently started.",
          " * `SleepCorners:toggle(true)` is equivalent to [SleepCorners:start()](#start) with the addition of displaying an alert specifying that SleepCorners is active.",
          " * `SleepCorners:toggle(false)` is equivalent to [SleepCorners:stop()](#stop) with the addition of displaying an alert specifying that SleepCorners has been deactivated."
        ],
        "parameters": [
          " * `state` - an optional boolean which specifies specifically whether SleepCorners should be started if it isn't already running (true) or stopped if it currently is running (false)"
        ],
        "returns": [
          " * the SleepCorners spoon object"
        ],
        "signature": "SleepCorners:toggle([state]) -> self",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "SleepCorners.feedbackSize",
        "desc": "Specifies the height and width in screen pixels, default 20, of the visual feedback to be displayed when the mouse pointer moves into one of the recognized hot corners",
        "doc": "Specifies the height and width in screen pixels, default 20, of the visual feedback to be displayed when the mouse pointer moves into one of the recognized hot corners",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "99",
        "name": "feedbackSize",
        "signature": "SleepCorners.feedbackSize",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.immediateSleepModifiers",
        "desc": "A table, default `{ fn = true }`, specifying keyboard modifiers which if held when the mouse pointer enters the sleep now hot corner will trigger sleep immediately rather then delay for [SleepCorners.sleepDelay](#sleepDelay) seconds.",
        "doc": "A table, default `{ fn = true }`, specifying keyboard modifiers which if held when the mouse pointer enters the sleep now hot corner will trigger sleep immediately rather then delay for [SleepCorners.sleepDelay](#sleepDelay) seconds.\n\nNotes:\n * This variable may be set to nil or an empty table, disabling the immediate sleep option, or a table containing one or more of the following keys:\n  * `fn`    - Set to true to require that the `Fn` key be pressed. May not be available on all keyboards, especially non-Apple ones.\n  * `cmd`   - Set to true to require that the Command (⌘) key be pressed\n  * `alt`   - Set to true to require that the Alt (or Option) (⌥) key be pressed\n  * `shift` - Set to true to require that the Shift (⇧) key be pressed\n  * `ctrl`  - Set to true to require that the Control (^) key be pressed\n * If this table contains multiple keys, then all of the specified modifiers must be pressed for immediate sleep to take affect.",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "120",
        "name": "immediateSleepModifiers",
        "notes": [
          " * This variable may be set to nil or an empty table, disabling the immediate sleep option, or a table containing one or more of the following keys:",
          "  * `fn`    - Set to true to require that the `Fn` key be pressed. May not be available on all keyboards, especially non-Apple ones.",
          "  * `cmd`   - Set to true to require that the Command (⌘) key be pressed",
          "  * `alt`   - Set to true to require that the Alt (or Option) (⌥) key be pressed",
          "  * `shift` - Set to true to require that the Shift (⇧) key be pressed",
          "  * `ctrl`  - Set to true to require that the Control (^) key be pressed",
          " * If this table contains multiple keys, then all of the specified modifiers must be pressed for immediate sleep to take affect."
        ],
        "signature": "SleepCorners.immediateSleepModifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.immediateSleepShouldLock",
        "desc": "Specifies whether the sleep now corner, when the modifiers defined for [SleepCorners.immediateSleepModifiers](#immediateSleepModifiers) are also held, should trigger the display sleep or lock the users session. Defaults to true.",
        "doc": "Specifies whether the sleep now corner, when the modifiers defined for [SleepCorners.immediateSleepModifiers](#immediateSleepModifiers) are also held, should trigger the display sleep or lock the users session. Defaults to true.\n\nNotes:\n * When this variable is set to true, triggering the sleep now corner for immediate sleep will lock the users session. When this variable is false, the display will be put to sleep instead.\n * Note that depending upon the user's settings in the Security & Privacy System Preferences, triggering the display sleep may also lock the user session immediately.",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "143",
        "name": "immediateSleepShouldLock",
        "notes": [
          " * When this variable is set to true, triggering the sleep now corner for immediate sleep will lock the users session. When this variable is false, the display will be put to sleep instead.",
          " * Note that depending upon the user's settings in the Security & Privacy System Preferences, triggering the display sleep may also lock the user session immediately."
        ],
        "signature": "SleepCorners.immediateSleepShouldLock",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.neverSleepCorner",
        "desc": "Specifies the location of the never sleep corner on the screen. Defaults to \"LR\".",
        "doc": "Specifies the location of the never sleep corner on the screen. Defaults to \"LR\".\n\nThis variable may be set to one of the following string values:\n\n  * `*`  - Do not provide a sleep now corner (disable this feature)\n  * `UL` - Upper left corner\n  * `UR` - Upper right corner\n  * `LR` - Lower right corner\n  * `LL` - Lower left corner",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "86",
        "name": "neverSleepCorner",
        "signature": "SleepCorners.neverSleepCorner",
        "stripped_doc": "This variable may be set to one of the following string values:\n  * `*`  - Do not provide a sleep now corner (disable this feature)\n  * `UL` - Upper left corner\n  * `UR` - Upper right corner\n  * `LR` - Lower right corner\n  * `LL` - Lower left corner",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.neverSleepLockModifiers",
        "desc": "A table, default `{ fn = true }`, specifying keyboard modifiers which if held when the mouse pointer enters the never sleep hot corner will disable display sleep and leave it disabled even if the mouse pointer leaves the hot corner. While the never sleep lock is in effect the never sleep visual feedback will remain visible in the appropriate corner of the screen. The never sleep lock may is unlocked when you move the mouse pointer back into the never sleep corner with the modifiers held down a second time or move the mouse pointer into the sleep now corner.",
        "doc": "A table, default `{ fn = true }`, specifying keyboard modifiers which if held when the mouse pointer enters the never sleep hot corner will disable display sleep and leave it disabled even if the mouse pointer leaves the hot corner. While the never sleep lock is in effect the never sleep visual feedback will remain visible in the appropriate corner of the screen. The never sleep lock may is unlocked when you move the mouse pointer back into the never sleep corner with the modifiers held down a second time or move the mouse pointer into the sleep now corner.\n\nNotes:\n * This variable may be set to nil or an empty table, disabling the never sleep lock option, or a table containing one or more of the following keys:\n  * `fn`    - Set to true to require that the `Fn` key be pressed. May not be available on all keyboards, especially non-Apple ones.\n  * `cmd`   - Set to true to require that the Command (⌘) key be pressed\n  * `alt`   - Set to true to require that the Alt (or Option) (⌥) key be pressed\n  * `shift` - Set to true to require that the Shift (⇧) key be pressed\n  * `ctrl`  - Set to true to require that the Control (^) key be pressed\n * If this table contains multiple keys, then all of the specified modifiers must be pressed for the never sleep lock to be triggered.",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "152",
        "name": "neverSleepLockModifiers",
        "notes": [
          " * This variable may be set to nil or an empty table, disabling the never sleep lock option, or a table containing one or more of the following keys:",
          "  * `fn`    - Set to true to require that the `Fn` key be pressed. May not be available on all keyboards, especially non-Apple ones.",
          "  * `cmd`   - Set to true to require that the Command (⌘) key be pressed",
          "  * `alt`   - Set to true to require that the Alt (or Option) (⌥) key be pressed",
          "  * `shift` - Set to true to require that the Shift (⇧) key be pressed",
          "  * `ctrl`  - Set to true to require that the Control (^) key be pressed",
          " * If this table contains multiple keys, then all of the specified modifiers must be pressed for the never sleep lock to be triggered."
        ],
        "signature": "SleepCorners.neverSleepLockModifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.preferSleepNow",
        "desc": "Specifies which action should be preferred if both the sleep now and never sleep hot corners are assigned to the same location on the screen. The default is false.",
        "doc": "Specifies which action should be preferred if both the sleep now and never sleep hot corners are assigned to the same location on the screen. The default is false.\n\nIf this variable is set to `true`, then sleep now action will be triggered if both hot corners are assigned to the same location on the screen. If this variable is set to `false`, then the never sleep action will be triggered.\n\nNote that this variable has no effect if the hot corners are distinct (i.e. are not assigned to the same corner)",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "111",
        "name": "preferSleepNow",
        "signature": "SleepCorners.preferSleepNow",
        "stripped_doc": "If this variable is set to `true`, then sleep now action will be triggered if both hot corners are assigned to the same location on the screen. If this variable is set to `false`, then the never sleep action will be triggered.\nNote that this variable has no effect if the hot corners are distinct (i.e. are not assigned to the same corner)",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.sleepDelay",
        "desc": "Specifies the number of seconds, default 2, the mouse pointer must remain within the trigger area of the sleep now corner in order to put the system's display to sleep.",
        "doc": "Specifies the number of seconds, default 2, the mouse pointer must remain within the trigger area of the sleep now corner in order to put the system's display to sleep.\n\nWhen the mouse pointer moves into the trigger area for the sleep now hot corner, visual feedback will be provided for the user. If the user does not move the mouse pointer out of the trigger area within the number of seconds specified by this variable, display sleep will be activated.",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "55",
        "name": "sleepDelay",
        "signature": "SleepCorners.sleepDelay",
        "stripped_doc": "When the mouse pointer moves into the trigger area for the sleep now hot corner, visual feedback will be provided for the user. If the user does not move the mouse pointer out of the trigger area within the number of seconds specified by this variable, display sleep will be activated.",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.sleepNowCorner",
        "desc": "Specifies the location of the sleep now corner on the screen. Defaults to \"LL\".",
        "doc": "Specifies the location of the sleep now corner on the screen. Defaults to \"LL\".\n\nThis variable may be set to one of the following string values:\n\n  `*`  - Do not provide a sleep now corner (disable this feature)\n  `UL` - Upper left corner\n  `UR` - Upper right corner\n  `LR` - Lower right corner\n  `LL` - Lower left corner",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "73",
        "name": "sleepNowCorner",
        "signature": "SleepCorners.sleepNowCorner",
        "stripped_doc": "This variable may be set to one of the following string values:\n  `*`  - Do not provide a sleep now corner (disable this feature)\n  `UL` - Upper left corner\n  `UR` - Upper right corner\n  `LR` - Lower right corner\n  `LL` - Lower left corner",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.sleepNowShouldLock",
        "desc": "Specifies whether the sleep now corner should trigger the display sleep or lock the users session. Defaults to false.",
        "doc": "Specifies whether the sleep now corner should trigger the display sleep or lock the users session. Defaults to false.\n\nNotes:\n * When this variable is set to true, triggering the sleep now corner will lock the users session. When this variable is false, the display will be put to sleep instead.\n * Note that depending upon the user's settings in the Security & Privacy System Preferences, triggering the display sleep may also lock the user session immediately.",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "134",
        "name": "sleepNowShouldLock",
        "notes": [
          " * When this variable is set to true, triggering the sleep now corner will lock the users session. When this variable is false, the display will be put to sleep instead.",
          " * Note that depending upon the user's settings in the Security & Privacy System Preferences, triggering the display sleep may also lock the user session immediately."
        ],
        "signature": "SleepCorners.sleepNowShouldLock",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.sleepScreen",
        "desc": "Specifies the screen on which the sleep corners are made active. Defaults to the value returned by `hs.screen.primaryScreen()`.",
        "doc": "Specifies the screen on which the sleep corners are made active. Defaults to the value returned by `hs.screen.primaryScreen()`.\n\nThis variable may be set to an `hs.screen` userdata object or a function which returns an `hs.screen` userdata object. For example, to make the sleep corners active on the screen with the currently focused window, you could use the following function:\n\n    SleepCorners.sleepScreen = function()\n        return hs.screen.mainScreen()\n    end",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "62",
        "name": "sleepScreen",
        "signature": "SleepCorners.sleepScreen",
        "stripped_doc": "This variable may be set to an `hs.screen` userdata object or a function which returns an `hs.screen` userdata object. For example, to make the sleep corners active on the screen with the currently focused window, you could use the following function:\n    SleepCorners.sleepScreen = function()\n        return hs.screen.mainScreen()\n    end",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.triggerSize",
        "desc": "Specifies the height and width in screen pixels, default 2, of the trigger area for the recognized hot corners.",
        "doc": "Specifies the height and width in screen pixels, default 2, of the trigger area for the recognized hot corners.\n\nThe trigger area, which may be smaller than the [SleepCorners.feedbackSize](#feedbackSize) area, is the region which the mouse pointer must be moved into before the specified feedback or sleep activity will occur.",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "104",
        "name": "triggerSize",
        "signature": "SleepCorners.triggerSize",
        "stripped_doc": "The trigger area, which may be smaller than the [SleepCorners.feedbackSize](#feedbackSize) area, is the region which the mouse pointer must be moved into before the specified feedback or sleep activity will occur.",
        "type": "Variable"
      }
    ],
    "desc": "Trigger or prevent screen saver/sleep by moving your mouse pointer to specified hot corners on your screen.",
    "doc": "Trigger or prevent screen saver/sleep by moving your mouse pointer to specified hot corners on your screen.\n\nWhile this functionality is provided by macOS in the Mission Control System Preferences, it doesn't provide any type of visual feedback so it's easy to forget which corners have been assigned which roles.\n\nFor best results while using this spoon, it is recommended that you disable \"Start Screen Saver\" and \"Disable Screen Saver\" if they are currently assigned to a corner with the Mission Control System Preferences Panel as this Spoon can't override them and may result in confusing or incorrect behavior.\n\nThe visual feed back provided by this spoon is of a small plus (for triggering sleep now) or a small minus (to prevent sleep) when the mouse pointer is moved into the appropriate corner. This feedback was inspired by a vague recollection of an early Mac screen saver (After Dark maybe?) which provided similar functionality. If someone knows for certain, please inform me and I will give appropriate attribution.\n\nNote that sleep prevention is not guaranteed; macOS may override our attempts at staying awake in extreme situations (CPU temperature dangerously high, low battery, etc.) See `hs.caffeinate` for more details.\n\nDownload: https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SleepCorners.spoon.zip",
    "items": [
      {
        "def": "SleepCorners:bindHotkeys(mapping) -> self",
        "desc": "Binds hotkeys for SleepCorners",
        "doc": "Binds hotkeys for SleepCorners\n\nParameters:\n * `mapping` - A table containing hotkey modifier/key details for one or more of the following commands:\n   * \"start\"  - start monitoring the defined corners\n   * \"stop\"   - stop monitoring the defined corners\n   * \"toggle\" - toggles monitoring on or off\n   * \"show\"   - shows the current corners for 3 seconds as a reminder of their assigned locations\n\nReturns:\n * the SleepCorners spoon object\n\nNotes:\n * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:\n   * `command`   - is one of the commands listed above\n   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`\n   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`",
        "examples": [],
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "632",
        "name": "bindHotkeys",
        "notes": [
          " * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:",
          "   * `command`   - is one of the commands listed above",
          "   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`",
          "   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`"
        ],
        "parameters": [
          " * `mapping` - A table containing hotkey modifier/key details for one or more of the following commands:\n   * \"start\"  - start monitoring the defined corners\n   * \"stop\"   - stop monitoring the defined corners\n   * \"toggle\" - toggles monitoring on or off\n   * \"show\"   - shows the current corners for 3 seconds as a reminder of their assigned locations"
        ],
        "returns": [
          " * the SleepCorners spoon object"
        ],
        "signature": "SleepCorners:bindHotkeys(mapping) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SleepCorners.feedbackSize",
        "desc": "Specifies the height and width in screen pixels, default 20, of the visual feedback to be displayed when the mouse pointer moves into one of the recognized hot corners",
        "doc": "Specifies the height and width in screen pixels, default 20, of the visual feedback to be displayed when the mouse pointer moves into one of the recognized hot corners",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "99",
        "name": "feedbackSize",
        "signature": "SleepCorners.feedbackSize",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.immediateSleepModifiers",
        "desc": "A table, default `{ fn = true }`, specifying keyboard modifiers which if held when the mouse pointer enters the sleep now hot corner will trigger sleep immediately rather then delay for [SleepCorners.sleepDelay](#sleepDelay) seconds.",
        "doc": "A table, default `{ fn = true }`, specifying keyboard modifiers which if held when the mouse pointer enters the sleep now hot corner will trigger sleep immediately rather then delay for [SleepCorners.sleepDelay](#sleepDelay) seconds.\n\nNotes:\n * This variable may be set to nil or an empty table, disabling the immediate sleep option, or a table containing one or more of the following keys:\n  * `fn`    - Set to true to require that the `Fn` key be pressed. May not be available on all keyboards, especially non-Apple ones.\n  * `cmd`   - Set to true to require that the Command (⌘) key be pressed\n  * `alt`   - Set to true to require that the Alt (or Option) (⌥) key be pressed\n  * `shift` - Set to true to require that the Shift (⇧) key be pressed\n  * `ctrl`  - Set to true to require that the Control (^) key be pressed\n * If this table contains multiple keys, then all of the specified modifiers must be pressed for immediate sleep to take affect.",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "120",
        "name": "immediateSleepModifiers",
        "notes": [
          " * This variable may be set to nil or an empty table, disabling the immediate sleep option, or a table containing one or more of the following keys:",
          "  * `fn`    - Set to true to require that the `Fn` key be pressed. May not be available on all keyboards, especially non-Apple ones.",
          "  * `cmd`   - Set to true to require that the Command (⌘) key be pressed",
          "  * `alt`   - Set to true to require that the Alt (or Option) (⌥) key be pressed",
          "  * `shift` - Set to true to require that the Shift (⇧) key be pressed",
          "  * `ctrl`  - Set to true to require that the Control (^) key be pressed",
          " * If this table contains multiple keys, then all of the specified modifiers must be pressed for immediate sleep to take affect."
        ],
        "signature": "SleepCorners.immediateSleepModifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.immediateSleepShouldLock",
        "desc": "Specifies whether the sleep now corner, when the modifiers defined for [SleepCorners.immediateSleepModifiers](#immediateSleepModifiers) are also held, should trigger the display sleep or lock the users session. Defaults to true.",
        "doc": "Specifies whether the sleep now corner, when the modifiers defined for [SleepCorners.immediateSleepModifiers](#immediateSleepModifiers) are also held, should trigger the display sleep or lock the users session. Defaults to true.\n\nNotes:\n * When this variable is set to true, triggering the sleep now corner for immediate sleep will lock the users session. When this variable is false, the display will be put to sleep instead.\n * Note that depending upon the user's settings in the Security & Privacy System Preferences, triggering the display sleep may also lock the user session immediately.",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "143",
        "name": "immediateSleepShouldLock",
        "notes": [
          " * When this variable is set to true, triggering the sleep now corner for immediate sleep will lock the users session. When this variable is false, the display will be put to sleep instead.",
          " * Note that depending upon the user's settings in the Security & Privacy System Preferences, triggering the display sleep may also lock the user session immediately."
        ],
        "signature": "SleepCorners.immediateSleepShouldLock",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SleepCorners:isActive() -> boolean",
        "desc": "Returns whether or not the sleep corners are currently active",
        "doc": "Returns whether or not the sleep corners are currently active\n\nParameters:\n * None\n\nReturns:\n * `true` if the sleep corners are currently active or `false` if they are not\n\nNotes:\n * This method only identifies whether or not the SleepCorners spoon has been started; it does not check whether or not the specified corners have been set to a location of \"*\" with [SleepCorners.sleepNowCorner](#sleepNowCorner) or [SleepCorners.neverSleepCorner](#neverSleepCorner).\n * If you want to check to see if SleepCorners has been started and that at least one of the corners is assigned to a corner, you should use something like `SleepCorners:isActive() and (SleepCorners.sleepNowCorner ~= \"*\" or SleepCorners.neverSleepCorner ~= \"*\")`",
        "examples": [],
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "458",
        "name": "isActive",
        "notes": [
          " * This method only identifies whether or not the SleepCorners spoon has been started; it does not check whether or not the specified corners have been set to a location of \"*\" with [SleepCorners.sleepNowCorner](#sleepNowCorner) or [SleepCorners.neverSleepCorner](#neverSleepCorner).",
          " * If you want to check to see if SleepCorners has been started and that at least one of the corners is assigned to a corner, you should use something like `SleepCorners:isActive() and (SleepCorners.sleepNowCorner ~= \"*\" or SleepCorners.neverSleepCorner ~= \"*\")`"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * `true` if the sleep corners are currently active or `false` if they are not"
        ],
        "signature": "SleepCorners:isActive() -> boolean",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SleepCorners.neverSleepCorner",
        "desc": "Specifies the location of the never sleep corner on the screen. Defaults to \"LR\".",
        "doc": "Specifies the location of the never sleep corner on the screen. Defaults to \"LR\".\n\nThis variable may be set to one of the following string values:\n\n  * `*`  - Do not provide a sleep now corner (disable this feature)\n  * `UL` - Upper left corner\n  * `UR` - Upper right corner\n  * `LR` - Lower right corner\n  * `LL` - Lower left corner",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "86",
        "name": "neverSleepCorner",
        "signature": "SleepCorners.neverSleepCorner",
        "stripped_doc": "This variable may be set to one of the following string values:\n  * `*`  - Do not provide a sleep now corner (disable this feature)\n  * `UL` - Upper left corner\n  * `UR` - Upper right corner\n  * `LR` - Lower right corner\n  * `LL` - Lower left corner",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.neverSleepLockModifiers",
        "desc": "A table, default `{ fn = true }`, specifying keyboard modifiers which if held when the mouse pointer enters the never sleep hot corner will disable display sleep and leave it disabled even if the mouse pointer leaves the hot corner. While the never sleep lock is in effect the never sleep visual feedback will remain visible in the appropriate corner of the screen. The never sleep lock may is unlocked when you move the mouse pointer back into the never sleep corner with the modifiers held down a second time or move the mouse pointer into the sleep now corner.",
        "doc": "A table, default `{ fn = true }`, specifying keyboard modifiers which if held when the mouse pointer enters the never sleep hot corner will disable display sleep and leave it disabled even if the mouse pointer leaves the hot corner. While the never sleep lock is in effect the never sleep visual feedback will remain visible in the appropriate corner of the screen. The never sleep lock may is unlocked when you move the mouse pointer back into the never sleep corner with the modifiers held down a second time or move the mouse pointer into the sleep now corner.\n\nNotes:\n * This variable may be set to nil or an empty table, disabling the never sleep lock option, or a table containing one or more of the following keys:\n  * `fn`    - Set to true to require that the `Fn` key be pressed. May not be available on all keyboards, especially non-Apple ones.\n  * `cmd`   - Set to true to require that the Command (⌘) key be pressed\n  * `alt`   - Set to true to require that the Alt (or Option) (⌥) key be pressed\n  * `shift` - Set to true to require that the Shift (⇧) key be pressed\n  * `ctrl`  - Set to true to require that the Control (^) key be pressed\n * If this table contains multiple keys, then all of the specified modifiers must be pressed for the never sleep lock to be triggered.",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "152",
        "name": "neverSleepLockModifiers",
        "notes": [
          " * This variable may be set to nil or an empty table, disabling the never sleep lock option, or a table containing one or more of the following keys:",
          "  * `fn`    - Set to true to require that the `Fn` key be pressed. May not be available on all keyboards, especially non-Apple ones.",
          "  * `cmd`   - Set to true to require that the Command (⌘) key be pressed",
          "  * `alt`   - Set to true to require that the Alt (or Option) (⌥) key be pressed",
          "  * `shift` - Set to true to require that the Shift (⇧) key be pressed",
          "  * `ctrl`  - Set to true to require that the Control (^) key be pressed",
          " * If this table contains multiple keys, then all of the specified modifiers must be pressed for the never sleep lock to be triggered."
        ],
        "signature": "SleepCorners.neverSleepLockModifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.preferSleepNow",
        "desc": "Specifies which action should be preferred if both the sleep now and never sleep hot corners are assigned to the same location on the screen. The default is false.",
        "doc": "Specifies which action should be preferred if both the sleep now and never sleep hot corners are assigned to the same location on the screen. The default is false.\n\nIf this variable is set to `true`, then sleep now action will be triggered if both hot corners are assigned to the same location on the screen. If this variable is set to `false`, then the never sleep action will be triggered.\n\nNote that this variable has no effect if the hot corners are distinct (i.e. are not assigned to the same corner)",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "111",
        "name": "preferSleepNow",
        "signature": "SleepCorners.preferSleepNow",
        "stripped_doc": "If this variable is set to `true`, then sleep now action will be triggered if both hot corners are assigned to the same location on the screen. If this variable is set to `false`, then the never sleep action will be triggered.\nNote that this variable has no effect if the hot corners are distinct (i.e. are not assigned to the same corner)",
        "type": "Variable"
      },
      {
        "def": "SleepCorners:show([duration]) -> self",
        "desc": "Temporarily show the SleepCorner feedback images in their current locations as a reminder of their positions on the screen.",
        "doc": "Temporarily show the SleepCorner feedback images in their current locations as a reminder of their positions on the screen.\n\nParameters:\n * `duration` - an optional number, default 3, specifying the number of seconds the feedback images should be displayed. If you specify `false` and the feedback images are currently being shown, the timer will be cur short and the images will be removed immediately.\n\nReturns:\n * the SleepCorners spoon object\n\nNotes:\n * this method will temporarily show the feedback images even if SleepCorners has been stopped (or has not yet been started).",
        "examples": [],
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "580",
        "name": "show",
        "notes": [
          " * this method will temporarily show the feedback images even if SleepCorners has been stopped (or has not yet been started)."
        ],
        "parameters": [
          " * `duration` - an optional number, default 3, specifying the number of seconds the feedback images should be displayed. If you specify `false` and the feedback images are currently being shown, the timer will be cur short and the images will be removed immediately."
        ],
        "returns": [
          " * the SleepCorners spoon object"
        ],
        "signature": "SleepCorners:show([duration]) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SleepCorners.sleepDelay",
        "desc": "Specifies the number of seconds, default 2, the mouse pointer must remain within the trigger area of the sleep now corner in order to put the system's display to sleep.",
        "doc": "Specifies the number of seconds, default 2, the mouse pointer must remain within the trigger area of the sleep now corner in order to put the system's display to sleep.\n\nWhen the mouse pointer moves into the trigger area for the sleep now hot corner, visual feedback will be provided for the user. If the user does not move the mouse pointer out of the trigger area within the number of seconds specified by this variable, display sleep will be activated.",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "55",
        "name": "sleepDelay",
        "signature": "SleepCorners.sleepDelay",
        "stripped_doc": "When the mouse pointer moves into the trigger area for the sleep now hot corner, visual feedback will be provided for the user. If the user does not move the mouse pointer out of the trigger area within the number of seconds specified by this variable, display sleep will be activated.",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.sleepNowCorner",
        "desc": "Specifies the location of the sleep now corner on the screen. Defaults to \"LL\".",
        "doc": "Specifies the location of the sleep now corner on the screen. Defaults to \"LL\".\n\nThis variable may be set to one of the following string values:\n\n  `*`  - Do not provide a sleep now corner (disable this feature)\n  `UL` - Upper left corner\n  `UR` - Upper right corner\n  `LR` - Lower right corner\n  `LL` - Lower left corner",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "73",
        "name": "sleepNowCorner",
        "signature": "SleepCorners.sleepNowCorner",
        "stripped_doc": "This variable may be set to one of the following string values:\n  `*`  - Do not provide a sleep now corner (disable this feature)\n  `UL` - Upper left corner\n  `UR` - Upper right corner\n  `LR` - Lower right corner\n  `LL` - Lower left corner",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.sleepNowShouldLock",
        "desc": "Specifies whether the sleep now corner should trigger the display sleep or lock the users session. Defaults to false.",
        "doc": "Specifies whether the sleep now corner should trigger the display sleep or lock the users session. Defaults to false.\n\nNotes:\n * When this variable is set to true, triggering the sleep now corner will lock the users session. When this variable is false, the display will be put to sleep instead.\n * Note that depending upon the user's settings in the Security & Privacy System Preferences, triggering the display sleep may also lock the user session immediately.",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "134",
        "name": "sleepNowShouldLock",
        "notes": [
          " * When this variable is set to true, triggering the sleep now corner will lock the users session. When this variable is false, the display will be put to sleep instead.",
          " * Note that depending upon the user's settings in the Security & Privacy System Preferences, triggering the display sleep may also lock the user session immediately."
        ],
        "signature": "SleepCorners.sleepNowShouldLock",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SleepCorners.sleepScreen",
        "desc": "Specifies the screen on which the sleep corners are made active. Defaults to the value returned by `hs.screen.primaryScreen()`.",
        "doc": "Specifies the screen on which the sleep corners are made active. Defaults to the value returned by `hs.screen.primaryScreen()`.\n\nThis variable may be set to an `hs.screen` userdata object or a function which returns an `hs.screen` userdata object. For example, to make the sleep corners active on the screen with the currently focused window, you could use the following function:\n\n    SleepCorners.sleepScreen = function()\n        return hs.screen.mainScreen()\n    end",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "62",
        "name": "sleepScreen",
        "signature": "SleepCorners.sleepScreen",
        "stripped_doc": "This variable may be set to an `hs.screen` userdata object or a function which returns an `hs.screen` userdata object. For example, to make the sleep corners active on the screen with the currently focused window, you could use the following function:\n    SleepCorners.sleepScreen = function()\n        return hs.screen.mainScreen()\n    end",
        "type": "Variable"
      },
      {
        "def": "SleepCorners:start() -> self",
        "desc": "Starts monitoring the defined sleep corners to allow triggering or preventing the system display  sleep state.",
        "doc": "Starts monitoring the defined sleep corners to allow triggering or preventing the system display  sleep state.\n\nParameters:\n * None\n\nReturns:\n * the SleepCorners spoon object\n\nNotes:\n * has no effect if SleepCorners has already been started",
        "examples": [],
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "478",
        "name": "start",
        "notes": [
          " * has no effect if SleepCorners has already been started"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * the SleepCorners spoon object"
        ],
        "signature": "SleepCorners:start() -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SleepCorners:stop() -> self",
        "desc": "Stop monitoring the defined sleep corners.",
        "doc": "Stop monitoring the defined sleep corners.\n\nParameters:\n * None\n\nReturns:\n * the SleepCorners spoon object\n\nNotes:\n * has no effect if SleepCorners has already been stopped\n * if SleepCorners was active, this method will return the display idle sleep setting back to its previous state and reset the never sleep lock if it has been triggered.",
        "examples": [],
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "508",
        "name": "stop",
        "notes": [
          " * has no effect if SleepCorners has already been stopped",
          " * if SleepCorners was active, this method will return the display idle sleep setting back to its previous state and reset the never sleep lock if it has been triggered."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * the SleepCorners spoon object"
        ],
        "signature": "SleepCorners:stop() -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SleepCorners:toggle([state]) -> self",
        "desc": "Toggles or sets whether or not SleepCorners is currently monitoring the defined screen corners for managing the system display's sleep state and displays an alert indicating the new state of the SleepCorners spoon.",
        "doc": "Toggles or sets whether or not SleepCorners is currently monitoring the defined screen corners for managing the system display's sleep state and displays an alert indicating the new state of the SleepCorners spoon.\n\nParameters:\n * `state` - an optional boolean which specifies specifically whether SleepCorners should be started if it isn't already running (true) or stopped if it currently is running (false)\n\nReturns:\n * the SleepCorners spoon object\n\nNotes:\n * If `state` is not provided, this method will start SleepCorners if it is currently stopped or stop it if is currently started.\n * `SleepCorners:toggle(true)` is equivalent to [SleepCorners:start()](#start) with the addition of displaying an alert specifying that SleepCorners is active.\n * `SleepCorners:toggle(false)` is equivalent to [SleepCorners:stop()](#stop) with the addition of displaying an alert specifying that SleepCorners has been deactivated.",
        "examples": [],
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "544",
        "name": "toggle",
        "notes": [
          " * If `state` is not provided, this method will start SleepCorners if it is currently stopped or stop it if is currently started.",
          " * `SleepCorners:toggle(true)` is equivalent to [SleepCorners:start()](#start) with the addition of displaying an alert specifying that SleepCorners is active.",
          " * `SleepCorners:toggle(false)` is equivalent to [SleepCorners:stop()](#stop) with the addition of displaying an alert specifying that SleepCorners has been deactivated."
        ],
        "parameters": [
          " * `state` - an optional boolean which specifies specifically whether SleepCorners should be started if it isn't already running (true) or stopped if it currently is running (false)"
        ],
        "returns": [
          " * the SleepCorners spoon object"
        ],
        "signature": "SleepCorners:toggle([state]) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SleepCorners.triggerSize",
        "desc": "Specifies the height and width in screen pixels, default 2, of the trigger area for the recognized hot corners.",
        "doc": "Specifies the height and width in screen pixels, default 2, of the trigger area for the recognized hot corners.\n\nThe trigger area, which may be smaller than the [SleepCorners.feedbackSize](#feedbackSize) area, is the region which the mouse pointer must be moved into before the specified feedback or sleep activity will occur.",
        "file": "Source/SleepCorners.spoon/init.lua",
        "lineno": "104",
        "name": "triggerSize",
        "signature": "SleepCorners.triggerSize",
        "stripped_doc": "The trigger area, which may be smaller than the [SleepCorners.feedbackSize](#feedbackSize) area, is the region which the mouse pointer must be moved into before the specified feedback or sleep activity will occur.",
        "type": "Variable"
      }
    ],
    "name": "SleepCorners",
    "stripped_doc": "\nWhile this functionality is provided by macOS in the Mission Control System Preferences, it doesn't provide any type of visual feedback so it's easy to forget which corners have been assigned which roles.\n\nFor best results while using this spoon, it is recommended that you disable \"Start Screen Saver\" and \"Disable Screen Saver\" if they are currently assigned to a corner with the Mission Control System Preferences Panel as this Spoon can't override them and may result in confusing or incorrect behavior.\n\nThe visual feed back provided by this spoon is of a small plus (for triggering sleep now) or a small minus (to prevent sleep) when the mouse pointer is moved into the appropriate corner. This feedback was inspired by a vague recollection of an early Mac screen saver (After Dark maybe?) which provided similar functionality. If someone knows for certain, please inform me and I will give appropriate attribution.\n\nNote that sleep prevention is not guaranteed; macOS may override our attempts at staying awake in extreme situations (CPU temperature dangerously high, low battery, etc.) See `hs.caffeinate` for more details.\n\nDownload: https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SleepCorners.spoon.zip",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "SpeedMenu:rescan()",
        "desc": "Redetect the active interface, darkmode …And redraw everything.",
        "doc": "Redetect the active interface, darkmode …And redraw everything.\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/SpeedMenu.spoon/init.lua",
        "lineno": "65",
        "name": "rescan",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "SpeedMenu:rescan()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Menubar netspeed meter",
    "doc": "Menubar netspeed meter\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SpeedMenu.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SpeedMenu.spoon.zip)",
    "items": [
      {
        "def": "SpeedMenu:rescan()",
        "desc": "Redetect the active interface, darkmode …And redraw everything.",
        "doc": "Redetect the active interface, darkmode …And redraw everything.\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/SpeedMenu.spoon/init.lua",
        "lineno": "65",
        "name": "rescan",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "SpeedMenu:rescan()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "SpeedMenu",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SpeedMenu.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SpeedMenu.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "SpoonInstall:andUse(name, arg)",
        "desc": "Declaratively install, load and configure a Spoon",
        "doc": "Declaratively install, load and configure a Spoon\n\nParameters:\n * name - the name of the Spoon to install (without the `.spoon` extension). If the Spoon is already installed, it will be loaded using `hs.loadSpoon()`. If it is not installed, it will be installed using `SpoonInstall:asyncInstallSpoonFromRepo()` and then loaded.\n * arg - if provided, can be used to specify the configuration of the Spoon. The following keys are recognized (all are optional):\n   * repo - repository from where the Spoon should be installed if not present in the system, as defined in `SpoonInstall.repos`. Defaults to `\"default\"`.\n   * config - a table containing variables to be stored in the Spoon object to configure it. For example, `config = { answer = 42 }` will result in `spoon.<LoadedSpoon>.answer` being set to 42.\n   * hotkeys - a table containing hotkey bindings. If provided, will be passed as-is to the Spoon's `bindHotkeys()` method. The special string `\"default\"` can be given to use the Spoons `defaultHotkeys` variable, if it exists.\n   * fn - a function which will be called with the freshly-loaded Spoon object as its first argument.\n   * loglevel - if the Spoon has a variable called `logger`, its `setLogLevel()` method will be called with this value.\n   * start - if `true`, call the Spoon's `start()` method after configuring everything else.\n   * disable - if `true`, do nothing. Easier than commenting it out when you want to temporarily disable a spoon.\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "387",
        "name": "andUse",
        "notes": [],
        "parameters": [
          " * name - the name of the Spoon to install (without the `.spoon` extension). If the Spoon is already installed, it will be loaded using `hs.loadSpoon()`. If it is not installed, it will be installed using `SpoonInstall:asyncInstallSpoonFromRepo()` and then loaded.",
          " * arg - if provided, can be used to specify the configuration of the Spoon. The following keys are recognized (all are optional):\n   * repo - repository from where the Spoon should be installed if not present in the system, as defined in `SpoonInstall.repos`. Defaults to `\"default\"`.\n   * config - a table containing variables to be stored in the Spoon object to configure it. For example, `config = { answer = 42 }` will result in `spoon.<LoadedSpoon>.answer` being set to 42.\n   * hotkeys - a table containing hotkey bindings. If provided, will be passed as-is to the Spoon's `bindHotkeys()` method. The special string `\"default\"` can be given to use the Spoons `defaultHotkeys` variable, if it exists.\n   * fn - a function which will be called with the freshly-loaded Spoon object as its first argument.\n   * loglevel - if the Spoon has a variable called `logger`, its `setLogLevel()` method will be called with this value.\n   * start - if `true`, call the Spoon's `start()` method after configuring everything else.\n   * disable - if `true`, do nothing. Easier than commenting it out when you want to temporarily disable a spoon."
        ],
        "returns": [
          " * None"
        ],
        "signature": "SpoonInstall:andUse(name, arg)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:asyncInstallSpoonFromRepo(name, repo, callback)",
        "desc": "Asynchronously install a Spoon from a registered repository",
        "doc": "Asynchronously install a Spoon from a registered repository\n\nParameters:\n * name - Name of the Spoon to install.\n * repo - Name of the repository to use. Defaults to `\"default\"`\n * callback - if given, a function to call after the installation finishes (also if it fails). The function receives the following arguments:\n   * urlparts - Result of calling `hs.http.urlParts` on the URL of the Spoon zip file\n   * success - boolean indicating whether the installation was successful\n\nReturns:\n * `true` if the installation was correctly initiated (i.e. the repo and spoon name were correct), `false` otherwise.",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "348",
        "name": "asyncInstallSpoonFromRepo",
        "notes": [],
        "parameters": [
          " * name - Name of the Spoon to install.",
          " * repo - Name of the repository to use. Defaults to `\"default\"`",
          " * callback - if given, a function to call after the installation finishes (also if it fails). The function receives the following arguments:\n   * urlparts - Result of calling `hs.http.urlParts` on the URL of the Spoon zip file\n   * success - boolean indicating whether the installation was successful"
        ],
        "returns": [
          " * `true` if the installation was correctly initiated (i.e. the repo and spoon name were correct), `false` otherwise."
        ],
        "signature": "SpoonInstall:asyncInstallSpoonFromRepo(name, repo, callback)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:asyncInstallSpoonFromZipURL(url, callback)",
        "desc": "Asynchronously download a Spoon zip file and install it.",
        "doc": "Asynchronously download a Spoon zip file and install it.\n\nParameters:\n * url - URL of the zip file to install.\n * callback - if given, a function to call after the installation finishes (also if it fails). The function receives the following arguments:\n   * urlparts - Result of calling `hs.http.urlParts` on the URL of the Spoon zip file\n   * success - boolean indicating whether the installation was successful\n\nReturns:\n * `true` if the installation was correctly initiated (i.e. the URL is valid), `false` otherwise",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "285",
        "name": "asyncInstallSpoonFromZipURL",
        "notes": [],
        "parameters": [
          " * url - URL of the zip file to install.",
          " * callback - if given, a function to call after the installation finishes (also if it fails). The function receives the following arguments:\n   * urlparts - Result of calling `hs.http.urlParts` on the URL of the Spoon zip file\n   * success - boolean indicating whether the installation was successful"
        ],
        "returns": [
          " * `true` if the installation was correctly initiated (i.e. the URL is valid), `false` otherwise"
        ],
        "signature": "SpoonInstall:asyncInstallSpoonFromZipURL(url, callback)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:asyncUpdateAllRepos()",
        "desc": "Asynchronously fetch the information about the contents of all Spoon repositories registered in `SpoonInstall.repos`",
        "doc": "Asynchronously fetch the information about the contents of all Spoon repositories registered in `SpoonInstall.repos`\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions.",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "159",
        "name": "asyncUpdateAllRepos",
        "notes": [
          " * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "SpoonInstall:asyncUpdateAllRepos()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:asyncUpdateRepo(repo, callback)",
        "desc": "Asynchronously fetch the information about the contents of a Spoon repository",
        "doc": "Asynchronously fetch the information about the contents of a Spoon repository\n\nParameters:\n * repo - name of the repository to update. Defaults to `\"default\"`.\n * callback - if given, a function to be called after the update finishes (also if it fails). The function will receive the following arguments:\n   * repo - name of the repository\n   * success - boolean indicating whether the update succeeded\n\nReturns:\n * `true` if the update was correctly initiated (i.e. the repo name is valid), `nil` otherwise\n\nNotes:\n * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions.",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "111",
        "name": "asyncUpdateRepo",
        "notes": [
          " * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions."
        ],
        "parameters": [
          " * repo - name of the repository to update. Defaults to `\"default\"`.",
          " * callback - if given, a function to be called after the update finishes (also if it fails). The function will receive the following arguments:\n   * repo - name of the repository\n   * success - boolean indicating whether the update succeeded"
        ],
        "returns": [
          " * `true` if the update was correctly initiated (i.e. the repo name is valid), `nil` otherwise"
        ],
        "signature": "SpoonInstall:asyncUpdateRepo(repo, callback)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:installSpoonFromRepo(name, repo)",
        "desc": "Synchronously install a Spoon from a registered repository",
        "doc": "Synchronously install a Spoon from a registered repository\n\nParameters:\n * name = Name of the Spoon to install.\n * repo - Name of the repository to use. Defaults to `\"default\"`\n\nReturns:\n * `true` if the installation was successful, `nil` otherwise.",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "369",
        "name": "installSpoonFromRepo",
        "notes": [],
        "parameters": [
          " * name = Name of the Spoon to install.",
          " * repo - Name of the repository to use. Defaults to `\"default\"`"
        ],
        "returns": [
          " * `true` if the installation was successful, `nil` otherwise."
        ],
        "signature": "SpoonInstall:installSpoonFromRepo(name, repo)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:installSpoonFromZipURL(url)",
        "desc": "Synchronously download a Spoon zip file and install it.",
        "doc": "Synchronously download a Spoon zip file and install it.\n\nParameters:\n * url - URL of the zip file to install.\n\nReturns:\n * `true` if the installation was successful, `nil` otherwise",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "309",
        "name": "installSpoonFromZipURL",
        "notes": [],
        "parameters": [
          " * url - URL of the zip file to install."
        ],
        "returns": [
          " * `true` if the installation was successful, `nil` otherwise"
        ],
        "signature": "SpoonInstall:installSpoonFromZipURL(url)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:repolist()",
        "desc": "Return a sorted list of registered Spoon repositories",
        "doc": "Return a sorted list of registered Spoon repositories\n\nParameters:\n * None\n\nReturns:\n * Table containing a list of strings with the repository identifiers",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "196",
        "name": "repolist",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Table containing a list of strings with the repository identifiers"
        ],
        "signature": "SpoonInstall:repolist()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:search(pat)",
        "desc": "Search repositories for a pattern",
        "doc": "Search repositories for a pattern\n\nParameters:\n * pat - Lua pattern that will be matched against the name and description of each spoon in the registered repositories. All text is converted to lowercase before searching it, so you can use all-lowercase in your pattern.\n\nReturns:\n * Table containing a list of matching entries. Each entry is a table with the following keys:\n   * name - Spoon name\n   * desc - description of the spoon\n   * repo - identifier in the repository where the match was found",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "213",
        "name": "search",
        "notes": [],
        "parameters": [
          " * pat - Lua pattern that will be matched against the name and description of each spoon in the registered repositories. All text is converted to lowercase before searching it, so you can use all-lowercase in your pattern."
        ],
        "returns": [
          " * Table containing a list of matching entries. Each entry is a table with the following keys:",
          "   * name - Spoon name",
          "   * desc - description of the spoon",
          "   * repo - identifier in the repository where the match was found"
        ],
        "signature": "SpoonInstall:search(pat)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:updateAllRepos()",
        "desc": "Synchronously fetch the information about the contents of all Spoon repositories registered in `SpoonInstall.repos`",
        "doc": "Synchronously fetch the information about the contents of all Spoon repositories registered in `SpoonInstall.repos`\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This is a synchronous call, which means Hammerspoon will be blocked until it finishes.\n * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions.",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "177",
        "name": "updateAllRepos",
        "notes": [
          " * This is a synchronous call, which means Hammerspoon will be blocked until it finishes.",
          " * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "SpoonInstall:updateAllRepos()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:updateRepo(repo)",
        "desc": "Synchronously fetch the information about the contents of a Spoon repository",
        "doc": "Synchronously fetch the information about the contents of a Spoon repository\n\nParameters:\n * repo - name of the repository to update. Defaults to `\"default\"`.\n\nReturns:\n * `true` if the update was successful, `nil` otherwise\n\nNotes:\n * This is a synchronous call, which means Hammerspoon will be blocked until it finishes. For use in your configuration files, it's advisable to use `SpoonInstall.asyncUpdateRepo()` instead.\n * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions.",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "136",
        "name": "updateRepo",
        "notes": [
          " * This is a synchronous call, which means Hammerspoon will be blocked until it finishes. For use in your configuration files, it's advisable to use `SpoonInstall.asyncUpdateRepo()` instead.",
          " * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions."
        ],
        "parameters": [
          " * repo - name of the repository to update. Defaults to `\"default\"`."
        ],
        "returns": [
          " * `true` if the update was successful, `nil` otherwise"
        ],
        "signature": "SpoonInstall:updateRepo(repo)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "SpoonInstall.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "17",
        "name": "logger",
        "signature": "SpoonInstall.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SpoonInstall.repos",
        "desc": "Table containing the list of available Spoon repositories.",
        "doc": "Table containing the list of available Spoon repositories.\n\nNotes:\n * The key of each entry is an identifier for the repository, and its value is a table with the following entries:\n  * desc - Human-readable description for the repository\n  * branch - Active git branch for the Spoon files\n  * url - Base URL for the repository. For now the repository is assumed to be hosted in GitHub, and the URL should be the main base URL of the repository. Repository metadata needs to be stored under `docs/docs.json`, and the Spoon zip files need to be stored under `Spoons/`.\n * Default value:\n```\n{\n   default = {\n      url = \"https://github.com/Hammerspoon/Spoons\",\n      desc = \"Main Hammerspoon Spoon repository\",\n      branch = \"master\",\n   }\n}\n```",
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "22",
        "name": "repos",
        "notes": [
          " * The key of each entry is an identifier for the repository, and its value is a table with the following entries:",
          "  * desc - Human-readable description for the repository",
          "  * branch - Active git branch for the Spoon files",
          "  * url - Base URL for the repository. For now the repository is assumed to be hosted in GitHub, and the URL should be the main base URL of the repository. Repository metadata needs to be stored under `docs/docs.json`, and the Spoon zip files need to be stored under `Spoons/`.",
          " * Default value:",
          "```",
          "{",
          "   default = {",
          "      url = \"https://github.com/Hammerspoon/Spoons\",",
          "      desc = \"Main Hammerspoon Spoon repository\",",
          "      branch = \"master\",",
          "   }",
          "}",
          "```"
        ],
        "signature": "SpoonInstall.repos",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SpoonInstall.use_syncinstall",
        "desc": "If `true`, `andUse()` will update repos and install packages synchronously. Defaults to `false`.",
        "doc": "If `true`, `andUse()` will update repos and install packages synchronously. Defaults to `false`.\n\nNotes:\n * Keep in mind that if you set this to `true`, Hammerspoon will block until all missing Spoons are installed, but the notifications will happen at a more \"human readable\" rate.",
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "49",
        "name": "use_syncinstall",
        "notes": [
          " * Keep in mind that if you set this to `true`, Hammerspoon will block until all missing Spoons are installed, but the notifications will happen at a more \"human readable\" rate."
        ],
        "signature": "SpoonInstall.use_syncinstall",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Install and manage Spoons and Spoon repositories",
    "doc": "Install and manage Spoons and Spoon repositories\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SpoonInstall.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SpoonInstall.spoon.zip)",
    "items": [
      {
        "def": "SpoonInstall:andUse(name, arg)",
        "desc": "Declaratively install, load and configure a Spoon",
        "doc": "Declaratively install, load and configure a Spoon\n\nParameters:\n * name - the name of the Spoon to install (without the `.spoon` extension). If the Spoon is already installed, it will be loaded using `hs.loadSpoon()`. If it is not installed, it will be installed using `SpoonInstall:asyncInstallSpoonFromRepo()` and then loaded.\n * arg - if provided, can be used to specify the configuration of the Spoon. The following keys are recognized (all are optional):\n   * repo - repository from where the Spoon should be installed if not present in the system, as defined in `SpoonInstall.repos`. Defaults to `\"default\"`.\n   * config - a table containing variables to be stored in the Spoon object to configure it. For example, `config = { answer = 42 }` will result in `spoon.<LoadedSpoon>.answer` being set to 42.\n   * hotkeys - a table containing hotkey bindings. If provided, will be passed as-is to the Spoon's `bindHotkeys()` method. The special string `\"default\"` can be given to use the Spoons `defaultHotkeys` variable, if it exists.\n   * fn - a function which will be called with the freshly-loaded Spoon object as its first argument.\n   * loglevel - if the Spoon has a variable called `logger`, its `setLogLevel()` method will be called with this value.\n   * start - if `true`, call the Spoon's `start()` method after configuring everything else.\n   * disable - if `true`, do nothing. Easier than commenting it out when you want to temporarily disable a spoon.\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "387",
        "name": "andUse",
        "notes": [],
        "parameters": [
          " * name - the name of the Spoon to install (without the `.spoon` extension). If the Spoon is already installed, it will be loaded using `hs.loadSpoon()`. If it is not installed, it will be installed using `SpoonInstall:asyncInstallSpoonFromRepo()` and then loaded.",
          " * arg - if provided, can be used to specify the configuration of the Spoon. The following keys are recognized (all are optional):\n   * repo - repository from where the Spoon should be installed if not present in the system, as defined in `SpoonInstall.repos`. Defaults to `\"default\"`.\n   * config - a table containing variables to be stored in the Spoon object to configure it. For example, `config = { answer = 42 }` will result in `spoon.<LoadedSpoon>.answer` being set to 42.\n   * hotkeys - a table containing hotkey bindings. If provided, will be passed as-is to the Spoon's `bindHotkeys()` method. The special string `\"default\"` can be given to use the Spoons `defaultHotkeys` variable, if it exists.\n   * fn - a function which will be called with the freshly-loaded Spoon object as its first argument.\n   * loglevel - if the Spoon has a variable called `logger`, its `setLogLevel()` method will be called with this value.\n   * start - if `true`, call the Spoon's `start()` method after configuring everything else.\n   * disable - if `true`, do nothing. Easier than commenting it out when you want to temporarily disable a spoon."
        ],
        "returns": [
          " * None"
        ],
        "signature": "SpoonInstall:andUse(name, arg)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:asyncInstallSpoonFromRepo(name, repo, callback)",
        "desc": "Asynchronously install a Spoon from a registered repository",
        "doc": "Asynchronously install a Spoon from a registered repository\n\nParameters:\n * name - Name of the Spoon to install.\n * repo - Name of the repository to use. Defaults to `\"default\"`\n * callback - if given, a function to call after the installation finishes (also if it fails). The function receives the following arguments:\n   * urlparts - Result of calling `hs.http.urlParts` on the URL of the Spoon zip file\n   * success - boolean indicating whether the installation was successful\n\nReturns:\n * `true` if the installation was correctly initiated (i.e. the repo and spoon name were correct), `false` otherwise.",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "348",
        "name": "asyncInstallSpoonFromRepo",
        "notes": [],
        "parameters": [
          " * name - Name of the Spoon to install.",
          " * repo - Name of the repository to use. Defaults to `\"default\"`",
          " * callback - if given, a function to call after the installation finishes (also if it fails). The function receives the following arguments:\n   * urlparts - Result of calling `hs.http.urlParts` on the URL of the Spoon zip file\n   * success - boolean indicating whether the installation was successful"
        ],
        "returns": [
          " * `true` if the installation was correctly initiated (i.e. the repo and spoon name were correct), `false` otherwise."
        ],
        "signature": "SpoonInstall:asyncInstallSpoonFromRepo(name, repo, callback)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:asyncInstallSpoonFromZipURL(url, callback)",
        "desc": "Asynchronously download a Spoon zip file and install it.",
        "doc": "Asynchronously download a Spoon zip file and install it.\n\nParameters:\n * url - URL of the zip file to install.\n * callback - if given, a function to call after the installation finishes (also if it fails). The function receives the following arguments:\n   * urlparts - Result of calling `hs.http.urlParts` on the URL of the Spoon zip file\n   * success - boolean indicating whether the installation was successful\n\nReturns:\n * `true` if the installation was correctly initiated (i.e. the URL is valid), `false` otherwise",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "285",
        "name": "asyncInstallSpoonFromZipURL",
        "notes": [],
        "parameters": [
          " * url - URL of the zip file to install.",
          " * callback - if given, a function to call after the installation finishes (also if it fails). The function receives the following arguments:\n   * urlparts - Result of calling `hs.http.urlParts` on the URL of the Spoon zip file\n   * success - boolean indicating whether the installation was successful"
        ],
        "returns": [
          " * `true` if the installation was correctly initiated (i.e. the URL is valid), `false` otherwise"
        ],
        "signature": "SpoonInstall:asyncInstallSpoonFromZipURL(url, callback)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:asyncUpdateAllRepos()",
        "desc": "Asynchronously fetch the information about the contents of all Spoon repositories registered in `SpoonInstall.repos`",
        "doc": "Asynchronously fetch the information about the contents of all Spoon repositories registered in `SpoonInstall.repos`\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions.",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "159",
        "name": "asyncUpdateAllRepos",
        "notes": [
          " * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "SpoonInstall:asyncUpdateAllRepos()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:asyncUpdateRepo(repo, callback)",
        "desc": "Asynchronously fetch the information about the contents of a Spoon repository",
        "doc": "Asynchronously fetch the information about the contents of a Spoon repository\n\nParameters:\n * repo - name of the repository to update. Defaults to `\"default\"`.\n * callback - if given, a function to be called after the update finishes (also if it fails). The function will receive the following arguments:\n   * repo - name of the repository\n   * success - boolean indicating whether the update succeeded\n\nReturns:\n * `true` if the update was correctly initiated (i.e. the repo name is valid), `nil` otherwise\n\nNotes:\n * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions.",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "111",
        "name": "asyncUpdateRepo",
        "notes": [
          " * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions."
        ],
        "parameters": [
          " * repo - name of the repository to update. Defaults to `\"default\"`.",
          " * callback - if given, a function to be called after the update finishes (also if it fails). The function will receive the following arguments:\n   * repo - name of the repository\n   * success - boolean indicating whether the update succeeded"
        ],
        "returns": [
          " * `true` if the update was correctly initiated (i.e. the repo name is valid), `nil` otherwise"
        ],
        "signature": "SpoonInstall:asyncUpdateRepo(repo, callback)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:installSpoonFromRepo(name, repo)",
        "desc": "Synchronously install a Spoon from a registered repository",
        "doc": "Synchronously install a Spoon from a registered repository\n\nParameters:\n * name = Name of the Spoon to install.\n * repo - Name of the repository to use. Defaults to `\"default\"`\n\nReturns:\n * `true` if the installation was successful, `nil` otherwise.",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "369",
        "name": "installSpoonFromRepo",
        "notes": [],
        "parameters": [
          " * name = Name of the Spoon to install.",
          " * repo - Name of the repository to use. Defaults to `\"default\"`"
        ],
        "returns": [
          " * `true` if the installation was successful, `nil` otherwise."
        ],
        "signature": "SpoonInstall:installSpoonFromRepo(name, repo)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:installSpoonFromZipURL(url)",
        "desc": "Synchronously download a Spoon zip file and install it.",
        "doc": "Synchronously download a Spoon zip file and install it.\n\nParameters:\n * url - URL of the zip file to install.\n\nReturns:\n * `true` if the installation was successful, `nil` otherwise",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "309",
        "name": "installSpoonFromZipURL",
        "notes": [],
        "parameters": [
          " * url - URL of the zip file to install."
        ],
        "returns": [
          " * `true` if the installation was successful, `nil` otherwise"
        ],
        "signature": "SpoonInstall:installSpoonFromZipURL(url)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "17",
        "name": "logger",
        "signature": "SpoonInstall.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SpoonInstall:repolist()",
        "desc": "Return a sorted list of registered Spoon repositories",
        "doc": "Return a sorted list of registered Spoon repositories\n\nParameters:\n * None\n\nReturns:\n * Table containing a list of strings with the repository identifiers",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "196",
        "name": "repolist",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Table containing a list of strings with the repository identifiers"
        ],
        "signature": "SpoonInstall:repolist()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall.repos",
        "desc": "Table containing the list of available Spoon repositories.",
        "doc": "Table containing the list of available Spoon repositories.\n\nNotes:\n * The key of each entry is an identifier for the repository, and its value is a table with the following entries:\n  * desc - Human-readable description for the repository\n  * branch - Active git branch for the Spoon files\n  * url - Base URL for the repository. For now the repository is assumed to be hosted in GitHub, and the URL should be the main base URL of the repository. Repository metadata needs to be stored under `docs/docs.json`, and the Spoon zip files need to be stored under `Spoons/`.\n * Default value:\n```\n{\n   default = {\n      url = \"https://github.com/Hammerspoon/Spoons\",\n      desc = \"Main Hammerspoon Spoon repository\",\n      branch = \"master\",\n   }\n}\n```",
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "22",
        "name": "repos",
        "notes": [
          " * The key of each entry is an identifier for the repository, and its value is a table with the following entries:",
          "  * desc - Human-readable description for the repository",
          "  * branch - Active git branch for the Spoon files",
          "  * url - Base URL for the repository. For now the repository is assumed to be hosted in GitHub, and the URL should be the main base URL of the repository. Repository metadata needs to be stored under `docs/docs.json`, and the Spoon zip files need to be stored under `Spoons/`.",
          " * Default value:",
          "```",
          "{",
          "   default = {",
          "      url = \"https://github.com/Hammerspoon/Spoons\",",
          "      desc = \"Main Hammerspoon Spoon repository\",",
          "      branch = \"master\",",
          "   }",
          "}",
          "```"
        ],
        "signature": "SpoonInstall.repos",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SpoonInstall:search(pat)",
        "desc": "Search repositories for a pattern",
        "doc": "Search repositories for a pattern\n\nParameters:\n * pat - Lua pattern that will be matched against the name and description of each spoon in the registered repositories. All text is converted to lowercase before searching it, so you can use all-lowercase in your pattern.\n\nReturns:\n * Table containing a list of matching entries. Each entry is a table with the following keys:\n   * name - Spoon name\n   * desc - description of the spoon\n   * repo - identifier in the repository where the match was found",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "213",
        "name": "search",
        "notes": [],
        "parameters": [
          " * pat - Lua pattern that will be matched against the name and description of each spoon in the registered repositories. All text is converted to lowercase before searching it, so you can use all-lowercase in your pattern."
        ],
        "returns": [
          " * Table containing a list of matching entries. Each entry is a table with the following keys:",
          "   * name - Spoon name",
          "   * desc - description of the spoon",
          "   * repo - identifier in the repository where the match was found"
        ],
        "signature": "SpoonInstall:search(pat)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:updateAllRepos()",
        "desc": "Synchronously fetch the information about the contents of all Spoon repositories registered in `SpoonInstall.repos`",
        "doc": "Synchronously fetch the information about the contents of all Spoon repositories registered in `SpoonInstall.repos`\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This is a synchronous call, which means Hammerspoon will be blocked until it finishes.\n * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions.",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "177",
        "name": "updateAllRepos",
        "notes": [
          " * This is a synchronous call, which means Hammerspoon will be blocked until it finishes.",
          " * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "SpoonInstall:updateAllRepos()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall:updateRepo(repo)",
        "desc": "Synchronously fetch the information about the contents of a Spoon repository",
        "doc": "Synchronously fetch the information about the contents of a Spoon repository\n\nParameters:\n * repo - name of the repository to update. Defaults to `\"default\"`.\n\nReturns:\n * `true` if the update was successful, `nil` otherwise\n\nNotes:\n * This is a synchronous call, which means Hammerspoon will be blocked until it finishes. For use in your configuration files, it's advisable to use `SpoonInstall.asyncUpdateRepo()` instead.\n * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions.",
        "examples": [],
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "136",
        "name": "updateRepo",
        "notes": [
          " * This is a synchronous call, which means Hammerspoon will be blocked until it finishes. For use in your configuration files, it's advisable to use `SpoonInstall.asyncUpdateRepo()` instead.",
          " * For now, the repository data is not persisted, so you need to update it after every restart if you want to use any of the install functions."
        ],
        "parameters": [
          " * repo - name of the repository to update. Defaults to `\"default\"`."
        ],
        "returns": [
          " * `true` if the update was successful, `nil` otherwise"
        ],
        "signature": "SpoonInstall:updateRepo(repo)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SpoonInstall.use_syncinstall",
        "desc": "If `true`, `andUse()` will update repos and install packages synchronously. Defaults to `false`.",
        "doc": "If `true`, `andUse()` will update repos and install packages synchronously. Defaults to `false`.\n\nNotes:\n * Keep in mind that if you set this to `true`, Hammerspoon will block until all missing Spoons are installed, but the notifications will happen at a more \"human readable\" rate.",
        "file": "Source/SpoonInstall.spoon/init.lua",
        "lineno": "49",
        "name": "use_syncinstall",
        "notes": [
          " * Keep in mind that if you set this to `true`, Hammerspoon will block until all missing Spoons are installed, but the notifications will happen at a more \"human readable\" rate."
        ],
        "signature": "SpoonInstall.use_syncinstall",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "SpoonInstall",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SpoonInstall.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SpoonInstall.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "TextClipboardHistory:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for TextClipboardHistory",
        "doc": "Binds hotkeys for TextClipboardHistory\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * show_clipboard - Display the clipboard history chooser\n  * toggle_clipboard - Show/hide the clipboard history chooser",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "337",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * show_clipboard - Display the clipboard history chooser\n   * toggle_clipboard - Show/hide the clipboard history chooser"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:checkAndStorePasteboard()",
        "desc": "If the pasteboard has changed, we add the current item to our history and update the counter",
        "doc": "If the pasteboard has changed, we add the current item to our history and update the counter\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "258",
        "name": "checkAndStorePasteboard",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:checkAndStorePasteboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:clearAll()",
        "desc": "Clears the clipboard and history",
        "doc": "Clears the clipboard and history\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "149",
        "name": "clearAll",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:clearAll()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:clearLastItem()",
        "desc": "Clears the last added to the history",
        "doc": "Clears the last added to the history\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "162",
        "name": "clearLastItem",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:clearLastItem()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:pasteboardToClipboard(item)",
        "desc": "Add the given string to the history",
        "doc": "Add the given string to the history\n\nParameters:\n * item - string to add to the clipboard history\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "190",
        "name": "pasteboardToClipboard",
        "notes": [],
        "parameters": [
          " * item - string to add to the clipboard history"
        ],
        "returns": [
          " * None"
        ],
        "signature": "TextClipboardHistory:pasteboardToClipboard(item)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:shouldBeStored()",
        "desc": "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
        "doc": "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "232",
        "name": "shouldBeStored",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:shouldBeStored()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:showClipboard()",
        "desc": "Display the current clipboard list in a chooser",
        "doc": "Display the current clipboard list in a chooser\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "307",
        "name": "showClipboard",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:showClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:start()",
        "desc": "Start the clipboard history collector",
        "doc": "Start the clipboard history collector\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "285",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:toggleClipboard()",
        "desc": "Show/hide the clipboard list, depending on its current state",
        "doc": "Show/hide the clipboard list, depending on its current state\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "323",
        "name": "toggleClipboard",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:toggleClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:togglePasteOnSelect()",
        "desc": "Toggle the value of `TextClipboardHistory.paste_on_select`",
        "doc": "Toggle the value of `TextClipboardHistory.paste_on_select`\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "114",
        "name": "togglePasteOnSelect",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:togglePasteOnSelect()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "TextClipboardHistory.deduplicate",
        "desc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "doc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "74",
        "name": "deduplicate",
        "signature": "TextClipboardHistory.deduplicate",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.frequency",
        "desc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "doc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "22",
        "name": "frequency",
        "signature": "TextClipboardHistory.frequency",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.hist_size",
        "desc": "How many items to keep on history. Defaults to 100",
        "doc": "How many items to keep on history. Defaults to 100",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "27",
        "name": "hist_size",
        "signature": "TextClipboardHistory.hist_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.honor_ignoredidentifiers",
        "desc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "doc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "32",
        "name": "honor_ignoredidentifiers",
        "signature": "TextClipboardHistory.honor_ignoredidentifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.ignoredIdentifiers",
        "desc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua.",
        "doc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua.\n\nNotes:\n * Default value (don't modify unless you know what you are doing):\n```\n {\n    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler\n    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me\n    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator\n    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password\n    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient\n    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed\n    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic\n }\n```",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "47",
        "name": "ignoredIdentifiers",
        "notes": [
          " * Default value (don't modify unless you know what you are doing):",
          "```",
          " {",
          "    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler",
          "    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me",
          "    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator",
          "    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password",
          "    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient",
          "    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed",
          "    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic",
          " }",
          "```"
        ],
        "signature": "TextClipboardHistory.ignoredIdentifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "42",
        "name": "logger",
        "signature": "TextClipboardHistory.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.menubar_title",
        "desc": "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`.",
        "doc": "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`.\n\nNotes:\n * Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "84",
        "name": "menubar_title",
        "notes": [
          " * Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)"
        ],
        "signature": "TextClipboardHistory.menubar_title",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.paste_on_select",
        "desc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "doc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "37",
        "name": "paste_on_select",
        "signature": "TextClipboardHistory.paste_on_select",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.show_in_menubar",
        "desc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "doc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "79",
        "name": "show_in_menubar",
        "signature": "TextClipboardHistory.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Keep a history of the clipboard, only for text entries",
    "doc": "Keep a history of the clipboard, only for text entries\n\nOriginally based on [code by VFS](https://github.com/VFS/.hammerspoon/blob/master/tools/clipboard.lua), but with many changes and some contributions and inspiration from [asmagill](https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua).\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TextClipboardHistory.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TextClipboardHistory.spoon.zip)",
    "items": [
      {
        "def": "TextClipboardHistory:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for TextClipboardHistory",
        "doc": "Binds hotkeys for TextClipboardHistory\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * show_clipboard - Display the clipboard history chooser\n  * toggle_clipboard - Show/hide the clipboard history chooser",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "337",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * show_clipboard - Display the clipboard history chooser\n   * toggle_clipboard - Show/hide the clipboard history chooser"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:checkAndStorePasteboard()",
        "desc": "If the pasteboard has changed, we add the current item to our history and update the counter",
        "doc": "If the pasteboard has changed, we add the current item to our history and update the counter\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "258",
        "name": "checkAndStorePasteboard",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:checkAndStorePasteboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:clearAll()",
        "desc": "Clears the clipboard and history",
        "doc": "Clears the clipboard and history\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "149",
        "name": "clearAll",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:clearAll()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:clearLastItem()",
        "desc": "Clears the last added to the history",
        "doc": "Clears the last added to the history\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "162",
        "name": "clearLastItem",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:clearLastItem()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory.deduplicate",
        "desc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "doc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "74",
        "name": "deduplicate",
        "signature": "TextClipboardHistory.deduplicate",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.frequency",
        "desc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "doc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "22",
        "name": "frequency",
        "signature": "TextClipboardHistory.frequency",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.hist_size",
        "desc": "How many items to keep on history. Defaults to 100",
        "doc": "How many items to keep on history. Defaults to 100",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "27",
        "name": "hist_size",
        "signature": "TextClipboardHistory.hist_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.honor_ignoredidentifiers",
        "desc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "doc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "32",
        "name": "honor_ignoredidentifiers",
        "signature": "TextClipboardHistory.honor_ignoredidentifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.ignoredIdentifiers",
        "desc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua.",
        "doc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua.\n\nNotes:\n * Default value (don't modify unless you know what you are doing):\n```\n {\n    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler\n    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me\n    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator\n    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password\n    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient\n    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed\n    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic\n }\n```",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "47",
        "name": "ignoredIdentifiers",
        "notes": [
          " * Default value (don't modify unless you know what you are doing):",
          "```",
          " {",
          "    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler",
          "    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me",
          "    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator",
          "    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password",
          "    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient",
          "    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed",
          "    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic",
          " }",
          "```"
        ],
        "signature": "TextClipboardHistory.ignoredIdentifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "42",
        "name": "logger",
        "signature": "TextClipboardHistory.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.menubar_title",
        "desc": "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`.",
        "doc": "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`.\n\nNotes:\n * Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "84",
        "name": "menubar_title",
        "notes": [
          " * Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)"
        ],
        "signature": "TextClipboardHistory.menubar_title",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.paste_on_select",
        "desc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "doc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "37",
        "name": "paste_on_select",
        "signature": "TextClipboardHistory.paste_on_select",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory:pasteboardToClipboard(item)",
        "desc": "Add the given string to the history",
        "doc": "Add the given string to the history\n\nParameters:\n * item - string to add to the clipboard history\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "190",
        "name": "pasteboardToClipboard",
        "notes": [],
        "parameters": [
          " * item - string to add to the clipboard history"
        ],
        "returns": [
          " * None"
        ],
        "signature": "TextClipboardHistory:pasteboardToClipboard(item)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:shouldBeStored()",
        "desc": "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
        "doc": "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "232",
        "name": "shouldBeStored",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:shouldBeStored()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory.show_in_menubar",
        "desc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "doc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "79",
        "name": "show_in_menubar",
        "signature": "TextClipboardHistory.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory:showClipboard()",
        "desc": "Display the current clipboard list in a chooser",
        "doc": "Display the current clipboard list in a chooser\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "307",
        "name": "showClipboard",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:showClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:start()",
        "desc": "Start the clipboard history collector",
        "doc": "Start the clipboard history collector\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "285",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:toggleClipboard()",
        "desc": "Show/hide the clipboard list, depending on its current state",
        "doc": "Show/hide the clipboard list, depending on its current state\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "323",
        "name": "toggleClipboard",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:toggleClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:togglePasteOnSelect()",
        "desc": "Toggle the value of `TextClipboardHistory.paste_on_select`",
        "doc": "Toggle the value of `TextClipboardHistory.paste_on_select`\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TextClipboardHistory.spoon/init.lua",
        "lineno": "114",
        "name": "togglePasteOnSelect",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TextClipboardHistory:togglePasteOnSelect()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "TextClipboardHistory",
    "stripped_doc": "\nOriginally based on [code by VFS](https://github.com/VFS/.hammerspoon/blob/master/tools/clipboard.lua), but with many changes and some contributions and inspiration from [asmagill](https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua).\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TextClipboardHistory.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TextClipboardHistory.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "A widget showing time flown in one year.",
    "doc": "A widget showing time flown in one year.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TimeFlow.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TimeFlow.spoon.zip)",
    "items": [],
    "name": "TimeFlow",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TimeFlow.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TimeFlow.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "TimeMachineProgress:refresh()",
        "desc": "Update the indicator and menu according to the current backup status.",
        "doc": "Update the indicator and menu according to the current backup status.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TimeMachineProgress.spoon/init.lua",
        "lineno": "95",
        "name": "refresh",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TimeMachineProgress:refresh()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TimeMachineProgress:start()",
        "desc": "Starts the indicator",
        "doc": "Starts the indicator\n\nParameters:\n * None\n\nReturns:\n * The TimeMachineProgress object",
        "examples": [],
        "file": "Source/TimeMachineProgress.spoon/init.lua",
        "lineno": "203",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The TimeMachineProgress object"
        ],
        "signature": "TimeMachineProgress:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TimeMachineProgress:stop()",
        "desc": "Stops the indicator",
        "doc": "Stops the indicator\n\nParameters:\n * None\n\nReturns:\n * The TimeMachineProgress object",
        "examples": [],
        "file": "Source/TimeMachineProgress.spoon/init.lua",
        "lineno": "221",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The TimeMachineProgress object"
        ],
        "signature": "TimeMachineProgress:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "TimeMachineProgress.backupIcon",
        "desc": "Image to use for the menubar icon.",
        "doc": "Image to use for the menubar icon.\n\nNotes:\n * Defaults to the default macOS Time Machine menubar icon stored in `/System/Library/CoreServices/Menu Extras/TimeMachine.menu/Contents/Resources/TMBackingUp.pdf`. If this fails, it defaults to the Time Machine application icon, obtained as `hs.image.imageFromAppBundle('com.apple.backup.launcher'):setSize({w=18,h=18})`.",
        "file": "Source/TimeMachineProgress.spoon/init.lua",
        "lineno": "31",
        "name": "backupIcon",
        "notes": [
          " * Defaults to the default macOS Time Machine menubar icon stored in `/System/Library/CoreServices/Menu Extras/TimeMachine.menu/Contents/Resources/TMBackingUp.pdf`. If this fails, it defaults to the Time Machine application icon, obtained as `hs.image.imageFromAppBundle('com.apple.backup.launcher'):setSize({w=18,h=18})`."
        ],
        "signature": "TimeMachineProgress.backupIcon",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TimeMachineProgress.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/TimeMachineProgress.spoon/init.lua",
        "lineno": "21",
        "name": "logger",
        "signature": "TimeMachineProgress.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TimeMachineProgress.refresh_interval",
        "desc": "Integer specifying how often the indicator should be refreshed. Defaults to 5 seconds.",
        "doc": "Integer specifying how often the indicator should be refreshed. Defaults to 5 seconds.",
        "file": "Source/TimeMachineProgress.spoon/init.lua",
        "lineno": "26",
        "name": "refresh_interval",
        "signature": "TimeMachineProgress.refresh_interval",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Show Time Machine backup progress in a menubar indicator.",
    "doc": "Show Time Machine backup progress in a menubar indicator.\n\nIf no backup is in progress, the indicator disappears. When a\nbackup is in preparation of in progress, the indicator is shown,\nindicating current state/progress of the backup.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TimeMachineProgress.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TimeMachineProgress.spoon.zip)",
    "items": [
      {
        "def": "TimeMachineProgress.backupIcon",
        "desc": "Image to use for the menubar icon.",
        "doc": "Image to use for the menubar icon.\n\nNotes:\n * Defaults to the default macOS Time Machine menubar icon stored in `/System/Library/CoreServices/Menu Extras/TimeMachine.menu/Contents/Resources/TMBackingUp.pdf`. If this fails, it defaults to the Time Machine application icon, obtained as `hs.image.imageFromAppBundle('com.apple.backup.launcher'):setSize({w=18,h=18})`.",
        "file": "Source/TimeMachineProgress.spoon/init.lua",
        "lineno": "31",
        "name": "backupIcon",
        "notes": [
          " * Defaults to the default macOS Time Machine menubar icon stored in `/System/Library/CoreServices/Menu Extras/TimeMachine.menu/Contents/Resources/TMBackingUp.pdf`. If this fails, it defaults to the Time Machine application icon, obtained as `hs.image.imageFromAppBundle('com.apple.backup.launcher'):setSize({w=18,h=18})`."
        ],
        "signature": "TimeMachineProgress.backupIcon",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TimeMachineProgress.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/TimeMachineProgress.spoon/init.lua",
        "lineno": "21",
        "name": "logger",
        "signature": "TimeMachineProgress.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TimeMachineProgress:refresh()",
        "desc": "Update the indicator and menu according to the current backup status.",
        "doc": "Update the indicator and menu according to the current backup status.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/TimeMachineProgress.spoon/init.lua",
        "lineno": "95",
        "name": "refresh",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "TimeMachineProgress:refresh()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TimeMachineProgress.refresh_interval",
        "desc": "Integer specifying how often the indicator should be refreshed. Defaults to 5 seconds.",
        "doc": "Integer specifying how often the indicator should be refreshed. Defaults to 5 seconds.",
        "file": "Source/TimeMachineProgress.spoon/init.lua",
        "lineno": "26",
        "name": "refresh_interval",
        "signature": "TimeMachineProgress.refresh_interval",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TimeMachineProgress:start()",
        "desc": "Starts the indicator",
        "doc": "Starts the indicator\n\nParameters:\n * None\n\nReturns:\n * The TimeMachineProgress object",
        "examples": [],
        "file": "Source/TimeMachineProgress.spoon/init.lua",
        "lineno": "203",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The TimeMachineProgress object"
        ],
        "signature": "TimeMachineProgress:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TimeMachineProgress:stop()",
        "desc": "Stops the indicator",
        "doc": "Stops the indicator\n\nParameters:\n * None\n\nReturns:\n * The TimeMachineProgress object",
        "examples": [],
        "file": "Source/TimeMachineProgress.spoon/init.lua",
        "lineno": "221",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The TimeMachineProgress object"
        ],
        "signature": "TimeMachineProgress:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "TimeMachineProgress",
    "stripped_doc": "\nIf no backup is in progress, the indicator disappears. When a\nbackup is in preparation of in progress, the indicator is shown,\nindicating current state/progress of the backup.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TimeMachineProgress.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TimeMachineProgress.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "ToggleScreenRotation:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ToggleScreenRotation.",
        "doc": "Binds hotkeys for ToggleScreenRotation.\n\nParameters:\n * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen):\n   ```\n     [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" }\n   ```",
        "examples": [],
        "file": "Source/ToggleScreenRotation.spoon/init.lua",
        "lineno": "97",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen): ``` [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" } ```"
        ],
        "returns": [],
        "signature": "ToggleScreenRotation:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "ToggleScreenRotation.rotating_angles",
        "desc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "doc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "file": "Source/ToggleScreenRotation.spoon/init.lua",
        "lineno": "35",
        "name": "rotating_angles",
        "signature": "ToggleScreenRotation.rotating_angles",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ToggleScreenRotation.screens_to_skip",
        "desc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.",
        "doc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.\n\nNotes:\n * Defaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs.",
        "file": "Source/ToggleScreenRotation.spoon/init.lua",
        "lineno": "27",
        "name": "screens_to_skip",
        "notes": [
          " * Defaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs."
        ],
        "signature": "ToggleScreenRotation.screens_to_skip",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Toggle rotation on external screens",
    "doc": "Toggle rotation on external screens\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip)\n\nMakes the following simplifying assumptions:\n* That you only toggle between two positions for rotated/not\n  rotated (configured in `rotating_angles`, and which apply to all\n  screens)\n* That \"rotated\" means \"taller than wider\", for the purposes of\n  determining if the screen is rotated upon initialization.",
    "items": [
      {
        "def": "ToggleScreenRotation:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ToggleScreenRotation.",
        "doc": "Binds hotkeys for ToggleScreenRotation.\n\nParameters:\n * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen):\n   ```\n     [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" }\n   ```",
        "examples": [],
        "file": "Source/ToggleScreenRotation.spoon/init.lua",
        "lineno": "97",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen): ``` [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" } ```"
        ],
        "returns": [],
        "signature": "ToggleScreenRotation:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ToggleScreenRotation.rotating_angles",
        "desc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "doc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "file": "Source/ToggleScreenRotation.spoon/init.lua",
        "lineno": "35",
        "name": "rotating_angles",
        "signature": "ToggleScreenRotation.rotating_angles",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ToggleScreenRotation.screens_to_skip",
        "desc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.",
        "doc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.\n\nNotes:\n * Defaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs.",
        "file": "Source/ToggleScreenRotation.spoon/init.lua",
        "lineno": "27",
        "name": "screens_to_skip",
        "notes": [
          " * Defaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs."
        ],
        "signature": "ToggleScreenRotation.screens_to_skip",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "ToggleScreenRotation",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip)\n\nMakes the following simplifying assumptions:\n* That you only toggle between two positions for rotated/not\n  rotated (configured in `rotating_angles`, and which apply to all\n  screens)\n* That \"rotated\" means \"taller than wider\", for the purposes of\n  determining if the screen is rotated upon initialization.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "ToggleSkypeMute:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ToggleSkypeMute",
        "doc": "Binds hotkeys for ToggleSkypeMute\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle_skype - Mute/unmute active conversation in Skype\n  * toggle_skype_for_business - Mute/unmute active conversation in Skype For Business",
        "examples": [],
        "file": "Source/ToggleSkypeMute.spoon/init.lua",
        "lineno": "65",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * toggle_skype - Mute/unmute active conversation in Skype\n   * toggle_skype_for_business - Mute/unmute active conversation in Skype For Business"
        ],
        "returns": [],
        "signature": "ToggleSkypeMute:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ToggleSkypeMute:toggle(app)",
        "desc": "Toggle Skype between muted/unmuted, whether it is focused or not",
        "doc": "Toggle Skype between muted/unmuted, whether it is focused or not\n\nParameters:\n * app - name of the application to mute/unmute. Supported values are \"Skype\" and \"Skype for Business\". Defaults to \"Skype\".\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/ToggleSkypeMute.spoon/init.lua",
        "lineno": "27",
        "name": "toggle",
        "notes": [],
        "parameters": [
          " * app - name of the application to mute/unmute. Supported values are \"Skype\" and \"Skype for Business\". Defaults to \"Skype\"."
        ],
        "returns": [
          " * None"
        ],
        "signature": "ToggleSkypeMute:toggle(app)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "ToggleSkypeMute.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/ToggleSkypeMute.spoon/init.lua",
        "lineno": "17",
        "name": "logger",
        "signature": "ToggleSkypeMute.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ToggleSkypeMute.notifications",
        "desc": "If `true`, produce notifications when Skype is muted/unmuted. Defaults to `true`.",
        "doc": "If `true`, produce notifications when Skype is muted/unmuted. Defaults to `true`.",
        "file": "Source/ToggleSkypeMute.spoon/init.lua",
        "lineno": "22",
        "name": "notifications",
        "signature": "ToggleSkypeMute.notifications",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Provide keybindings for muting/unmuting Skype or Skype for Business",
    "doc": "Provide keybindings for muting/unmuting Skype or Skype for Business\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleSkypeMute.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleSkypeMute.spoon.zip)",
    "items": [
      {
        "def": "ToggleSkypeMute:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ToggleSkypeMute",
        "doc": "Binds hotkeys for ToggleSkypeMute\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle_skype - Mute/unmute active conversation in Skype\n  * toggle_skype_for_business - Mute/unmute active conversation in Skype For Business",
        "examples": [],
        "file": "Source/ToggleSkypeMute.spoon/init.lua",
        "lineno": "65",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * toggle_skype - Mute/unmute active conversation in Skype\n   * toggle_skype_for_business - Mute/unmute active conversation in Skype For Business"
        ],
        "returns": [],
        "signature": "ToggleSkypeMute:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ToggleSkypeMute.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/ToggleSkypeMute.spoon/init.lua",
        "lineno": "17",
        "name": "logger",
        "signature": "ToggleSkypeMute.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ToggleSkypeMute.notifications",
        "desc": "If `true`, produce notifications when Skype is muted/unmuted. Defaults to `true`.",
        "doc": "If `true`, produce notifications when Skype is muted/unmuted. Defaults to `true`.",
        "file": "Source/ToggleSkypeMute.spoon/init.lua",
        "lineno": "22",
        "name": "notifications",
        "signature": "ToggleSkypeMute.notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ToggleSkypeMute:toggle(app)",
        "desc": "Toggle Skype between muted/unmuted, whether it is focused or not",
        "doc": "Toggle Skype between muted/unmuted, whether it is focused or not\n\nParameters:\n * app - name of the application to mute/unmute. Supported values are \"Skype\" and \"Skype for Business\". Defaults to \"Skype\".\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/ToggleSkypeMute.spoon/init.lua",
        "lineno": "27",
        "name": "toggle",
        "notes": [],
        "parameters": [
          " * app - name of the application to mute/unmute. Supported values are \"Skype\" and \"Skype for Business\". Defaults to \"Skype\"."
        ],
        "returns": [
          " * None"
        ],
        "signature": "ToggleSkypeMute:toggle(app)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "ToggleSkypeMute",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleSkypeMute.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleSkypeMute.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Token:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Token",
        "doc": "Binds hotkeys for Token\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * generate - generate and type token",
        "examples": [],
        "file": "Source/Token.spoon/init.lua",
        "lineno": "77",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * generate - generate and type token"
        ],
        "returns": [],
        "signature": "Token:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Token:get_token()",
        "desc": "Retrieves the token using an HOTP/TOTP Secret Key stored in the keychain",
        "doc": "Retrieves the token using an HOTP/TOTP Secret Key stored in the keychain\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Token.spoon/init.lua",
        "lineno": "65",
        "name": "get_token",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Token:get_token()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Token:token_keystroke()",
        "desc": "read a token secret key from keychain, generate a code and make keystrokes for it",
        "doc": "read a token secret key from keychain, generate a code and make keystrokes for it\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Token.spoon/init.lua",
        "lineno": "53",
        "name": "token_keystroke",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Token:token_keystroke()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Token.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/Token.spoon/init.lua",
        "lineno": "20",
        "name": "logger",
        "signature": "Token.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Token.secret_key",
        "desc": "String indicating the Keychain name of the Shared Key used in the OTP HMAC-SHA1 generation",
        "doc": "String indicating the Keychain name of the Shared Key used in the OTP HMAC-SHA1 generation",
        "file": "Source/Token.spoon/init.lua",
        "lineno": "25",
        "name": "secret_key",
        "signature": "Token.secret_key",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "generate google authenticator token value keystrokes",
    "doc": "generate google authenticator token value keystrokes\nRetrieve a google authenticator token seed from keychain and use this to calculate the current value\nSimulate keystrokes for this token value\n\nwritten by Teun Vink <github@teun.tv>, converted to spoon by Tyler Thrailkill <snowe>\n\nhttps://github.com/teunvink/hammerspoon",
    "items": [
      {
        "def": "Token:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Token",
        "doc": "Binds hotkeys for Token\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * generate - generate and type token",
        "examples": [],
        "file": "Source/Token.spoon/init.lua",
        "lineno": "77",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * generate - generate and type token"
        ],
        "returns": [],
        "signature": "Token:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Token:get_token()",
        "desc": "Retrieves the token using an HOTP/TOTP Secret Key stored in the keychain",
        "doc": "Retrieves the token using an HOTP/TOTP Secret Key stored in the keychain\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Token.spoon/init.lua",
        "lineno": "65",
        "name": "get_token",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Token:get_token()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Token.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/Token.spoon/init.lua",
        "lineno": "20",
        "name": "logger",
        "signature": "Token.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Token.secret_key",
        "desc": "String indicating the Keychain name of the Shared Key used in the OTP HMAC-SHA1 generation",
        "doc": "String indicating the Keychain name of the Shared Key used in the OTP HMAC-SHA1 generation",
        "file": "Source/Token.spoon/init.lua",
        "lineno": "25",
        "name": "secret_key",
        "signature": "Token.secret_key",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Token:token_keystroke()",
        "desc": "read a token secret key from keychain, generate a code and make keystrokes for it",
        "doc": "read a token secret key from keychain, generate a code and make keystrokes for it\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Token.spoon/init.lua",
        "lineno": "53",
        "name": "token_keystroke",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Token:token_keystroke()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Token",
    "stripped_doc": "Retrieve a google authenticator token seed from keychain and use this to calculate the current value\nSimulate keystrokes for this token value\n\nwritten by Teun Vink <github@teun.tv>, converted to spoon by Tyler Thrailkill <snowe>\n\nhttps://github.com/teunvink/hammerspoon",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Tunnelblick:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Tunnelblick",
        "doc": "Binds hotkeys for Tunnelblick\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * login - login to tunnelblick shortcut",
        "examples": [],
        "file": "Source/Tunnelblick.spoon/init.lua",
        "lineno": "78",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * login - login to tunnelblick shortcut"
        ],
        "returns": [],
        "signature": "Tunnelblick:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Tunnelblick:connect()",
        "desc": "Performs the connection operation using a username, password, and connection_name",
        "doc": "Performs the connection operation using a username, password, and connection_name\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Tunnelblick.spoon/init.lua",
        "lineno": "39",
        "name": "connect",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Tunnelblick:connect()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Tunnelblick.connection_name",
        "desc": "String connection name",
        "doc": "String connection name",
        "file": "Source/Tunnelblick.spoon/init.lua",
        "lineno": "34",
        "name": "connection_name",
        "signature": "Tunnelblick.connection_name",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Tunnelblick.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/Tunnelblick.spoon/init.lua",
        "lineno": "19",
        "name": "logger",
        "signature": "Tunnelblick.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Tunnelblick.password_fn",
        "desc": "Function returning the password to login to the vpn connection with",
        "doc": "Function returning the password to login to the vpn connection with",
        "file": "Source/Tunnelblick.spoon/init.lua",
        "lineno": "24",
        "name": "password_fn",
        "signature": "Tunnelblick.password_fn",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Tunnelblick.username",
        "desc": "String username to log in with",
        "doc": "String username to log in with",
        "file": "Source/Tunnelblick.spoon/init.lua",
        "lineno": "29",
        "name": "username",
        "signature": "Tunnelblick.username",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "connect to a Tunnelblick OpenVPN connection using a shortcut",
    "doc": "connect to a Tunnelblick OpenVPN connection using a shortcut\nUses applescript to interact with Tunnelblick's window\n\nwritten by Tyler Thrailkill <tyler.b.thrailkill@gmail.com>\n\nhttps://github.com/snowe2010",
    "items": [
      {
        "def": "Tunnelblick:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Tunnelblick",
        "doc": "Binds hotkeys for Tunnelblick\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * login - login to tunnelblick shortcut",
        "examples": [],
        "file": "Source/Tunnelblick.spoon/init.lua",
        "lineno": "78",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * login - login to tunnelblick shortcut"
        ],
        "returns": [],
        "signature": "Tunnelblick:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Tunnelblick:connect()",
        "desc": "Performs the connection operation using a username, password, and connection_name",
        "doc": "Performs the connection operation using a username, password, and connection_name\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/Tunnelblick.spoon/init.lua",
        "lineno": "39",
        "name": "connect",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Tunnelblick:connect()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Tunnelblick.connection_name",
        "desc": "String connection name",
        "doc": "String connection name",
        "file": "Source/Tunnelblick.spoon/init.lua",
        "lineno": "34",
        "name": "connection_name",
        "signature": "Tunnelblick.connection_name",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Tunnelblick.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/Tunnelblick.spoon/init.lua",
        "lineno": "19",
        "name": "logger",
        "signature": "Tunnelblick.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Tunnelblick.password_fn",
        "desc": "Function returning the password to login to the vpn connection with",
        "doc": "Function returning the password to login to the vpn connection with",
        "file": "Source/Tunnelblick.spoon/init.lua",
        "lineno": "24",
        "name": "password_fn",
        "signature": "Tunnelblick.password_fn",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Tunnelblick.username",
        "desc": "String username to log in with",
        "doc": "String username to log in with",
        "file": "Source/Tunnelblick.spoon/init.lua",
        "lineno": "29",
        "name": "username",
        "signature": "Tunnelblick.username",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "Tunnelblick",
    "stripped_doc": "Uses applescript to interact with Tunnelblick's window\n\nwritten by Tyler Thrailkill <tyler.b.thrailkill@gmail.com>\n\nhttps://github.com/snowe2010",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "TurboBoost:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for TurboBoost",
        "doc": "Binds hotkeys for TurboBoost\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * hello - Say Hello",
        "examples": [],
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "197",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * hello - Say Hello"
        ],
        "returns": [],
        "signature": "TurboBoost:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TurboBoost:setState(state, notify)",
        "desc": "Sets whether Turbo Boost should be disabled (kernel extension loaded) or enabled (normal state, kernel extension not loaded).",
        "doc": "Sets whether Turbo Boost should be disabled (kernel extension loaded) or enabled (normal state, kernel extension not loaded).\n\nParameters:\n * state - A boolean, false if Turbo Boost should be disabled (load kernel extension), true if it should be enabled (unload kernel extension if loaded).\n * notify - Optional boolean indicating whether a notification should be produced. If not given, the value of TurboBoost.notify is used.\n\nReturns:\n * Boolean indicating new state",
        "examples": [],
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "129",
        "name": "setState",
        "notes": [],
        "parameters": [
          " * state - A boolean, false if Turbo Boost should be disabled (load kernel extension), true if it should be enabled (unload kernel extension if loaded).",
          " * notify - Optional boolean indicating whether a notification should be produced. If not given, the value of TurboBoost.notify is used."
        ],
        "returns": [
          " * Boolean indicating new state"
        ],
        "signature": "TurboBoost:setState(state, notify)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TurboBoost:start()",
        "desc": "Starts TurboBoost",
        "doc": "Starts TurboBoost\n\nParameters:\n * None\n\nReturns:\n * The TurboBoost object",
        "examples": [],
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "209",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The TurboBoost object"
        ],
        "signature": "TurboBoost:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TurboBoost:status()",
        "desc": "Check whether Turbo Boost is enabled",
        "doc": "Check whether Turbo Boost is enabled\n\nParameters:\n * None\n\nReturns:\n * true if TurboBoost is enabled (kernel ext not loaded), false otherwise.",
        "examples": [],
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "168",
        "name": "status",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * true if TurboBoost is enabled (kernel ext not loaded), false otherwise."
        ],
        "signature": "TurboBoost:status()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TurboBoost:stop()",
        "desc": "Stops TurboBoost",
        "doc": "Stops TurboBoost\n\nParameters:\n * None\n\nReturns:\n * The TurboBoost object",
        "examples": [],
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "230",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The TurboBoost object"
        ],
        "signature": "TurboBoost:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TurboBoost:toggle()",
        "desc": "Toggle TurboBoost status",
        "doc": "Toggle TurboBoost status\n\nParameters:\n * None\n\nReturns:\n * New TurboBoost status, after the toggle",
        "examples": [],
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "183",
        "name": "toggle",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * New TurboBoost status, after the toggle"
        ],
        "signature": "TurboBoost:toggle()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "TurboBoost.check_kext_cmd",
        "desc": "Command to execute to check whether the DisableTurboBoost kernel extension is loaded.",
        "doc": "Command to execute to check whether the DisableTurboBoost kernel extension is loaded.\n\nNotes:\n * Default value: `\"/usr/sbin/kextstat | grep com.rugarciap.DisableTurboBoost\"`",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "100",
        "name": "check_kext_cmd",
        "notes": [
          " * Default value: `\"/usr/sbin/kextstat | grep com.rugarciap.DisableTurboBoost\"`"
        ],
        "signature": "TurboBoost.check_kext_cmd",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.disable_on_start",
        "desc": "Boolean to indicate whether Turbo Boost should be disabled when",
        "doc": "Boolean to indicate whether Turbo Boost should be disabled when\nthe Spoon starts. Default value: `false`.",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "45",
        "name": "disable_on_start",
        "signature": "TurboBoost.disable_on_start",
        "stripped_doc": "the Spoon starts. Default value: `false`.",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.disabled_icon_path",
        "desc": "Where to find the icon to use for the \"Disabled\" icon.",
        "doc": "Where to find the icon to use for the \"Disabled\" icon.\n\nNotes:\n * Default value uses the icon from the Turbo Boost application: `\"/Applications/Turbo Boost Switcher.app/Contents/Resources/icon_off.tiff\"`",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "121",
        "name": "disabled_icon_path",
        "notes": [
          " * Default value uses the icon from the Turbo Boost application: `\"/Applications/Turbo Boost Switcher.app/Contents/Resources/icon_off.tiff\"`"
        ],
        "signature": "TurboBoost.disabled_icon_path",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.enabled_icon_path",
        "desc": "Where to find the icon to use for the \"Enabled\" icon.",
        "doc": "Where to find the icon to use for the \"Enabled\" icon.\n\nNotes:\n * Default value uses the icon from the Turbo Boost application: `\"/Applications/Turbo Boost Switcher.app/Contents/Resources/icon.tiff\"`",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "113",
        "name": "enabled_icon_path",
        "notes": [
          " * Default value uses the icon from the Turbo Boost application: `\"/Applications/Turbo Boost Switcher.app/Contents/Resources/icon.tiff\"`"
        ],
        "signature": "TurboBoost.enabled_icon_path",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.kext_path",
        "desc": "Where the DisableTurboBoost.kext file is located.",
        "doc": "Where the DisableTurboBoost.kext file is located.\n\nDefault value: whichever one of `TurboBoost.kext_paths` exists.",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "67",
        "name": "kext_path",
        "signature": "TurboBoost.kext_path",
        "stripped_doc": "Default value: whichever one of `TurboBoost.kext_paths` exists.",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.kext_paths",
        "desc": "List with paths to check for the DisableTurboBoost.kext file. The first one",
        "doc": "List with paths to check for the DisableTurboBoost.kext file. The first one\nto be found is used by default unless DisableTurboBoost.kext_path is set\nexplicitly.\n\nDefault value: `{\"/Applications/Turbo Boost Switcher.app/Contents/Resources/DisableTurboBoost.64bits.kext\", \"/Applications/tbswitcher_resources/DisableTurboBoost.64bits.kext\"}`",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "57",
        "name": "kext_paths",
        "signature": "TurboBoost.kext_paths",
        "stripped_doc": "to be found is used by default unless DisableTurboBoost.kext_path is set\nexplicitly.\nDefault value: `{\"/Applications/Turbo Boost Switcher.app/Contents/Resources/DisableTurboBoost.64bits.kext\", \"/Applications/tbswitcher_resources/DisableTurboBoost.64bits.kext\"}`",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.load_kext_cmd",
        "desc": "Command to execute to load the DisableTurboBoost kernel extension.",
        "doc": "Command to execute to load the DisableTurboBoost kernel extension.\n\nNotes:\n * This command must execute with root privileges and either query the user for the credentials, or be configured (e.g. with sudo) to run without prompting.\n * The string \"%s\" in this variable gets replaced with the value of TurboBoost.kext_path. Default value: `\"/usr/bin/sudo /usr/bin/kextutil '%s'\"`",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "82",
        "name": "load_kext_cmd",
        "notes": [
          " * This command must execute with root privileges and either query the user for the credentials, or be configured (e.g. with sudo) to run without prompting.",
          " * The string \"%s\" in this variable gets replaced with the value of TurboBoost.kext_path. Default value: `\"/usr/bin/sudo /usr/bin/kextutil '%s'\"`"
        ],
        "signature": "TurboBoost.load_kext_cmd",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "37",
        "name": "logger",
        "signature": "TurboBoost.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.notify",
        "desc": "Boolean indicating whether notifications should be generated when Turbo Boost is enabled/disabled. Default value: `true`",
        "doc": "Boolean indicating whether notifications should be generated when Turbo Boost is enabled/disabled. Default value: `true`",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "108",
        "name": "notify",
        "signature": "TurboBoost.notify",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.reenable_on_stop",
        "desc": "Boolean to indicate whether Turbo Boost should be reenabled when",
        "doc": "Boolean to indicate whether Turbo Boost should be reenabled when\nthe Spoon stops. Default value: `true`.",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "51",
        "name": "reenable_on_stop",
        "signature": "TurboBoost.reenable_on_stop",
        "stripped_doc": "the Spoon stops. Default value: `true`.",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.unload_kext_cmd",
        "desc": "Command to execute to unload the DisableTurboBoost kernel extension.",
        "doc": "Command to execute to unload the DisableTurboBoost kernel extension.\n\nNotes:\n * This command must execute with root privileges and either query the user for the credentials, or be configured (e.g. with sudo) to run without prompting.\n * The string \"%s\" in this variable gets replaced with the value of TurboBoost.kext_path. Default value: `\"/usr/bin/sudo /sbin/kextunload '%s'\"`",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "91",
        "name": "unload_kext_cmd",
        "notes": [
          " * This command must execute with root privileges and either query the user for the credentials, or be configured (e.g. with sudo) to run without prompting.",
          " * The string \"%s\" in this variable gets replaced with the value of TurboBoost.kext_path. Default value: `\"/usr/bin/sudo /sbin/kextunload '%s'\"`"
        ],
        "signature": "TurboBoost.unload_kext_cmd",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "A spoon to load/unload the Turbo Boost Disable kernel extension",
    "doc": "A spoon to load/unload the Turbo Boost Disable kernel extension\nfrom https://github.com/rugarciap/Turbo-Boost-Switcher.\n\nNote: this spoon by default uses sudo to load/unload the kernel\nextension, so for it to work from Hammerspoon, you need to\nconfigure sudo to be able to load/unload the extension without a\npassword, or configure the load_kext_cmd and unload_kext_cmd\nvariables to use some other mechanism that prompts you for the\ncredentials.\n\nFor example, the following configuration (stored in\n/etc/sudoers.d/turboboost) can be used to allow loading and\nunloading the module without a password:\n```\nCmnd_Alias    TURBO_OPS = /sbin/kextunload /Applications/Turbo Boost Switcher.app/Contents/Resources/DisableTurboBoost.64bits.kext, /usr/bin/kextutil /Applications/Turbo Boost Switcher.app/Contents/Resources/DisableTurboBoost.64bits.kext\n\n%admin ALL=(ALL) NOPASSWD: TURBO_OPS\n```\n\nIf you use this, please support the author of Turbo Boost Disabler\nby purchasing the Pro version of the app!\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TurboBoost.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TurboBoost.spoon.zip)",
    "items": [
      {
        "def": "TurboBoost:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for TurboBoost",
        "doc": "Binds hotkeys for TurboBoost\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * hello - Say Hello",
        "examples": [],
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "197",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * hello - Say Hello"
        ],
        "returns": [],
        "signature": "TurboBoost:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TurboBoost.check_kext_cmd",
        "desc": "Command to execute to check whether the DisableTurboBoost kernel extension is loaded.",
        "doc": "Command to execute to check whether the DisableTurboBoost kernel extension is loaded.\n\nNotes:\n * Default value: `\"/usr/sbin/kextstat | grep com.rugarciap.DisableTurboBoost\"`",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "100",
        "name": "check_kext_cmd",
        "notes": [
          " * Default value: `\"/usr/sbin/kextstat | grep com.rugarciap.DisableTurboBoost\"`"
        ],
        "signature": "TurboBoost.check_kext_cmd",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.disable_on_start",
        "desc": "Boolean to indicate whether Turbo Boost should be disabled when",
        "doc": "Boolean to indicate whether Turbo Boost should be disabled when\nthe Spoon starts. Default value: `false`.",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "45",
        "name": "disable_on_start",
        "signature": "TurboBoost.disable_on_start",
        "stripped_doc": "the Spoon starts. Default value: `false`.",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.disabled_icon_path",
        "desc": "Where to find the icon to use for the \"Disabled\" icon.",
        "doc": "Where to find the icon to use for the \"Disabled\" icon.\n\nNotes:\n * Default value uses the icon from the Turbo Boost application: `\"/Applications/Turbo Boost Switcher.app/Contents/Resources/icon_off.tiff\"`",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "121",
        "name": "disabled_icon_path",
        "notes": [
          " * Default value uses the icon from the Turbo Boost application: `\"/Applications/Turbo Boost Switcher.app/Contents/Resources/icon_off.tiff\"`"
        ],
        "signature": "TurboBoost.disabled_icon_path",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.enabled_icon_path",
        "desc": "Where to find the icon to use for the \"Enabled\" icon.",
        "doc": "Where to find the icon to use for the \"Enabled\" icon.\n\nNotes:\n * Default value uses the icon from the Turbo Boost application: `\"/Applications/Turbo Boost Switcher.app/Contents/Resources/icon.tiff\"`",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "113",
        "name": "enabled_icon_path",
        "notes": [
          " * Default value uses the icon from the Turbo Boost application: `\"/Applications/Turbo Boost Switcher.app/Contents/Resources/icon.tiff\"`"
        ],
        "signature": "TurboBoost.enabled_icon_path",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.kext_path",
        "desc": "Where the DisableTurboBoost.kext file is located.",
        "doc": "Where the DisableTurboBoost.kext file is located.\n\nDefault value: whichever one of `TurboBoost.kext_paths` exists.",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "67",
        "name": "kext_path",
        "signature": "TurboBoost.kext_path",
        "stripped_doc": "Default value: whichever one of `TurboBoost.kext_paths` exists.",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.kext_paths",
        "desc": "List with paths to check for the DisableTurboBoost.kext file. The first one",
        "doc": "List with paths to check for the DisableTurboBoost.kext file. The first one\nto be found is used by default unless DisableTurboBoost.kext_path is set\nexplicitly.\n\nDefault value: `{\"/Applications/Turbo Boost Switcher.app/Contents/Resources/DisableTurboBoost.64bits.kext\", \"/Applications/tbswitcher_resources/DisableTurboBoost.64bits.kext\"}`",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "57",
        "name": "kext_paths",
        "signature": "TurboBoost.kext_paths",
        "stripped_doc": "to be found is used by default unless DisableTurboBoost.kext_path is set\nexplicitly.\nDefault value: `{\"/Applications/Turbo Boost Switcher.app/Contents/Resources/DisableTurboBoost.64bits.kext\", \"/Applications/tbswitcher_resources/DisableTurboBoost.64bits.kext\"}`",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.load_kext_cmd",
        "desc": "Command to execute to load the DisableTurboBoost kernel extension.",
        "doc": "Command to execute to load the DisableTurboBoost kernel extension.\n\nNotes:\n * This command must execute with root privileges and either query the user for the credentials, or be configured (e.g. with sudo) to run without prompting.\n * The string \"%s\" in this variable gets replaced with the value of TurboBoost.kext_path. Default value: `\"/usr/bin/sudo /usr/bin/kextutil '%s'\"`",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "82",
        "name": "load_kext_cmd",
        "notes": [
          " * This command must execute with root privileges and either query the user for the credentials, or be configured (e.g. with sudo) to run without prompting.",
          " * The string \"%s\" in this variable gets replaced with the value of TurboBoost.kext_path. Default value: `\"/usr/bin/sudo /usr/bin/kextutil '%s'\"`"
        ],
        "signature": "TurboBoost.load_kext_cmd",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "37",
        "name": "logger",
        "signature": "TurboBoost.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.notify",
        "desc": "Boolean indicating whether notifications should be generated when Turbo Boost is enabled/disabled. Default value: `true`",
        "doc": "Boolean indicating whether notifications should be generated when Turbo Boost is enabled/disabled. Default value: `true`",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "108",
        "name": "notify",
        "signature": "TurboBoost.notify",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TurboBoost.reenable_on_stop",
        "desc": "Boolean to indicate whether Turbo Boost should be reenabled when",
        "doc": "Boolean to indicate whether Turbo Boost should be reenabled when\nthe Spoon stops. Default value: `true`.",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "51",
        "name": "reenable_on_stop",
        "signature": "TurboBoost.reenable_on_stop",
        "stripped_doc": "the Spoon stops. Default value: `true`.",
        "type": "Variable"
      },
      {
        "def": "TurboBoost:setState(state, notify)",
        "desc": "Sets whether Turbo Boost should be disabled (kernel extension loaded) or enabled (normal state, kernel extension not loaded).",
        "doc": "Sets whether Turbo Boost should be disabled (kernel extension loaded) or enabled (normal state, kernel extension not loaded).\n\nParameters:\n * state - A boolean, false if Turbo Boost should be disabled (load kernel extension), true if it should be enabled (unload kernel extension if loaded).\n * notify - Optional boolean indicating whether a notification should be produced. If not given, the value of TurboBoost.notify is used.\n\nReturns:\n * Boolean indicating new state",
        "examples": [],
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "129",
        "name": "setState",
        "notes": [],
        "parameters": [
          " * state - A boolean, false if Turbo Boost should be disabled (load kernel extension), true if it should be enabled (unload kernel extension if loaded).",
          " * notify - Optional boolean indicating whether a notification should be produced. If not given, the value of TurboBoost.notify is used."
        ],
        "returns": [
          " * Boolean indicating new state"
        ],
        "signature": "TurboBoost:setState(state, notify)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TurboBoost:start()",
        "desc": "Starts TurboBoost",
        "doc": "Starts TurboBoost\n\nParameters:\n * None\n\nReturns:\n * The TurboBoost object",
        "examples": [],
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "209",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The TurboBoost object"
        ],
        "signature": "TurboBoost:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TurboBoost:status()",
        "desc": "Check whether Turbo Boost is enabled",
        "doc": "Check whether Turbo Boost is enabled\n\nParameters:\n * None\n\nReturns:\n * true if TurboBoost is enabled (kernel ext not loaded), false otherwise.",
        "examples": [],
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "168",
        "name": "status",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * true if TurboBoost is enabled (kernel ext not loaded), false otherwise."
        ],
        "signature": "TurboBoost:status()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TurboBoost:stop()",
        "desc": "Stops TurboBoost",
        "doc": "Stops TurboBoost\n\nParameters:\n * None\n\nReturns:\n * The TurboBoost object",
        "examples": [],
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "230",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The TurboBoost object"
        ],
        "signature": "TurboBoost:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TurboBoost:toggle()",
        "desc": "Toggle TurboBoost status",
        "doc": "Toggle TurboBoost status\n\nParameters:\n * None\n\nReturns:\n * New TurboBoost status, after the toggle",
        "examples": [],
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "183",
        "name": "toggle",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * New TurboBoost status, after the toggle"
        ],
        "signature": "TurboBoost:toggle()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TurboBoost.unload_kext_cmd",
        "desc": "Command to execute to unload the DisableTurboBoost kernel extension.",
        "doc": "Command to execute to unload the DisableTurboBoost kernel extension.\n\nNotes:\n * This command must execute with root privileges and either query the user for the credentials, or be configured (e.g. with sudo) to run without prompting.\n * The string \"%s\" in this variable gets replaced with the value of TurboBoost.kext_path. Default value: `\"/usr/bin/sudo /sbin/kextunload '%s'\"`",
        "file": "Source/TurboBoost.spoon/init.lua",
        "lineno": "91",
        "name": "unload_kext_cmd",
        "notes": [
          " * This command must execute with root privileges and either query the user for the credentials, or be configured (e.g. with sudo) to run without prompting.",
          " * The string \"%s\" in this variable gets replaced with the value of TurboBoost.kext_path. Default value: `\"/usr/bin/sudo /sbin/kextunload '%s'\"`"
        ],
        "signature": "TurboBoost.unload_kext_cmd",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "TurboBoost",
    "stripped_doc": "from https://github.com/rugarciap/Turbo-Boost-Switcher.\n\nNote: this spoon by default uses sudo to load/unload the kernel\nextension, so for it to work from Hammerspoon, you need to\nconfigure sudo to be able to load/unload the extension without a\npassword, or configure the load_kext_cmd and unload_kext_cmd\nvariables to use some other mechanism that prompts you for the\ncredentials.\n\nFor example, the following configuration (stored in\n/etc/sudoers.d/turboboost) can be used to allow loading and\nunloading the module without a password:\n```\nCmnd_Alias    TURBO_OPS = /sbin/kextunload /Applications/Turbo Boost Switcher.app/Contents/Resources/DisableTurboBoost.64bits.kext, /usr/bin/kextutil /Applications/Turbo Boost Switcher.app/Contents/Resources/DisableTurboBoost.64bits.kext\n\n%admin ALL=(ALL) NOPASSWD: TURBO_OPS\n```\n\nIf you use this, please support the author of Turbo Boost Disabler\nby purchasing the Pro version of the app!\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TurboBoost.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TurboBoost.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "UniversalArchive:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for UniversalArchive",
        "doc": "Binds hotkeys for UniversalArchive\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.\n  * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations.",
        "examples": [],
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "183",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.\n   * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations."
        ],
        "returns": [],
        "signature": "UniversalArchive:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:evernoteArchive(where)",
        "desc": "Archive current note in Evernote.",
        "doc": "Archive current note in Evernote.\n\nParameters:\n * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`.",
        "examples": [],
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "61",
        "name": "evernoteArchive",
        "notes": [],
        "parameters": [
          " * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`."
        ],
        "returns": [],
        "signature": "UniversalArchive:evernoteArchive(where)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:mailArchive()",
        "desc": "Archive current message in Mail using the built-in Archive functionality",
        "doc": "Archive current message in Mail using the built-in Archive functionality\n\nParameters:\n * none",
        "examples": [],
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "85",
        "name": "mailArchive",
        "notes": [],
        "parameters": [
          " * none"
        ],
        "returns": [],
        "signature": "UniversalArchive:mailArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:outlookArchive()",
        "desc": "Archive current message in Outlook using one of two methods:",
        "doc": "Archive current message in Outlook using one of two methods:\n\nParameters:\n * none\n\nNotes:\n * If the \"Message -> Archive\" menu item exists, it is used (this has been added in recent versions of Outlook)\n * Otherwise, the message gets manually moved to the folder specified in `UniversalArchive.outlook_archive_folder`. The folder has to appear in the Message -> Move submenu for this to work. Since this submenu only lists the last few destination folders, you have to move a message by hand the first time (or periodically if you don't archive very often).",
        "examples": [],
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "121",
        "name": "outlookArchive",
        "notes": [
          " * If the \"Message -> Archive\" menu item exists, it is used (this has been added in recent versions of Outlook)",
          " * Otherwise, the message gets manually moved to the folder specified in `UniversalArchive.outlook_archive_folder`. The folder has to appear in the Message -> Move submenu for this to work. Since this submenu only lists the last few destination folders, you have to move a message by hand the first time (or periodically if you don't archive very often)."
        ],
        "parameters": [
          " * none"
        ],
        "returns": [],
        "signature": "UniversalArchive:outlookArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:registerApplication(appname, fn)",
        "desc": "Register a handler function for an application.",
        "doc": "Register a handler function for an application.\n\nParameters:\n * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.\n * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:\n   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.\n   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler.",
        "examples": [],
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "166",
        "name": "registerApplication",
        "notes": [],
        "parameters": [
          " * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.",
          " * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:\n   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.\n   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler."
        ],
        "returns": [],
        "signature": "UniversalArchive:registerApplication(appname, fn)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:sparkArchive()",
        "desc": "Archive current message in Spark using the built-in Archive functionality",
        "doc": "Archive current message in Spark using the built-in Archive functionality\n\nParameters:\n * none",
        "examples": [],
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "103",
        "name": "sparkArchive",
        "notes": [],
        "parameters": [
          " * none"
        ],
        "returns": [],
        "signature": "UniversalArchive:sparkArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:universalArchive(where)",
        "desc": "Main entry point for archiving an item.",
        "doc": "Main entry point for archiving an item.\n\nParameters:\n * None\n\nNotes:\n * If a handler function is defined for the current application, it is called with the `UniversalArchive` object as its first argument, and the archive destination (if provided) as the second.\n * Handlers must have a \"default destination\" that gets used when no destination is provided. Not all handlers support specifying a destination. New handlers can be registered using the `registerApplication()` method.",
        "examples": [],
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "143",
        "name": "universalArchive",
        "notes": [
          " * If a handler function is defined for the current application, it is called with the `UniversalArchive` object as its first argument, and the archive destination (if provided) as the second.",
          " * Handlers must have a \"default destination\" that gets used when no destination is provided. Not all handlers support specifying a destination. New handlers can be registered using the `registerApplication()` method."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "UniversalArchive:universalArchive(where)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "UniversalArchive.archive_notifications",
        "desc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "doc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "46",
        "name": "archive_notifications",
        "signature": "UniversalArchive.archive_notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.evernote_archive_notebook",
        "desc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "doc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "36",
        "name": "evernote_archive_notebook",
        "signature": "UniversalArchive.evernote_archive_notebook",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.evernote_delay_before_typing",
        "desc": "A short pause to make typing into Evernote more reliable",
        "doc": "A short pause to make typing into Evernote more reliable\n\nNotes:\n * In Evernote, archive is done by selectin \"Move note\" and then simulating typing of the notebook name. A short pause in between makes it more reliable for Evernote to recognize the notebook name correctly.\n * This variable controls how much to wait, in seconds.\n * Do not change this unless you know what you are doing",
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "51",
        "name": "evernote_delay_before_typing",
        "notes": [
          " * In Evernote, archive is done by selectin \"Move note\" and then simulating typing of the notebook name. A short pause in between makes it more reliable for Evernote to recognize the notebook name correctly.",
          " * This variable controls how much to wait, in seconds.",
          " * Do not change this unless you know what you are doing"
        ],
        "signature": "UniversalArchive.evernote_delay_before_typing",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "31",
        "name": "logger",
        "signature": "UniversalArchive.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.outlook_archive_folder",
        "desc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "doc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "41",
        "name": "outlook_archive_folder",
        "signature": "UniversalArchive.outlook_archive_folder",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Handle \"archive current item\" for multiple applications using the same hotkey",
    "doc": "Handle \"archive current item\" for multiple applications using the same hotkey\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip)\n\nUsing this Spoon enables you to use a single hotkey to archive an\nitem in multiple applications.  Out of the box the following\napplications are supported: Evernote, Mail, Spark and Outlook. You\ncan easily register handlers for new applications (or override the\nbuilt-in ones) using the `registerApplication()` method. If you\nwrite a new handler and feel others could benefit from it, please\nsubmit a pull request!\n\nHandlers can also provide support for archiving to multiple\nlocations, and you can bind different hotkeys for each\ndestination. At the moment only Evernote supports this. See the\ndocumentation for `bindHotkeys()` for the details on how to\nspecify multiple-destination filing hotkeys.",
    "items": [
      {
        "def": "UniversalArchive.archive_notifications",
        "desc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "doc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "46",
        "name": "archive_notifications",
        "signature": "UniversalArchive.archive_notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for UniversalArchive",
        "doc": "Binds hotkeys for UniversalArchive\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.\n  * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations.",
        "examples": [],
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "183",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:\n   * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.\n   * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations."
        ],
        "returns": [],
        "signature": "UniversalArchive:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive.evernote_archive_notebook",
        "desc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "doc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "36",
        "name": "evernote_archive_notebook",
        "signature": "UniversalArchive.evernote_archive_notebook",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.evernote_delay_before_typing",
        "desc": "A short pause to make typing into Evernote more reliable",
        "doc": "A short pause to make typing into Evernote more reliable\n\nNotes:\n * In Evernote, archive is done by selectin \"Move note\" and then simulating typing of the notebook name. A short pause in between makes it more reliable for Evernote to recognize the notebook name correctly.\n * This variable controls how much to wait, in seconds.\n * Do not change this unless you know what you are doing",
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "51",
        "name": "evernote_delay_before_typing",
        "notes": [
          " * In Evernote, archive is done by selectin \"Move note\" and then simulating typing of the notebook name. A short pause in between makes it more reliable for Evernote to recognize the notebook name correctly.",
          " * This variable controls how much to wait, in seconds.",
          " * Do not change this unless you know what you are doing"
        ],
        "signature": "UniversalArchive.evernote_delay_before_typing",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:evernoteArchive(where)",
        "desc": "Archive current note in Evernote.",
        "doc": "Archive current note in Evernote.\n\nParameters:\n * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`.",
        "examples": [],
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "61",
        "name": "evernoteArchive",
        "notes": [],
        "parameters": [
          " * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`."
        ],
        "returns": [],
        "signature": "UniversalArchive:evernoteArchive(where)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "31",
        "name": "logger",
        "signature": "UniversalArchive.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:mailArchive()",
        "desc": "Archive current message in Mail using the built-in Archive functionality",
        "doc": "Archive current message in Mail using the built-in Archive functionality\n\nParameters:\n * none",
        "examples": [],
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "85",
        "name": "mailArchive",
        "notes": [],
        "parameters": [
          " * none"
        ],
        "returns": [],
        "signature": "UniversalArchive:mailArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive.outlook_archive_folder",
        "desc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "doc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "41",
        "name": "outlook_archive_folder",
        "signature": "UniversalArchive.outlook_archive_folder",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:outlookArchive()",
        "desc": "Archive current message in Outlook using one of two methods:",
        "doc": "Archive current message in Outlook using one of two methods:\n\nParameters:\n * none\n\nNotes:\n * If the \"Message -> Archive\" menu item exists, it is used (this has been added in recent versions of Outlook)\n * Otherwise, the message gets manually moved to the folder specified in `UniversalArchive.outlook_archive_folder`. The folder has to appear in the Message -> Move submenu for this to work. Since this submenu only lists the last few destination folders, you have to move a message by hand the first time (or periodically if you don't archive very often).",
        "examples": [],
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "121",
        "name": "outlookArchive",
        "notes": [
          " * If the \"Message -> Archive\" menu item exists, it is used (this has been added in recent versions of Outlook)",
          " * Otherwise, the message gets manually moved to the folder specified in `UniversalArchive.outlook_archive_folder`. The folder has to appear in the Message -> Move submenu for this to work. Since this submenu only lists the last few destination folders, you have to move a message by hand the first time (or periodically if you don't archive very often)."
        ],
        "parameters": [
          " * none"
        ],
        "returns": [],
        "signature": "UniversalArchive:outlookArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:registerApplication(appname, fn)",
        "desc": "Register a handler function for an application.",
        "doc": "Register a handler function for an application.\n\nParameters:\n * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.\n * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:\n   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.\n   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler.",
        "examples": [],
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "166",
        "name": "registerApplication",
        "notes": [],
        "parameters": [
          " * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.",
          " * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:\n   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.\n   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler."
        ],
        "returns": [],
        "signature": "UniversalArchive:registerApplication(appname, fn)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:sparkArchive()",
        "desc": "Archive current message in Spark using the built-in Archive functionality",
        "doc": "Archive current message in Spark using the built-in Archive functionality\n\nParameters:\n * none",
        "examples": [],
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "103",
        "name": "sparkArchive",
        "notes": [],
        "parameters": [
          " * none"
        ],
        "returns": [],
        "signature": "UniversalArchive:sparkArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:universalArchive(where)",
        "desc": "Main entry point for archiving an item.",
        "doc": "Main entry point for archiving an item.\n\nParameters:\n * None\n\nNotes:\n * If a handler function is defined for the current application, it is called with the `UniversalArchive` object as its first argument, and the archive destination (if provided) as the second.\n * Handlers must have a \"default destination\" that gets used when no destination is provided. Not all handlers support specifying a destination. New handlers can be registered using the `registerApplication()` method.",
        "examples": [],
        "file": "Source/UniversalArchive.spoon/init.lua",
        "lineno": "143",
        "name": "universalArchive",
        "notes": [
          " * If a handler function is defined for the current application, it is called with the `UniversalArchive` object as its first argument, and the archive destination (if provided) as the second.",
          " * Handlers must have a \"default destination\" that gets used when no destination is provided. Not all handlers support specifying a destination. New handlers can be registered using the `registerApplication()` method."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "UniversalArchive:universalArchive(where)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "UniversalArchive",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip)\n\nUsing this Spoon enables you to use a single hotkey to archive an\nitem in multiple applications.  Out of the box the following\napplications are supported: Evernote, Mail, Spark and Outlook. You\ncan easily register handlers for new applications (or override the\nbuilt-in ones) using the `registerApplication()` method. If you\nwrite a new handler and feel others could benefit from it, please\nsubmit a pull request!\n\nHandlers can also provide support for archiving to multiple\nlocations, and you can bind different hotkeys for each\ndestination. At the moment only Evernote supports this. See the\ndocumentation for `bindHotkeys()` for the details on how to\nspecify multiple-destination filing hotkeys.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "Automatically sets a random Unsplash image as your wallpaper daily.",
    "doc": "Automatically sets a random Unsplash image as your wallpaper daily.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UnsplashRandom.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UnsplashRandom.spoon.zip)",
    "items": [],
    "name": "UnsplashRandom",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UnsplashRandom.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UnsplashRandom.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "Use unsplash images as wallpaper",
    "doc": "Use unsplash images as wallpaper\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UnsplashZ.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UnsplashZ.spoon.zip)",
    "items": [],
    "name": "UnsplashZ",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UnsplashZ.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UnsplashZ.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl, senderPid)",
        "desc": "Dispatch a URL to an application according to the defined `url_patterns`.",
        "doc": "Dispatch a URL to an application according to the defined `url_patterns`.\n\nParameters:\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL. This is the only parameter used in this implementation.\n * senderPID - An integer containing the PID of the application that opened the URL, if available (otherwise -1)\n\nNotes:\n * The parameters (follow to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification)",
        "examples": [],
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "188",
        "name": "dispatchURL",
        "notes": [
          " * The parameters (follow to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification)"
        ],
        "parameters": [
          " * scheme - A string containing the URL scheme (i.e. \"http\")",
          " * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")",
          " * params - A table containing the key/value pairs of all the URL parameters",
          " * fullURL - A string containing the full, original URL. This is the only parameter used in this implementation.",
          " * senderPID - An integer containing the PID of the application that opened the URL, if available (otherwise -1)"
        ],
        "returns": [],
        "signature": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl, senderPid)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "URLDispatcher:start()",
        "desc": "Start dispatching URLs according to the rules",
        "doc": "Start dispatching URLs according to the rules\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "312",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "URLDispatcher:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "URLDispatcher.decode_slack_redir_urls",
        "desc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "doc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "30",
        "name": "decode_slack_redir_urls",
        "signature": "URLDispatcher.decode_slack_redir_urls",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.default_handler",
        "desc": "Default URL handler (Defaults to `\"com.apple.Safari\"`)",
        "doc": "Default URL handler (Defaults to `\"com.apple.Safari\"`)\n\nNotes:\nCan be a string containing the Bundle ID of an application, or a function\nthat takes one argument, and which will be invoked with the URL to open.",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "21",
        "name": "default_handler",
        "notes": [
          "Can be a string containing the Bundle ID of an application, or a function",
          "that takes one argument, and which will be invoked with the URL to open."
        ],
        "signature": "URLDispatcher.default_handler",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.\n\nNotes:\nExample: `spoon.URLDispatcher.logger.setLogLevel(\"debug\")`",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "99",
        "name": "logger",
        "notes": [
          "Example: `spoon.URLDispatcher.logger.setLogLevel(\"debug\")`"
        ],
        "signature": "URLDispatcher.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.pat_files",
        "desc": "Internal variable containing a table where the pattern lists read from files are kept indexed by file name, and automatically updated.",
        "doc": "Internal variable containing a table where the pattern lists read from files are kept indexed by file name, and automatically updated.",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "114",
        "name": "pat_files",
        "signature": "URLDispatcher.pat_files",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.pat_watchers",
        "desc": "Internal variable containing a table where the watchers for the pattern files are kept indexed by file name.",
        "doc": "Internal variable containing a table where the watchers for the pattern files are kept indexed by file name.",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "119",
        "name": "pat_watchers",
        "signature": "URLDispatcher.pat_watchers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.set_system_handler",
        "desc": "If true, URLDispatcher sets itself as system handler for http requests.",
        "doc": "If true, URLDispatcher sets itself as system handler for http requests.\nDefaults to `true`",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "108",
        "name": "set_system_handler",
        "signature": "URLDispatcher.set_system_handler",
        "stripped_doc": "Defaults to `true`",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.url_patterns",
        "desc": "URL dispatch rules.",
        "doc": "URL dispatch rules.\n\nNotes:\n A table containing a list of dispatch rules. Rules are evaluated in the\n order they are declared. Each rule is a table with the following structure:\n `{ url-patterns, app-bundle-ID-or-function, function, app-patterns }`\n * `url-patterns` can be: (a) a single pattern as a string, (b) a table\n   containing a list of strings, or (c) a string containing the path of a\n   file from which the patterns will be read (if the string contains a valid\n   filename it's used as a file, otherwise as a pattern). In case (c), a\n   watcher will be set to automatically re-read the contents of the file\n   when it changes. If a relative path is given (not starting with a \"/\"),\n   then it is considered to be relative to the Hammerspoon configuration\n   directory.\n * If `app-bundle-ID-or-function` is specified as a string, it is\n   interpreted as a macOS application ID, and that application will be used\n   to open matching URLs. If it is a function pointer, or not given but\n   \"function\" is provided, it is expected to be a function that accepts a\n   single argument, and it will be called with the URL.\n * If `app-patterns` is given, it should be a string or a table containing a\n   pattern/list of patterns, and the rule will only be evaluated if the URL\n   was opened from an application whose name matches one of those patterns.\n * Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html)\n   and not regular expressions.\n * Defaults to an empty table, which has the effect of having all URLs\n   dispatched to the `default_handler`.",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "69",
        "name": "url_patterns",
        "notes": [
          " A table containing a list of dispatch rules. Rules are evaluated in the",
          " order they are declared. Each rule is a table with the following structure:",
          " `{ url-patterns, app-bundle-ID-or-function, function, app-patterns }`",
          " * `url-patterns` can be: (a) a single pattern as a string, (b) a table",
          "   containing a list of strings, or (c) a string containing the path of a",
          "   file from which the patterns will be read (if the string contains a valid",
          "   filename it's used as a file, otherwise as a pattern). In case (c), a",
          "   watcher will be set to automatically re-read the contents of the file",
          "   when it changes. If a relative path is given (not starting with a \"/\"),",
          "   then it is considered to be relative to the Hammerspoon configuration",
          "   directory.",
          " * If `app-bundle-ID-or-function` is specified as a string, it is",
          "   interpreted as a macOS application ID, and that application will be used",
          "   to open matching URLs. If it is a function pointer, or not given but",
          "   \"function\" is provided, it is expected to be a function that accepts a",
          "   single argument, and it will be called with the URL.",
          " * If `app-patterns` is given, it should be a string or a table containing a",
          "   pattern/list of patterns, and the rule will only be evaluated if the URL",
          "   was opened from an application whose name matches one of those patterns.",
          " * Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html)",
          "   and not regular expressions.",
          " * Defaults to an empty table, which has the effect of having all URLs",
          "   dispatched to the `default_handler`."
        ],
        "signature": "URLDispatcher.url_patterns",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.url_redir_decoders",
        "desc": "URL redirection decoders. Default value: empty list",
        "doc": "URL redirection decoders. Default value: empty list\n\nNotes:\nList containing optional redirection decoders (other than the known Slack\ndecoder, which is enabled by `URLDispatcher.decode_slack_redir_urls` to\napply to URLs before dispatching them. Each list element must be a list\nitself with a maximum of five elements:\n  * `decoder-name`: (String) a name to identify the decoder;\n  * `decoder-pattern-or-function`: (String or Function) if a string is\n    given, it is used as a [Lua pattern](https://www.lua.org/pil/20.2.html)\n    to match against the URL. If a function is given, it will be called with\n    arguments `scheme`, `host`, `params`, `fullUrl`, `senderPid` (the same\n    arguments as passed to\n    [hs.urlevent.httpCallback](https://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback)),\n    and must return a string that contains the URL to be opened. The\n    returned value will be URL-decoded according to the value of `skip-decode-url` (below).\n  * `pattern-replacement`: (String) a replacement pattern to apply if a\n    match is found when a decoder pattern (previous argument) is provided.\n    If a decoder function is given, this argument is ignored.\n  * `skip-decode-url`: (Boolean, optional) whether to skip URL-decoding of the\n    resulting string (defaults to `false`, by default URLs are always decoded)\n  * `source-application`: (String or Table, optional): a pattern or list of\n    patterns to match against the name of the application from which the URL\n    was opened. If this parameter is present, the decoder will only be\n    applied when the application matches. Default is to apply the decoder\n    regardless of the application.\nIf given as strings, `decoder-pattern-or-function` and `pattern-replacement`\nare passed as arguments to\n[string.gsub](https://www.lua.org/manual/5.3/manual.html#pdf-string.gsub)\napplied on the original URL.",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "35",
        "name": "url_redir_decoders",
        "notes": [
          "List containing optional redirection decoders (other than the known Slack",
          "decoder, which is enabled by `URLDispatcher.decode_slack_redir_urls` to",
          "apply to URLs before dispatching them. Each list element must be a list",
          "itself with a maximum of five elements:",
          "  * `decoder-name`: (String) a name to identify the decoder;",
          "  * `decoder-pattern-or-function`: (String or Function) if a string is",
          "    given, it is used as a [Lua pattern](https://www.lua.org/pil/20.2.html)",
          "    to match against the URL. If a function is given, it will be called with",
          "    arguments `scheme`, `host`, `params`, `fullUrl`, `senderPid` (the same",
          "    arguments as passed to",
          "    [hs.urlevent.httpCallback](https://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback)),",
          "    and must return a string that contains the URL to be opened. The",
          "    returned value will be URL-decoded according to the value of `skip-decode-url` (below).",
          "  * `pattern-replacement`: (String) a replacement pattern to apply if a",
          "    match is found when a decoder pattern (previous argument) is provided.",
          "    If a decoder function is given, this argument is ignored.",
          "  * `skip-decode-url`: (Boolean, optional) whether to skip URL-decoding of the",
          "    resulting string (defaults to `false`, by default URLs are always decoded)",
          "  * `source-application`: (String or Table, optional): a pattern or list of",
          "    patterns to match against the name of the application from which the URL",
          "    was opened. If this parameter is present, the decoder will only be",
          "    applied when the application matches. Default is to apply the decoder",
          "    regardless of the application.",
          "If given as strings, `decoder-pattern-or-function` and `pattern-replacement`",
          "are passed as arguments to",
          "[string.gsub](https://www.lua.org/manual/5.3/manual.html#pdf-string.gsub)",
          "applied on the original URL."
        ],
        "signature": "URLDispatcher.url_redir_decoders",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Route URLs to different applications with pattern matching",
    "doc": "Route URLs to different applications with pattern matching\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip)\n\nSets Hammerspoon as the default browser for HTTP/HTTPS links, and\ndispatches them to different apps according to the patterns defined\nin the config. If no pattern matches, `default_handler` is used.",
    "items": [
      {
        "def": "URLDispatcher.decode_slack_redir_urls",
        "desc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "doc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "30",
        "name": "decode_slack_redir_urls",
        "signature": "URLDispatcher.decode_slack_redir_urls",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.default_handler",
        "desc": "Default URL handler (Defaults to `\"com.apple.Safari\"`)",
        "doc": "Default URL handler (Defaults to `\"com.apple.Safari\"`)\n\nNotes:\nCan be a string containing the Bundle ID of an application, or a function\nthat takes one argument, and which will be invoked with the URL to open.",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "21",
        "name": "default_handler",
        "notes": [
          "Can be a string containing the Bundle ID of an application, or a function",
          "that takes one argument, and which will be invoked with the URL to open."
        ],
        "signature": "URLDispatcher.default_handler",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl, senderPid)",
        "desc": "Dispatch a URL to an application according to the defined `url_patterns`.",
        "doc": "Dispatch a URL to an application according to the defined `url_patterns`.\n\nParameters:\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL. This is the only parameter used in this implementation.\n * senderPID - An integer containing the PID of the application that opened the URL, if available (otherwise -1)\n\nNotes:\n * The parameters (follow to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification)",
        "examples": [],
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "188",
        "name": "dispatchURL",
        "notes": [
          " * The parameters (follow to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification)"
        ],
        "parameters": [
          " * scheme - A string containing the URL scheme (i.e. \"http\")",
          " * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")",
          " * params - A table containing the key/value pairs of all the URL parameters",
          " * fullURL - A string containing the full, original URL. This is the only parameter used in this implementation.",
          " * senderPID - An integer containing the PID of the application that opened the URL, if available (otherwise -1)"
        ],
        "returns": [],
        "signature": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl, senderPid)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "URLDispatcher.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.\n\nNotes:\nExample: `spoon.URLDispatcher.logger.setLogLevel(\"debug\")`",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "99",
        "name": "logger",
        "notes": [
          "Example: `spoon.URLDispatcher.logger.setLogLevel(\"debug\")`"
        ],
        "signature": "URLDispatcher.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.pat_files",
        "desc": "Internal variable containing a table where the pattern lists read from files are kept indexed by file name, and automatically updated.",
        "doc": "Internal variable containing a table where the pattern lists read from files are kept indexed by file name, and automatically updated.",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "114",
        "name": "pat_files",
        "signature": "URLDispatcher.pat_files",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.pat_watchers",
        "desc": "Internal variable containing a table where the watchers for the pattern files are kept indexed by file name.",
        "doc": "Internal variable containing a table where the watchers for the pattern files are kept indexed by file name.",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "119",
        "name": "pat_watchers",
        "signature": "URLDispatcher.pat_watchers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.set_system_handler",
        "desc": "If true, URLDispatcher sets itself as system handler for http requests.",
        "doc": "If true, URLDispatcher sets itself as system handler for http requests.\nDefaults to `true`",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "108",
        "name": "set_system_handler",
        "signature": "URLDispatcher.set_system_handler",
        "stripped_doc": "Defaults to `true`",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher:start()",
        "desc": "Start dispatching URLs according to the rules",
        "doc": "Start dispatching URLs according to the rules\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "312",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "URLDispatcher:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "URLDispatcher.url_patterns",
        "desc": "URL dispatch rules.",
        "doc": "URL dispatch rules.\n\nNotes:\n A table containing a list of dispatch rules. Rules are evaluated in the\n order they are declared. Each rule is a table with the following structure:\n `{ url-patterns, app-bundle-ID-or-function, function, app-patterns }`\n * `url-patterns` can be: (a) a single pattern as a string, (b) a table\n   containing a list of strings, or (c) a string containing the path of a\n   file from which the patterns will be read (if the string contains a valid\n   filename it's used as a file, otherwise as a pattern). In case (c), a\n   watcher will be set to automatically re-read the contents of the file\n   when it changes. If a relative path is given (not starting with a \"/\"),\n   then it is considered to be relative to the Hammerspoon configuration\n   directory.\n * If `app-bundle-ID-or-function` is specified as a string, it is\n   interpreted as a macOS application ID, and that application will be used\n   to open matching URLs. If it is a function pointer, or not given but\n   \"function\" is provided, it is expected to be a function that accepts a\n   single argument, and it will be called with the URL.\n * If `app-patterns` is given, it should be a string or a table containing a\n   pattern/list of patterns, and the rule will only be evaluated if the URL\n   was opened from an application whose name matches one of those patterns.\n * Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html)\n   and not regular expressions.\n * Defaults to an empty table, which has the effect of having all URLs\n   dispatched to the `default_handler`.",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "69",
        "name": "url_patterns",
        "notes": [
          " A table containing a list of dispatch rules. Rules are evaluated in the",
          " order they are declared. Each rule is a table with the following structure:",
          " `{ url-patterns, app-bundle-ID-or-function, function, app-patterns }`",
          " * `url-patterns` can be: (a) a single pattern as a string, (b) a table",
          "   containing a list of strings, or (c) a string containing the path of a",
          "   file from which the patterns will be read (if the string contains a valid",
          "   filename it's used as a file, otherwise as a pattern). In case (c), a",
          "   watcher will be set to automatically re-read the contents of the file",
          "   when it changes. If a relative path is given (not starting with a \"/\"),",
          "   then it is considered to be relative to the Hammerspoon configuration",
          "   directory.",
          " * If `app-bundle-ID-or-function` is specified as a string, it is",
          "   interpreted as a macOS application ID, and that application will be used",
          "   to open matching URLs. If it is a function pointer, or not given but",
          "   \"function\" is provided, it is expected to be a function that accepts a",
          "   single argument, and it will be called with the URL.",
          " * If `app-patterns` is given, it should be a string or a table containing a",
          "   pattern/list of patterns, and the rule will only be evaluated if the URL",
          "   was opened from an application whose name matches one of those patterns.",
          " * Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html)",
          "   and not regular expressions.",
          " * Defaults to an empty table, which has the effect of having all URLs",
          "   dispatched to the `default_handler`."
        ],
        "signature": "URLDispatcher.url_patterns",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.url_redir_decoders",
        "desc": "URL redirection decoders. Default value: empty list",
        "doc": "URL redirection decoders. Default value: empty list\n\nNotes:\nList containing optional redirection decoders (other than the known Slack\ndecoder, which is enabled by `URLDispatcher.decode_slack_redir_urls` to\napply to URLs before dispatching them. Each list element must be a list\nitself with a maximum of five elements:\n  * `decoder-name`: (String) a name to identify the decoder;\n  * `decoder-pattern-or-function`: (String or Function) if a string is\n    given, it is used as a [Lua pattern](https://www.lua.org/pil/20.2.html)\n    to match against the URL. If a function is given, it will be called with\n    arguments `scheme`, `host`, `params`, `fullUrl`, `senderPid` (the same\n    arguments as passed to\n    [hs.urlevent.httpCallback](https://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback)),\n    and must return a string that contains the URL to be opened. The\n    returned value will be URL-decoded according to the value of `skip-decode-url` (below).\n  * `pattern-replacement`: (String) a replacement pattern to apply if a\n    match is found when a decoder pattern (previous argument) is provided.\n    If a decoder function is given, this argument is ignored.\n  * `skip-decode-url`: (Boolean, optional) whether to skip URL-decoding of the\n    resulting string (defaults to `false`, by default URLs are always decoded)\n  * `source-application`: (String or Table, optional): a pattern or list of\n    patterns to match against the name of the application from which the URL\n    was opened. If this parameter is present, the decoder will only be\n    applied when the application matches. Default is to apply the decoder\n    regardless of the application.\nIf given as strings, `decoder-pattern-or-function` and `pattern-replacement`\nare passed as arguments to\n[string.gsub](https://www.lua.org/manual/5.3/manual.html#pdf-string.gsub)\napplied on the original URL.",
        "file": "Source/URLDispatcher.spoon/init.lua",
        "lineno": "35",
        "name": "url_redir_decoders",
        "notes": [
          "List containing optional redirection decoders (other than the known Slack",
          "decoder, which is enabled by `URLDispatcher.decode_slack_redir_urls` to",
          "apply to URLs before dispatching them. Each list element must be a list",
          "itself with a maximum of five elements:",
          "  * `decoder-name`: (String) a name to identify the decoder;",
          "  * `decoder-pattern-or-function`: (String or Function) if a string is",
          "    given, it is used as a [Lua pattern](https://www.lua.org/pil/20.2.html)",
          "    to match against the URL. If a function is given, it will be called with",
          "    arguments `scheme`, `host`, `params`, `fullUrl`, `senderPid` (the same",
          "    arguments as passed to",
          "    [hs.urlevent.httpCallback](https://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback)),",
          "    and must return a string that contains the URL to be opened. The",
          "    returned value will be URL-decoded according to the value of `skip-decode-url` (below).",
          "  * `pattern-replacement`: (String) a replacement pattern to apply if a",
          "    match is found when a decoder pattern (previous argument) is provided.",
          "    If a decoder function is given, this argument is ignored.",
          "  * `skip-decode-url`: (Boolean, optional) whether to skip URL-decoding of the",
          "    resulting string (defaults to `false`, by default URLs are always decoded)",
          "  * `source-application`: (String or Table, optional): a pattern or list of",
          "    patterns to match against the name of the application from which the URL",
          "    was opened. If this parameter is present, the decoder will only be",
          "    applied when the application matches. Default is to apply the decoder",
          "    regardless of the application.",
          "If given as strings, `decoder-pattern-or-function` and `pattern-replacement`",
          "are passed as arguments to",
          "[string.gsub](https://www.lua.org/manual/5.3/manual.html#pdf-string.gsub)",
          "applied on the original URL."
        ],
        "signature": "URLDispatcher.url_redir_decoders",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "URLDispatcher",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip)\n\nSets Hammerspoon as the default browser for HTTP/HTTPS links, and\ndispatches them to different apps according to the patterns defined\nin the config. If no pattern matches, `default_handler` is used.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "USBDeviceActions:init() -> Self",
        "desc": "Creates an `hs.usb.watcher` with a callback that will execute the specified actions for the USB devices in `USBDeviceActions.devices` when they are connected/disconnected, but doesn't start the watcher.",
        "doc": "Creates an `hs.usb.watcher` with a callback that will execute the specified actions for the USB devices in `USBDeviceActions.devices` when they are connected/disconnected, but doesn't start the watcher.\n\nParameters:\n * None\n\nReturns:\n * Self",
        "examples": [],
        "file": "Source/USBDeviceActions.spoon/init.lua",
        "lineno": "103",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "USBDeviceActions:init() -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "USBDeviceActions:start() -> Self",
        "desc": "Starts the `hs.usb.watcher` created by `USBDeviceActions:init()`.",
        "doc": "Starts the `hs.usb.watcher` created by `USBDeviceActions:init()`.\n\nParameters:\n * None\n\nReturns:\n * Self",
        "examples": [],
        "file": "Source/USBDeviceActions.spoon/init.lua",
        "lineno": "118",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "USBDeviceActions:start() -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "USBDeviceActions:stop() -> Self",
        "desc": "Stops the `hs.usb.watcher` created by `USBDeviceActions:init()`.",
        "doc": "Stops the `hs.usb.watcher` created by `USBDeviceActions:init()`.\n\nParameters:\n * None\n\nReturns:\n * Self",
        "examples": [],
        "file": "Source/USBDeviceActions.spoon/init.lua",
        "lineno": "132",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "USBDeviceActions:stop() -> Self",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "USBDeviceActions.devices (Table)",
        "desc": "A table where the keys should correspond to `productName`s of USB devices and the values should be tables containing the keys `apps` and/or `fn`. (You can find the `productName` for a connected USB device using `hs.usb.attachedDevices()`).",
        "doc": "A table where the keys should correspond to `productName`s of USB devices and the values should be tables containing the keys `apps` and/or `fn`. (You can find the `productName` for a connected USB device using `hs.usb.attachedDevices()`).\n\nNotes:\n * The value of the `apps` key should contain a list of apps that will be launched/killed when the USB device is connected/disconnected. The value of the `fn` key should be a single parameter function that will be passed `true`/`false` when the USB device is connected/disconnected.\nExample:\n```\n{\n  ScanSnapiX500EE            = { apps = { \"ScanSnap Manager Evernote Edition\" } },\n  Planck                     = { fn = toggleKeyboardLayout },\n  [\"Corne Keyboard (crkbd)\"] = { fn = toggleKeyboardLayout }\n}\n```",
        "file": "Source/USBDeviceActions.spoon/init.lua",
        "lineno": "87",
        "name": "devices",
        "notes": [
          " * The value of the `apps` key should contain a list of apps that will be launched/killed when the USB device is connected/disconnected. The value of the `fn` key should be a single parameter function that will be passed `true`/`false` when the USB device is connected/disconnected.",
          "Example:",
          "```",
          "{",
          "  ScanSnapiX500EE            = { apps = { \"ScanSnap Manager Evernote Edition\" } },",
          "  Planck                     = { fn = toggleKeyboardLayout },",
          "  [\"Corne Keyboard (crkbd)\"] = { fn = toggleKeyboardLayout }",
          "}",
          "```"
        ],
        "signature": "USBDeviceActions.devices (Table)",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Open/close apps or run an arbitrary function when a USB device is connected/disconnected.",
    "doc": "Open/close apps or run an arbitrary function when a USB device is connected/disconnected.\n\nExample configuration (using SpoonInstall.spoon):\n```\nfunction toggleKeyboardLayout(x)\n  if x then\n    hs.keycodes.setLayout(\"U.S.\")\n  else\n    hs.keycodes.setLayout(\"Colemak\")\n  end\nend\n\nspoonInstall:andUse(\n  \"USBDeviceActions\",\n  {\n    config = {\n      devices = {\n        ScanSnapiX500EE            = { apps = { \"ScanSnap Manager Evernote Edition\" } },\n        Planck                     = { fn = toggleKeyboardLayout },\n        [\"Corne Keyboard (crkbd)\"] = { fn = toggleKeyboardLayout }\n      }\n    },\n    start = true\n  }\n)\n```",
    "items": [
      {
        "def": "USBDeviceActions.devices (Table)",
        "desc": "A table where the keys should correspond to `productName`s of USB devices and the values should be tables containing the keys `apps` and/or `fn`. (You can find the `productName` for a connected USB device using `hs.usb.attachedDevices()`).",
        "doc": "A table where the keys should correspond to `productName`s of USB devices and the values should be tables containing the keys `apps` and/or `fn`. (You can find the `productName` for a connected USB device using `hs.usb.attachedDevices()`).\n\nNotes:\n * The value of the `apps` key should contain a list of apps that will be launched/killed when the USB device is connected/disconnected. The value of the `fn` key should be a single parameter function that will be passed `true`/`false` when the USB device is connected/disconnected.\nExample:\n```\n{\n  ScanSnapiX500EE            = { apps = { \"ScanSnap Manager Evernote Edition\" } },\n  Planck                     = { fn = toggleKeyboardLayout },\n  [\"Corne Keyboard (crkbd)\"] = { fn = toggleKeyboardLayout }\n}\n```",
        "file": "Source/USBDeviceActions.spoon/init.lua",
        "lineno": "87",
        "name": "devices",
        "notes": [
          " * The value of the `apps` key should contain a list of apps that will be launched/killed when the USB device is connected/disconnected. The value of the `fn` key should be a single parameter function that will be passed `true`/`false` when the USB device is connected/disconnected.",
          "Example:",
          "```",
          "{",
          "  ScanSnapiX500EE            = { apps = { \"ScanSnap Manager Evernote Edition\" } },",
          "  Planck                     = { fn = toggleKeyboardLayout },",
          "  [\"Corne Keyboard (crkbd)\"] = { fn = toggleKeyboardLayout }",
          "}",
          "```"
        ],
        "signature": "USBDeviceActions.devices (Table)",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "USBDeviceActions:init() -> Self",
        "desc": "Creates an `hs.usb.watcher` with a callback that will execute the specified actions for the USB devices in `USBDeviceActions.devices` when they are connected/disconnected, but doesn't start the watcher.",
        "doc": "Creates an `hs.usb.watcher` with a callback that will execute the specified actions for the USB devices in `USBDeviceActions.devices` when they are connected/disconnected, but doesn't start the watcher.\n\nParameters:\n * None\n\nReturns:\n * Self",
        "examples": [],
        "file": "Source/USBDeviceActions.spoon/init.lua",
        "lineno": "103",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "USBDeviceActions:init() -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "USBDeviceActions:start() -> Self",
        "desc": "Starts the `hs.usb.watcher` created by `USBDeviceActions:init()`.",
        "doc": "Starts the `hs.usb.watcher` created by `USBDeviceActions:init()`.\n\nParameters:\n * None\n\nReturns:\n * Self",
        "examples": [],
        "file": "Source/USBDeviceActions.spoon/init.lua",
        "lineno": "118",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "USBDeviceActions:start() -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "USBDeviceActions:stop() -> Self",
        "desc": "Stops the `hs.usb.watcher` created by `USBDeviceActions:init()`.",
        "doc": "Stops the `hs.usb.watcher` created by `USBDeviceActions:init()`.\n\nParameters:\n * None\n\nReturns:\n * Self",
        "examples": [],
        "file": "Source/USBDeviceActions.spoon/init.lua",
        "lineno": "132",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "USBDeviceActions:stop() -> Self",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "USBDeviceActions",
    "stripped_doc": "\nExample configuration (using SpoonInstall.spoon):\n```\nfunction toggleKeyboardLayout(x)\n  if x then\n    hs.keycodes.setLayout(\"U.S.\")\n  else\n    hs.keycodes.setLayout(\"Colemak\")\n  end\nend\n\nspoonInstall:andUse(\n  \"USBDeviceActions\",\n  {\n    config = {\n      devices = {\n        ScanSnapiX500EE            = { apps = { \"ScanSnap Manager Evernote Edition\" } },\n        Planck                     = { fn = toggleKeyboardLayout },\n        [\"Corne Keyboard (crkbd)\"] = { fn = toggleKeyboardLayout }\n      }\n    },\n    start = true\n  }\n)\n```",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "VolumeScroll:init()",
        "desc": "Initialize spoon",
        "doc": "Initialize spoon\n\nParameters:\n * None\n\nReturns:\n * void",
        "examples": [],
        "file": "Source/VolumeScroll.spoon/init.lua",
        "lineno": "19",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * void"
        ],
        "signature": "VolumeScroll:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "VolumeScroll:sameMods()",
        "desc": "Determine if a table of modifiers are the same modifiers passed into :start()",
        "doc": "Determine if a table of modifiers are the same modifiers passed into :start()\n\nParameters:\n * mods - a table of modifiers\n\nReturns:\n * boolean - true if mods are same, false otherwise",
        "examples": [],
        "file": "Source/VolumeScroll.spoon/init.lua",
        "lineno": "83",
        "name": "sameMods",
        "notes": [],
        "parameters": [
          " * mods - a table of modifiers"
        ],
        "returns": [
          " * boolean - true if mods are same, false otherwise"
        ],
        "signature": "VolumeScroll:sameMods()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "VolumeScroll:start()",
        "desc": "Start event watcher.",
        "doc": "Start event watcher.\n\nParameters:\n * mods - a table containing the modifiers to bind in scrolling\n\nReturns:\n * void",
        "examples": [],
        "file": "Source/VolumeScroll.spoon/init.lua",
        "lineno": "33",
        "name": "start",
        "notes": [],
        "parameters": [
          " * mods - a table containing the modifiers to bind in scrolling"
        ],
        "returns": [
          " * void"
        ],
        "signature": "VolumeScroll:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "VolumeScroll:stop()",
        "desc": "Stop the scroll watcher",
        "doc": "Stop the scroll watcher\n\nParameters:\n * None\n\nReturns:\n * void",
        "examples": [],
        "file": "Source/VolumeScroll.spoon/init.lua",
        "lineno": "70",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * void"
        ],
        "signature": "VolumeScroll:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "VolumeScroll:tableLength(T)",
        "desc": "Determine the number of items in a table",
        "doc": "Determine the number of items in a table\n\nParameters:\n * T - a table\n\nReturns:\n * number or boolean - the number of items in the table, false if T is not a table",
        "examples": [],
        "file": "Source/VolumeScroll.spoon/init.lua",
        "lineno": "107",
        "name": "tableLength",
        "notes": [],
        "parameters": [
          " * T - a table"
        ],
        "returns": [
          " * number or boolean - the number of items in the table, false if T is not a table"
        ],
        "signature": "VolumeScroll:tableLength(T)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Use mouse scroll wheel and modifiers to adjust volume.",
    "doc": "Use mouse scroll wheel and modifiers to adjust volume.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/VolumeScroll.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/VolumeScroll.spoon.zip)",
    "items": [
      {
        "def": "VolumeScroll:init()",
        "desc": "Initialize spoon",
        "doc": "Initialize spoon\n\nParameters:\n * None\n\nReturns:\n * void",
        "examples": [],
        "file": "Source/VolumeScroll.spoon/init.lua",
        "lineno": "19",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * void"
        ],
        "signature": "VolumeScroll:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "VolumeScroll:sameMods()",
        "desc": "Determine if a table of modifiers are the same modifiers passed into :start()",
        "doc": "Determine if a table of modifiers are the same modifiers passed into :start()\n\nParameters:\n * mods - a table of modifiers\n\nReturns:\n * boolean - true if mods are same, false otherwise",
        "examples": [],
        "file": "Source/VolumeScroll.spoon/init.lua",
        "lineno": "83",
        "name": "sameMods",
        "notes": [],
        "parameters": [
          " * mods - a table of modifiers"
        ],
        "returns": [
          " * boolean - true if mods are same, false otherwise"
        ],
        "signature": "VolumeScroll:sameMods()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "VolumeScroll:start()",
        "desc": "Start event watcher.",
        "doc": "Start event watcher.\n\nParameters:\n * mods - a table containing the modifiers to bind in scrolling\n\nReturns:\n * void",
        "examples": [],
        "file": "Source/VolumeScroll.spoon/init.lua",
        "lineno": "33",
        "name": "start",
        "notes": [],
        "parameters": [
          " * mods - a table containing the modifiers to bind in scrolling"
        ],
        "returns": [
          " * void"
        ],
        "signature": "VolumeScroll:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "VolumeScroll:stop()",
        "desc": "Stop the scroll watcher",
        "doc": "Stop the scroll watcher\n\nParameters:\n * None\n\nReturns:\n * void",
        "examples": [],
        "file": "Source/VolumeScroll.spoon/init.lua",
        "lineno": "70",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * void"
        ],
        "signature": "VolumeScroll:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "VolumeScroll:tableLength(T)",
        "desc": "Determine the number of items in a table",
        "doc": "Determine the number of items in a table\n\nParameters:\n * T - a table\n\nReturns:\n * number or boolean - the number of items in the table, false if T is not a table",
        "examples": [],
        "file": "Source/VolumeScroll.spoon/init.lua",
        "lineno": "107",
        "name": "tableLength",
        "notes": [],
        "parameters": [
          " * T - a table"
        ],
        "returns": [
          " * number or boolean - the number of items in the table, false if T is not a table"
        ],
        "signature": "VolumeScroll:tableLength(T)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "VolumeScroll",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/VolumeScroll.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/VolumeScroll.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "WifiNotifier:init()",
        "desc": "Initialize the WifiNotifier spoon",
        "doc": "Initialize the WifiNotifier spoon\n\nParameters:\n * None\n\nReturns:\n * The WifiNotifier object",
        "examples": [],
        "file": "Source/WifiNotifier.spoon/init.lua",
        "lineno": "18",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The WifiNotifier object"
        ],
        "signature": "WifiNotifier:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WifiNotifier:ssidChangedCallback()",
        "desc": "Fires whenever the wifiWatcher detects an SSID change.",
        "doc": "Fires whenever the wifiWatcher detects an SSID change.\n\nParameters:\n * None\n\nReturns:\n * The WifiNotifier object",
        "examples": [],
        "file": "Source/WifiNotifier.spoon/init.lua",
        "lineno": "48",
        "name": "ssidChangedCallback",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The WifiNotifier object"
        ],
        "signature": "WifiNotifier:ssidChangedCallback()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WifiNotifier:start()",
        "desc": "Starts the wifiNotifier",
        "doc": "Starts the wifiNotifier\n\nParameters:\n * None\n\nReturns:\n * The WifiNotifier object",
        "examples": [],
        "file": "Source/WifiNotifier.spoon/init.lua",
        "lineno": "34",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The WifiNotifier object"
        ],
        "signature": "WifiNotifier:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Receive notifications every time your wifi network changes.",
    "doc": "Receive notifications every time your wifi network changes.\n\nDownload: https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WifiNotifier.spoon.zip",
    "items": [
      {
        "def": "WifiNotifier:init()",
        "desc": "Initialize the WifiNotifier spoon",
        "doc": "Initialize the WifiNotifier spoon\n\nParameters:\n * None\n\nReturns:\n * The WifiNotifier object",
        "examples": [],
        "file": "Source/WifiNotifier.spoon/init.lua",
        "lineno": "18",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The WifiNotifier object"
        ],
        "signature": "WifiNotifier:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WifiNotifier:ssidChangedCallback()",
        "desc": "Fires whenever the wifiWatcher detects an SSID change.",
        "doc": "Fires whenever the wifiWatcher detects an SSID change.\n\nParameters:\n * None\n\nReturns:\n * The WifiNotifier object",
        "examples": [],
        "file": "Source/WifiNotifier.spoon/init.lua",
        "lineno": "48",
        "name": "ssidChangedCallback",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The WifiNotifier object"
        ],
        "signature": "WifiNotifier:ssidChangedCallback()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WifiNotifier:start()",
        "desc": "Starts the wifiNotifier",
        "doc": "Starts the wifiNotifier\n\nParameters:\n * None\n\nReturns:\n * The WifiNotifier object",
        "examples": [],
        "file": "Source/WifiNotifier.spoon/init.lua",
        "lineno": "34",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The WifiNotifier object"
        ],
        "signature": "WifiNotifier:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "WifiNotifier",
    "stripped_doc": "\nDownload: https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WifiNotifier.spoon.zip",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "desc": "Process the rules and execute any actions corresponding to the specified transition.",
        "doc": "Process the rules and execute any actions corresponding to the specified transition.\n\nParameters:\n * new_ssid - new SSID name\n * prev_ssid - previous SSID name. Defaults to `nil`\n * interface - interface where the transition occurred. Defaults to `nil`\n\nNotes:\n * This method is called internally by the `hs.wifi.watcher` object when WiFi transitions happen. It does not get any system information nor does it set any Spoon state information, so it can also be used to \"trigger\" transitions manually, either for testing or if the automated processing fails for any reason.",
        "examples": [],
        "file": "Source/WiFiTransitions.spoon/init.lua",
        "lineno": "57",
        "name": "processTransition",
        "notes": [
          " * This method is called internally by the `hs.wifi.watcher` object when WiFi transitions happen. It does not get any system information nor does it set any Spoon state information, so it can also be used to \"trigger\" transitions manually, either for testing or if the automated processing fails for any reason."
        ],
        "parameters": [
          " * new_ssid - new SSID name",
          " * prev_ssid - previous SSID name. Defaults to `nil`",
          " * interface - interface where the transition occurred. Defaults to `nil`"
        ],
        "returns": [],
        "signature": "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WiFiTransitions:start()",
        "desc": "Start the WiFi watcher",
        "doc": "Start the WiFi watcher\n\nParameters:\n * None\n\nReturns:\n * The WiFiTransitions spoon object",
        "examples": [],
        "file": "Source/WiFiTransitions.spoon/init.lua",
        "lineno": "104",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The WiFiTransitions spoon object"
        ],
        "signature": "WiFiTransitions:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "WiFiTransitions.actions",
        "desc": "Table containing a list of actions to execute for SSID transitions.",
        "doc": "Table containing a list of actions to execute for SSID transitions.\n\nNotes:\n * Transitions to a \"no network\" state (`nil` SSID) are ignored unless you set `WiFiTransitions.actOnNilTransitions`. Each action is itself a table with the following keys:\n  * to - if given, pattern to match against the new SSID. Defaults to match any network.\n  * from - if given, pattern to match against the previous SSID. Defaults to match any network.\n  * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:\n    * event - always \"SSIDChange\"\n    * interface - name of the interface on which the SSID changed\n    * old_ssid - previous SSID name\n    * new_ssid - new SSID name\n  * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored.",
        "file": "Source/WiFiTransitions.spoon/init.lua",
        "lineno": "22",
        "name": "actions",
        "notes": [
          " * Transitions to a \"no network\" state (`nil` SSID) are ignored unless you set `WiFiTransitions.actOnNilTransitions`. Each action is itself a table with the following keys:",
          "  * to - if given, pattern to match against the new SSID. Defaults to match any network.",
          "  * from - if given, pattern to match against the previous SSID. Defaults to match any network.",
          "  * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:",
          "    * event - always \"SSIDChange\"",
          "    * interface - name of the interface on which the SSID changed",
          "    * old_ssid - previous SSID name",
          "    * new_ssid - new SSID name",
          "  * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored."
        ],
        "signature": "WiFiTransitions.actions",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WiFiTransitions.actOnNilTransitions",
        "desc": "Whether to evaluate `WiFiTransitions.actions` if the \"to\" network is no network (`nil`). Defaults to `false` to maintain backward compatibility; if unset, note that `from` transitions may not execute as expected.",
        "doc": "Whether to evaluate `WiFiTransitions.actions` if the \"to\" network is no network (`nil`). Defaults to `false` to maintain backward compatibility; if unset, note that `from` transitions may not execute as expected.",
        "file": "Source/WiFiTransitions.spoon/init.lua",
        "lineno": "38",
        "name": "actOnNilTransitions",
        "signature": "WiFiTransitions.actOnNilTransitions",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WiFiTransitions.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/WiFiTransitions.spoon/init.lua",
        "lineno": "17",
        "name": "logger",
        "signature": "WiFiTransitions.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Allow arbitrary actions when transitioning between SSIDs",
    "doc": "Allow arbitrary actions when transitioning between SSIDs\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WiFiTransitions.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WiFiTransitions.spoon.zip)",
    "items": [
      {
        "def": "WiFiTransitions.actions",
        "desc": "Table containing a list of actions to execute for SSID transitions.",
        "doc": "Table containing a list of actions to execute for SSID transitions.\n\nNotes:\n * Transitions to a \"no network\" state (`nil` SSID) are ignored unless you set `WiFiTransitions.actOnNilTransitions`. Each action is itself a table with the following keys:\n  * to - if given, pattern to match against the new SSID. Defaults to match any network.\n  * from - if given, pattern to match against the previous SSID. Defaults to match any network.\n  * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:\n    * event - always \"SSIDChange\"\n    * interface - name of the interface on which the SSID changed\n    * old_ssid - previous SSID name\n    * new_ssid - new SSID name\n  * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored.",
        "file": "Source/WiFiTransitions.spoon/init.lua",
        "lineno": "22",
        "name": "actions",
        "notes": [
          " * Transitions to a \"no network\" state (`nil` SSID) are ignored unless you set `WiFiTransitions.actOnNilTransitions`. Each action is itself a table with the following keys:",
          "  * to - if given, pattern to match against the new SSID. Defaults to match any network.",
          "  * from - if given, pattern to match against the previous SSID. Defaults to match any network.",
          "  * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:",
          "    * event - always \"SSIDChange\"",
          "    * interface - name of the interface on which the SSID changed",
          "    * old_ssid - previous SSID name",
          "    * new_ssid - new SSID name",
          "  * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored."
        ],
        "signature": "WiFiTransitions.actions",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WiFiTransitions.actOnNilTransitions",
        "desc": "Whether to evaluate `WiFiTransitions.actions` if the \"to\" network is no network (`nil`). Defaults to `false` to maintain backward compatibility; if unset, note that `from` transitions may not execute as expected.",
        "doc": "Whether to evaluate `WiFiTransitions.actions` if the \"to\" network is no network (`nil`). Defaults to `false` to maintain backward compatibility; if unset, note that `from` transitions may not execute as expected.",
        "file": "Source/WiFiTransitions.spoon/init.lua",
        "lineno": "38",
        "name": "actOnNilTransitions",
        "signature": "WiFiTransitions.actOnNilTransitions",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WiFiTransitions.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/WiFiTransitions.spoon/init.lua",
        "lineno": "17",
        "name": "logger",
        "signature": "WiFiTransitions.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "desc": "Process the rules and execute any actions corresponding to the specified transition.",
        "doc": "Process the rules and execute any actions corresponding to the specified transition.\n\nParameters:\n * new_ssid - new SSID name\n * prev_ssid - previous SSID name. Defaults to `nil`\n * interface - interface where the transition occurred. Defaults to `nil`\n\nNotes:\n * This method is called internally by the `hs.wifi.watcher` object when WiFi transitions happen. It does not get any system information nor does it set any Spoon state information, so it can also be used to \"trigger\" transitions manually, either for testing or if the automated processing fails for any reason.",
        "examples": [],
        "file": "Source/WiFiTransitions.spoon/init.lua",
        "lineno": "57",
        "name": "processTransition",
        "notes": [
          " * This method is called internally by the `hs.wifi.watcher` object when WiFi transitions happen. It does not get any system information nor does it set any Spoon state information, so it can also be used to \"trigger\" transitions manually, either for testing or if the automated processing fails for any reason."
        ],
        "parameters": [
          " * new_ssid - new SSID name",
          " * prev_ssid - previous SSID name. Defaults to `nil`",
          " * interface - interface where the transition occurred. Defaults to `nil`"
        ],
        "returns": [],
        "signature": "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WiFiTransitions:start()",
        "desc": "Start the WiFi watcher",
        "doc": "Start the WiFi watcher\n\nParameters:\n * None\n\nReturns:\n * The WiFiTransitions spoon object",
        "examples": [],
        "file": "Source/WiFiTransitions.spoon/init.lua",
        "lineno": "104",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The WiFiTransitions spoon object"
        ],
        "signature": "WiFiTransitions:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "WiFiTransitions",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WiFiTransitions.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WiFiTransitions.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "WindowGrid:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for WindowGrid",
        "doc": "Binds hotkeys for WindowGrid\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * show_grid - show the grid overlay",
        "examples": [],
        "file": "Source/WindowGrid.spoon/init.lua",
        "lineno": "30",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * show_grid - show the grid overlay"
        ],
        "returns": [],
        "signature": "WindowGrid:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowGrid:start()",
        "desc": "Sets the grid configuration according to `WindowGrid.gridGeometries`.",
        "doc": "Sets the grid configuration according to `WindowGrid.gridGeometries`.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/WindowGrid.spoon/init.lua",
        "lineno": "46",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WindowGrid:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "WindowGrid.gridGeometries",
        "desc": "Table containing a list of arguments to be passed to grid.setGrid(). Each element in the table is itself a table with 1-3 arguments as defined for [hs.grid.setGrid()](http://www.hammerspoon.org/docs/hs.grid.html#setGrid). Defaults to an empty list, which results in the default 3x3 grid for all screen from `hs.grid`.",
        "doc": "Table containing a list of arguments to be passed to grid.setGrid(). Each element in the table is itself a table with 1-3 arguments as defined for [hs.grid.setGrid()](http://www.hammerspoon.org/docs/hs.grid.html#setGrid). Defaults to an empty list, which results in the default 3x3 grid for all screen from `hs.grid`.",
        "file": "Source/WindowGrid.spoon/init.lua",
        "lineno": "25",
        "name": "gridGeometries",
        "signature": "WindowGrid.gridGeometries",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowGrid.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/WindowGrid.spoon/init.lua",
        "lineno": "20",
        "name": "logger",
        "signature": "WindowGrid.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Configure and assign hotkey for `hs.grid`",
    "doc": "Configure and assign hotkey for `hs.grid`\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowGrid.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowGrid.spoon.zip)",
    "items": [
      {
        "def": "WindowGrid:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for WindowGrid",
        "doc": "Binds hotkeys for WindowGrid\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * show_grid - show the grid overlay",
        "examples": [],
        "file": "Source/WindowGrid.spoon/init.lua",
        "lineno": "30",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * show_grid - show the grid overlay"
        ],
        "returns": [],
        "signature": "WindowGrid:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowGrid.gridGeometries",
        "desc": "Table containing a list of arguments to be passed to grid.setGrid(). Each element in the table is itself a table with 1-3 arguments as defined for [hs.grid.setGrid()](http://www.hammerspoon.org/docs/hs.grid.html#setGrid). Defaults to an empty list, which results in the default 3x3 grid for all screen from `hs.grid`.",
        "doc": "Table containing a list of arguments to be passed to grid.setGrid(). Each element in the table is itself a table with 1-3 arguments as defined for [hs.grid.setGrid()](http://www.hammerspoon.org/docs/hs.grid.html#setGrid). Defaults to an empty list, which results in the default 3x3 grid for all screen from `hs.grid`.",
        "file": "Source/WindowGrid.spoon/init.lua",
        "lineno": "25",
        "name": "gridGeometries",
        "signature": "WindowGrid.gridGeometries",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowGrid.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/WindowGrid.spoon/init.lua",
        "lineno": "20",
        "name": "logger",
        "signature": "WindowGrid.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowGrid:start()",
        "desc": "Sets the grid configuration according to `WindowGrid.gridGeometries`.",
        "doc": "Sets the grid configuration according to `WindowGrid.gridGeometries`.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/WindowGrid.spoon/init.lua",
        "lineno": "46",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WindowGrid:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "WindowGrid",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowGrid.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowGrid.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "WindowHalfsAndThirds:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for WindowHalfsAndThirds",
        "doc": "Binds hotkeys for WindowHalfsAndThirds\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * left_half, right_half, top_half, bottom_half - resize to the corresponding half of the screen\n  * third_left, third_right - resize to one horizontal-third of the screen and move left/right\n  * third_up, third_down - resize to one vertical-third of the screen and move up/down\n  * max - maximize the window\n  * max_toggle - toggle maximization\n  * left_third, middle_third_h, right_third - resize and move the window to the corresponding horizontal third of the screen\n  * top_third, middle_third_v, bottom_third - resize and move the window to the corresponding vertical third of the screen\n  * top_left, top_right, bottom_left, bottom_right - resize and move the window to the corresponding quarter of the screen\n  * undo - restore window to position before last move\n  * center - move window to center of screen\n  * larger - grow window larger than its current size\n  * smaller - shrink window smaller than its current size\n\nReturns:\n * the WindowHalfsAndThirds object",
        "examples": [],
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "416",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * left_half, right_half, top_half, bottom_half - resize to the corresponding half of the screen\n   * third_left, third_right - resize to one horizontal-third of the screen and move left/right\n   * third_up, third_down - resize to one vertical-third of the screen and move up/down\n   * max - maximize the window\n   * max_toggle - toggle maximization\n   * left_third, middle_third_h, right_third - resize and move the window to the corresponding horizontal third of the screen\n   * top_third, middle_third_v, bottom_third - resize and move the window to the corresponding vertical third of the screen\n   * top_left, top_right, bottom_left, bottom_right - resize and move the window to the corresponding quarter of the screen\n   * undo - restore window to position before last move\n   * center - move window to center of screen\n   * larger - grow window larger than its current size\n   * smaller - shrink window smaller than its current size"
        ],
        "returns": [
          " * the WindowHalfsAndThirds object"
        ],
        "signature": "WindowHalfsAndThirds:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowHalfsAndThirds:center(win)",
        "desc": "Center window on screen",
        "doc": "Center window on screen\n\nParameters:\n * win - hs.window to use, defaults to hs.window.focusedWindow()\n\nReturns:\n * the WindowHalfsAndThirds object",
        "examples": [],
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "350",
        "name": "center",
        "notes": [],
        "parameters": [
          " * win - hs.window to use, defaults to hs.window.focusedWindow()"
        ],
        "returns": [
          " * the WindowHalfsAndThirds object"
        ],
        "signature": "WindowHalfsAndThirds:center(win)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowHalfsAndThirds:larger(win)",
        "desc": "Make win larger than its current size",
        "doc": "Make win larger than its current size\n\nParameters:\n * win - hs.window to use, defaults to hs.window.focusedWindow()\n\nReturns:\n * the WindowHalfsAndThirds object",
        "examples": [],
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "368",
        "name": "larger",
        "notes": [],
        "parameters": [
          " * win - hs.window to use, defaults to hs.window.focusedWindow()"
        ],
        "returns": [
          " * the WindowHalfsAndThirds object"
        ],
        "signature": "WindowHalfsAndThirds:larger(win)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowHalfsAndThirds:leftHalf(win)",
        "desc": "Resize to the left half of the screen.",
        "doc": "Resize to the left half of the screen.\n\nParameters:\n * win - hs.window to use, defaults to hs.window.focusedWindow()\n\nReturns:\n * the WindowHalfsAndThirds object\n\nNotes:\n * Variations of this method exist for other operations. See WindowHalfsAndThirds:bindHotkeys for details:\n   * .leftHalf .rightHalf .topHalf .bottomHalf .thirdLeft .thirdRight .leftThird .middleThirdH .rightThird\n   * .thirdUp .thirdDown .topThird .middleThirdV .bottomThird .topLeft .topRight .bottomLeft .bottomRight\n   * .maximize",
        "examples": [],
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "268",
        "name": "leftHalf",
        "notes": [
          " * Variations of this method exist for other operations. See WindowHalfsAndThirds:bindHotkeys for details:",
          "   * .leftHalf .rightHalf .topHalf .bottomHalf .thirdLeft .thirdRight .leftThird .middleThirdH .rightThird",
          "   * .thirdUp .thirdDown .topThird .middleThirdV .bottomThird .topLeft .topRight .bottomLeft .bottomRight",
          "   * .maximize"
        ],
        "parameters": [
          " * win - hs.window to use, defaults to hs.window.focusedWindow()"
        ],
        "returns": [
          " * the WindowHalfsAndThirds object"
        ],
        "signature": "WindowHalfsAndThirds:leftHalf(win)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowHalfsAndThirds:smaller(win)",
        "desc": "Make win smaller than its current size",
        "doc": "Make win smaller than its current size\n\nParameters:\n * win - hs.window to use, defaults to hs.window.focusedWindow()\n\nReturns:\n * the WindowHalfsAndThirds object",
        "examples": [],
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "392",
        "name": "smaller",
        "notes": [],
        "parameters": [
          " * win - hs.window to use, defaults to hs.window.focusedWindow()"
        ],
        "returns": [
          " * the WindowHalfsAndThirds object"
        ],
        "signature": "WindowHalfsAndThirds:smaller(win)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowHalfsAndThirds:toggleMaximized(win)",
        "desc": "Toggle win between its normal size, and being maximized",
        "doc": "Toggle win between its normal size, and being maximized\n\nParameters:\n * win - hs.window to use, defaults to hs.window.focusedWindow()\n\nReturns:\n * the WindowHalfsAndThirds object",
        "examples": [],
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "313",
        "name": "toggleMaximized",
        "notes": [],
        "parameters": [
          " * win - hs.window to use, defaults to hs.window.focusedWindow()"
        ],
        "returns": [
          " * the WindowHalfsAndThirds object"
        ],
        "signature": "WindowHalfsAndThirds:toggleMaximized(win)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowHalfsAndThirds:undo(win)",
        "desc": "Undo window size changes for win if there've been any in WindowHalfsAndThirds.clear_cache_after_seconds",
        "doc": "Undo window size changes for win if there've been any in WindowHalfsAndThirds.clear_cache_after_seconds\n\nParameters:\n * win - hs.window to use, defaults to hs.window.focusedWindow()\n\nReturns:\n * the WindowHalfsAndThirds object",
        "examples": [],
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "336",
        "name": "undo",
        "notes": [],
        "parameters": [
          " * win - hs.window to use, defaults to hs.window.focusedWindow()"
        ],
        "returns": [
          " * the WindowHalfsAndThirds object"
        ],
        "signature": "WindowHalfsAndThirds:undo(win)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "WindowHalfsAndThirds.clear_cache_after_seconds",
        "desc": "We don't want our undo frame cache filling all available memory. Let's clear it after it hasn't been used for a while.",
        "doc": "We don't want our undo frame cache filling all available memory. Let's clear it after it hasn't been used for a while.",
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "77",
        "name": "clear_cache_after_seconds",
        "signature": "WindowHalfsAndThirds.clear_cache_after_seconds",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowHalfsAndThirds.defaultHotkeys",
        "desc": "Table containing a sample set of hotkeys that can be assigned to the different operations.",
        "doc": "Table containing a sample set of hotkeys that can be assigned to the different operations.\n\nNotes:\n * These are not bound by default - if you want to use them you have to call: `spoon.WindowHalfsAndThirds:bindHotkeys(spoon.WindowHalfsAndThirds.defaultHotkeys)` after loading the spoon.\n * Value:\n```\n {\n    left_half   = { {\"ctrl\",        \"cmd\"}, \"Left\" },\n    right_half  = { {\"ctrl\",        \"cmd\"}, \"Right\" },\n    top_half    = { {\"ctrl\",        \"cmd\"}, \"Up\" },\n    bottom_half = { {\"ctrl\",        \"cmd\"}, \"Down\" },\n    third_left  = { {\"ctrl\", \"alt\"       }, \"Left\" },\n    third_right = { {\"ctrl\", \"alt\"       }, \"Right\" },\n    third_up    = { {\"ctrl\", \"alt\"       }, \"Up\" },\n    third_down  = { {\"ctrl\", \"alt\"       }, \"Down\" },\n    top_left    = { {\"ctrl\",        \"cmd\"}, \"1\" },\n    top_right   = { {\"ctrl\",        \"cmd\"}, \"2\" },\n    bottom_left = { {\"ctrl\",        \"cmd\"}, \"3\" },\n    bottom_right= { {\"ctrl\",        \"cmd\"}, \"4\" },\n    max_toggle  = { {\"ctrl\", \"alt\", \"cmd\"}, \"f\" },\n    max         = { {\"ctrl\", \"alt\", \"cmd\"}, \"Up\" },\n    undo        = { {        \"alt\", \"cmd\"}, \"z\" },\n    center      = { {        \"alt\", \"cmd\"}, \"c\" },\n    larger      = { {        \"alt\", \"cmd\", \"shift\"}, \"Right\" },\n    smaller     = { {        \"alt\", \"cmd\", \"shift\"}, \"Left\" },\n }\n```",
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "22",
        "name": "defaultHotkeys",
        "notes": [
          " * These are not bound by default - if you want to use them you have to call: `spoon.WindowHalfsAndThirds:bindHotkeys(spoon.WindowHalfsAndThirds.defaultHotkeys)` after loading the spoon.",
          " * Value:",
          "```",
          " {",
          "    left_half   = { {\"ctrl\",        \"cmd\"}, \"Left\" },",
          "    right_half  = { {\"ctrl\",        \"cmd\"}, \"Right\" },",
          "    top_half    = { {\"ctrl\",        \"cmd\"}, \"Up\" },",
          "    bottom_half = { {\"ctrl\",        \"cmd\"}, \"Down\" },",
          "    third_left  = { {\"ctrl\", \"alt\"       }, \"Left\" },",
          "    third_right = { {\"ctrl\", \"alt\"       }, \"Right\" },",
          "    third_up    = { {\"ctrl\", \"alt\"       }, \"Up\" },",
          "    third_down  = { {\"ctrl\", \"alt\"       }, \"Down\" },",
          "    top_left    = { {\"ctrl\",        \"cmd\"}, \"1\" },",
          "    top_right   = { {\"ctrl\",        \"cmd\"}, \"2\" },",
          "    bottom_left = { {\"ctrl\",        \"cmd\"}, \"3\" },",
          "    bottom_right= { {\"ctrl\",        \"cmd\"}, \"4\" },",
          "    max_toggle  = { {\"ctrl\", \"alt\", \"cmd\"}, \"f\" },",
          "    max         = { {\"ctrl\", \"alt\", \"cmd\"}, \"Up\" },",
          "    undo        = { {        \"alt\", \"cmd\"}, \"z\" },",
          "    center      = { {        \"alt\", \"cmd\"}, \"c\" },",
          "    larger      = { {        \"alt\", \"cmd\", \"shift\"}, \"Right\" },",
          "    smaller     = { {        \"alt\", \"cmd\", \"shift\"}, \"Left\" },",
          " }",
          "```"
        ],
        "signature": "WindowHalfsAndThirds.defaultHotkeys",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowHalfsAndThirds.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "17",
        "name": "logger",
        "signature": "WindowHalfsAndThirds.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowHalfsAndThirds.use_frame_correctness",
        "desc": "If `true`, set [setFrameCorrectness](http://www.hammerspoon.org/docs/hs.window.html#setFrameCorrectness) for some resizing operations which fail when the window extends beyonds screen boundaries. This may cause some jerkiness in the resizing, so experiment and determine if you need it. Defaults to `false`",
        "doc": "If `true`, set [setFrameCorrectness](http://www.hammerspoon.org/docs/hs.window.html#setFrameCorrectness) for some resizing operations which fail when the window extends beyonds screen boundaries. This may cause some jerkiness in the resizing, so experiment and determine if you need it. Defaults to `false`",
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "72",
        "name": "use_frame_correctness",
        "signature": "WindowHalfsAndThirds.use_frame_correctness",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Simple window movement and resizing, focusing on half- and third-of-screen sizes",
    "doc": "Simple window movement and resizing, focusing on half- and third-of-screen sizes\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowHalfsAndThirds.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowHalfsAndThirds.spoon.zip)",
    "items": [
      {
        "def": "WindowHalfsAndThirds:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for WindowHalfsAndThirds",
        "doc": "Binds hotkeys for WindowHalfsAndThirds\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * left_half, right_half, top_half, bottom_half - resize to the corresponding half of the screen\n  * third_left, third_right - resize to one horizontal-third of the screen and move left/right\n  * third_up, third_down - resize to one vertical-third of the screen and move up/down\n  * max - maximize the window\n  * max_toggle - toggle maximization\n  * left_third, middle_third_h, right_third - resize and move the window to the corresponding horizontal third of the screen\n  * top_third, middle_third_v, bottom_third - resize and move the window to the corresponding vertical third of the screen\n  * top_left, top_right, bottom_left, bottom_right - resize and move the window to the corresponding quarter of the screen\n  * undo - restore window to position before last move\n  * center - move window to center of screen\n  * larger - grow window larger than its current size\n  * smaller - shrink window smaller than its current size\n\nReturns:\n * the WindowHalfsAndThirds object",
        "examples": [],
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "416",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * left_half, right_half, top_half, bottom_half - resize to the corresponding half of the screen\n   * third_left, third_right - resize to one horizontal-third of the screen and move left/right\n   * third_up, third_down - resize to one vertical-third of the screen and move up/down\n   * max - maximize the window\n   * max_toggle - toggle maximization\n   * left_third, middle_third_h, right_third - resize and move the window to the corresponding horizontal third of the screen\n   * top_third, middle_third_v, bottom_third - resize and move the window to the corresponding vertical third of the screen\n   * top_left, top_right, bottom_left, bottom_right - resize and move the window to the corresponding quarter of the screen\n   * undo - restore window to position before last move\n   * center - move window to center of screen\n   * larger - grow window larger than its current size\n   * smaller - shrink window smaller than its current size"
        ],
        "returns": [
          " * the WindowHalfsAndThirds object"
        ],
        "signature": "WindowHalfsAndThirds:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowHalfsAndThirds:center(win)",
        "desc": "Center window on screen",
        "doc": "Center window on screen\n\nParameters:\n * win - hs.window to use, defaults to hs.window.focusedWindow()\n\nReturns:\n * the WindowHalfsAndThirds object",
        "examples": [],
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "350",
        "name": "center",
        "notes": [],
        "parameters": [
          " * win - hs.window to use, defaults to hs.window.focusedWindow()"
        ],
        "returns": [
          " * the WindowHalfsAndThirds object"
        ],
        "signature": "WindowHalfsAndThirds:center(win)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowHalfsAndThirds.clear_cache_after_seconds",
        "desc": "We don't want our undo frame cache filling all available memory. Let's clear it after it hasn't been used for a while.",
        "doc": "We don't want our undo frame cache filling all available memory. Let's clear it after it hasn't been used for a while.",
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "77",
        "name": "clear_cache_after_seconds",
        "signature": "WindowHalfsAndThirds.clear_cache_after_seconds",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowHalfsAndThirds.defaultHotkeys",
        "desc": "Table containing a sample set of hotkeys that can be assigned to the different operations.",
        "doc": "Table containing a sample set of hotkeys that can be assigned to the different operations.\n\nNotes:\n * These are not bound by default - if you want to use them you have to call: `spoon.WindowHalfsAndThirds:bindHotkeys(spoon.WindowHalfsAndThirds.defaultHotkeys)` after loading the spoon.\n * Value:\n```\n {\n    left_half   = { {\"ctrl\",        \"cmd\"}, \"Left\" },\n    right_half  = { {\"ctrl\",        \"cmd\"}, \"Right\" },\n    top_half    = { {\"ctrl\",        \"cmd\"}, \"Up\" },\n    bottom_half = { {\"ctrl\",        \"cmd\"}, \"Down\" },\n    third_left  = { {\"ctrl\", \"alt\"       }, \"Left\" },\n    third_right = { {\"ctrl\", \"alt\"       }, \"Right\" },\n    third_up    = { {\"ctrl\", \"alt\"       }, \"Up\" },\n    third_down  = { {\"ctrl\", \"alt\"       }, \"Down\" },\n    top_left    = { {\"ctrl\",        \"cmd\"}, \"1\" },\n    top_right   = { {\"ctrl\",        \"cmd\"}, \"2\" },\n    bottom_left = { {\"ctrl\",        \"cmd\"}, \"3\" },\n    bottom_right= { {\"ctrl\",        \"cmd\"}, \"4\" },\n    max_toggle  = { {\"ctrl\", \"alt\", \"cmd\"}, \"f\" },\n    max         = { {\"ctrl\", \"alt\", \"cmd\"}, \"Up\" },\n    undo        = { {        \"alt\", \"cmd\"}, \"z\" },\n    center      = { {        \"alt\", \"cmd\"}, \"c\" },\n    larger      = { {        \"alt\", \"cmd\", \"shift\"}, \"Right\" },\n    smaller     = { {        \"alt\", \"cmd\", \"shift\"}, \"Left\" },\n }\n```",
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "22",
        "name": "defaultHotkeys",
        "notes": [
          " * These are not bound by default - if you want to use them you have to call: `spoon.WindowHalfsAndThirds:bindHotkeys(spoon.WindowHalfsAndThirds.defaultHotkeys)` after loading the spoon.",
          " * Value:",
          "```",
          " {",
          "    left_half   = { {\"ctrl\",        \"cmd\"}, \"Left\" },",
          "    right_half  = { {\"ctrl\",        \"cmd\"}, \"Right\" },",
          "    top_half    = { {\"ctrl\",        \"cmd\"}, \"Up\" },",
          "    bottom_half = { {\"ctrl\",        \"cmd\"}, \"Down\" },",
          "    third_left  = { {\"ctrl\", \"alt\"       }, \"Left\" },",
          "    third_right = { {\"ctrl\", \"alt\"       }, \"Right\" },",
          "    third_up    = { {\"ctrl\", \"alt\"       }, \"Up\" },",
          "    third_down  = { {\"ctrl\", \"alt\"       }, \"Down\" },",
          "    top_left    = { {\"ctrl\",        \"cmd\"}, \"1\" },",
          "    top_right   = { {\"ctrl\",        \"cmd\"}, \"2\" },",
          "    bottom_left = { {\"ctrl\",        \"cmd\"}, \"3\" },",
          "    bottom_right= { {\"ctrl\",        \"cmd\"}, \"4\" },",
          "    max_toggle  = { {\"ctrl\", \"alt\", \"cmd\"}, \"f\" },",
          "    max         = { {\"ctrl\", \"alt\", \"cmd\"}, \"Up\" },",
          "    undo        = { {        \"alt\", \"cmd\"}, \"z\" },",
          "    center      = { {        \"alt\", \"cmd\"}, \"c\" },",
          "    larger      = { {        \"alt\", \"cmd\", \"shift\"}, \"Right\" },",
          "    smaller     = { {        \"alt\", \"cmd\", \"shift\"}, \"Left\" },",
          " }",
          "```"
        ],
        "signature": "WindowHalfsAndThirds.defaultHotkeys",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowHalfsAndThirds:larger(win)",
        "desc": "Make win larger than its current size",
        "doc": "Make win larger than its current size\n\nParameters:\n * win - hs.window to use, defaults to hs.window.focusedWindow()\n\nReturns:\n * the WindowHalfsAndThirds object",
        "examples": [],
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "368",
        "name": "larger",
        "notes": [],
        "parameters": [
          " * win - hs.window to use, defaults to hs.window.focusedWindow()"
        ],
        "returns": [
          " * the WindowHalfsAndThirds object"
        ],
        "signature": "WindowHalfsAndThirds:larger(win)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowHalfsAndThirds:leftHalf(win)",
        "desc": "Resize to the left half of the screen.",
        "doc": "Resize to the left half of the screen.\n\nParameters:\n * win - hs.window to use, defaults to hs.window.focusedWindow()\n\nReturns:\n * the WindowHalfsAndThirds object\n\nNotes:\n * Variations of this method exist for other operations. See WindowHalfsAndThirds:bindHotkeys for details:\n   * .leftHalf .rightHalf .topHalf .bottomHalf .thirdLeft .thirdRight .leftThird .middleThirdH .rightThird\n   * .thirdUp .thirdDown .topThird .middleThirdV .bottomThird .topLeft .topRight .bottomLeft .bottomRight\n   * .maximize",
        "examples": [],
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "268",
        "name": "leftHalf",
        "notes": [
          " * Variations of this method exist for other operations. See WindowHalfsAndThirds:bindHotkeys for details:",
          "   * .leftHalf .rightHalf .topHalf .bottomHalf .thirdLeft .thirdRight .leftThird .middleThirdH .rightThird",
          "   * .thirdUp .thirdDown .topThird .middleThirdV .bottomThird .topLeft .topRight .bottomLeft .bottomRight",
          "   * .maximize"
        ],
        "parameters": [
          " * win - hs.window to use, defaults to hs.window.focusedWindow()"
        ],
        "returns": [
          " * the WindowHalfsAndThirds object"
        ],
        "signature": "WindowHalfsAndThirds:leftHalf(win)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowHalfsAndThirds.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "17",
        "name": "logger",
        "signature": "WindowHalfsAndThirds.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowHalfsAndThirds:smaller(win)",
        "desc": "Make win smaller than its current size",
        "doc": "Make win smaller than its current size\n\nParameters:\n * win - hs.window to use, defaults to hs.window.focusedWindow()\n\nReturns:\n * the WindowHalfsAndThirds object",
        "examples": [],
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "392",
        "name": "smaller",
        "notes": [],
        "parameters": [
          " * win - hs.window to use, defaults to hs.window.focusedWindow()"
        ],
        "returns": [
          " * the WindowHalfsAndThirds object"
        ],
        "signature": "WindowHalfsAndThirds:smaller(win)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowHalfsAndThirds:toggleMaximized(win)",
        "desc": "Toggle win between its normal size, and being maximized",
        "doc": "Toggle win between its normal size, and being maximized\n\nParameters:\n * win - hs.window to use, defaults to hs.window.focusedWindow()\n\nReturns:\n * the WindowHalfsAndThirds object",
        "examples": [],
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "313",
        "name": "toggleMaximized",
        "notes": [],
        "parameters": [
          " * win - hs.window to use, defaults to hs.window.focusedWindow()"
        ],
        "returns": [
          " * the WindowHalfsAndThirds object"
        ],
        "signature": "WindowHalfsAndThirds:toggleMaximized(win)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowHalfsAndThirds:undo(win)",
        "desc": "Undo window size changes for win if there've been any in WindowHalfsAndThirds.clear_cache_after_seconds",
        "doc": "Undo window size changes for win if there've been any in WindowHalfsAndThirds.clear_cache_after_seconds\n\nParameters:\n * win - hs.window to use, defaults to hs.window.focusedWindow()\n\nReturns:\n * the WindowHalfsAndThirds object",
        "examples": [],
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "336",
        "name": "undo",
        "notes": [],
        "parameters": [
          " * win - hs.window to use, defaults to hs.window.focusedWindow()"
        ],
        "returns": [
          " * the WindowHalfsAndThirds object"
        ],
        "signature": "WindowHalfsAndThirds:undo(win)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowHalfsAndThirds.use_frame_correctness",
        "desc": "If `true`, set [setFrameCorrectness](http://www.hammerspoon.org/docs/hs.window.html#setFrameCorrectness) for some resizing operations which fail when the window extends beyonds screen boundaries. This may cause some jerkiness in the resizing, so experiment and determine if you need it. Defaults to `false`",
        "doc": "If `true`, set [setFrameCorrectness](http://www.hammerspoon.org/docs/hs.window.html#setFrameCorrectness) for some resizing operations which fail when the window extends beyonds screen boundaries. This may cause some jerkiness in the resizing, so experiment and determine if you need it. Defaults to `false`",
        "file": "Source/WindowHalfsAndThirds.spoon/init.lua",
        "lineno": "72",
        "name": "use_frame_correctness",
        "signature": "WindowHalfsAndThirds.use_frame_correctness",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "WindowHalfsAndThirds",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowHalfsAndThirds.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowHalfsAndThirds.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "WindowScreenLeftAndRight:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for WindowScreenLeftAndRight",
        "doc": "Binds hotkeys for WindowScreenLeftAndRight\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * screen_left, screen_right - move the window to the left/right screen (if you have more than one monitor connected, does nothing otherwise)",
        "examples": [],
        "file": "Source/WindowScreenLeftAndRight.spoon/init.lua",
        "lineno": "88",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * screen_left, screen_right - move the window to the left/right screen (if you have more than one monitor connected, does nothing otherwise)"
        ],
        "returns": [],
        "signature": "WindowScreenLeftAndRight:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "WindowScreenLeftAndRight.animationDuration",
        "desc": "Length of the animation to use for the window movements across the screens.",
        "doc": "Length of the animation to use for the window movements across the screens.\n\nNotes:\n * `nil` means to use the existing value from `hs.window.animationDuration`. 0 means to disable the animations.\n * Default: `nil`.",
        "file": "Source/WindowScreenLeftAndRight.spoon/init.lua",
        "lineno": "40",
        "name": "animationDuration",
        "notes": [
          " * `nil` means to use the existing value from `hs.window.animationDuration`. 0 means to disable the animations.",
          " * Default: `nil`."
        ],
        "signature": "WindowScreenLeftAndRight.animationDuration",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowScreenLeftAndRight.defaultHotkeys",
        "desc": "Table containing a sample set of hotkeys that can be assigned to the different operations.",
        "doc": "Table containing a sample set of hotkeys that can be assigned to the different operations.\n\nNotes:\n * These are not bound by default - if you want to use them you have to call: `spoon.WindowScreenLeftAndRight:bindHotkeys(spoon.WindowScreenLeftAndRight.defaultHotkeys)` after loading the spoon.\n * Value:\n```\n {\n    screen_left = { {\"ctrl\", \"alt\", \"cmd\"}, \"Left\" },\n    screen_right= { {\"ctrl\", \"alt\", \"cmd\"}, \"Right\" },\n }\n```",
        "file": "Source/WindowScreenLeftAndRight.spoon/init.lua",
        "lineno": "22",
        "name": "defaultHotkeys",
        "notes": [
          " * These are not bound by default - if you want to use them you have to call: `spoon.WindowScreenLeftAndRight:bindHotkeys(spoon.WindowScreenLeftAndRight.defaultHotkeys)` after loading the spoon.",
          " * Value:",
          "```",
          " {",
          "    screen_left = { {\"ctrl\", \"alt\", \"cmd\"}, \"Left\" },",
          "    screen_right= { {\"ctrl\", \"alt\", \"cmd\"}, \"Right\" },",
          " }",
          "```"
        ],
        "signature": "WindowScreenLeftAndRight.defaultHotkeys",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowScreenLeftAndRight.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/WindowScreenLeftAndRight.spoon/init.lua",
        "lineno": "17",
        "name": "logger",
        "signature": "WindowScreenLeftAndRight.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Move windows to other screens",
    "doc": "Move windows to other screens\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowScreenLeftAndRight.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowScreenLeftAndRight.spoon.zip)",
    "items": [
      {
        "def": "WindowScreenLeftAndRight.animationDuration",
        "desc": "Length of the animation to use for the window movements across the screens.",
        "doc": "Length of the animation to use for the window movements across the screens.\n\nNotes:\n * `nil` means to use the existing value from `hs.window.animationDuration`. 0 means to disable the animations.\n * Default: `nil`.",
        "file": "Source/WindowScreenLeftAndRight.spoon/init.lua",
        "lineno": "40",
        "name": "animationDuration",
        "notes": [
          " * `nil` means to use the existing value from `hs.window.animationDuration`. 0 means to disable the animations.",
          " * Default: `nil`."
        ],
        "signature": "WindowScreenLeftAndRight.animationDuration",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowScreenLeftAndRight:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for WindowScreenLeftAndRight",
        "doc": "Binds hotkeys for WindowScreenLeftAndRight\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * screen_left, screen_right - move the window to the left/right screen (if you have more than one monitor connected, does nothing otherwise)",
        "examples": [],
        "file": "Source/WindowScreenLeftAndRight.spoon/init.lua",
        "lineno": "88",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * screen_left, screen_right - move the window to the left/right screen (if you have more than one monitor connected, does nothing otherwise)"
        ],
        "returns": [],
        "signature": "WindowScreenLeftAndRight:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowScreenLeftAndRight.defaultHotkeys",
        "desc": "Table containing a sample set of hotkeys that can be assigned to the different operations.",
        "doc": "Table containing a sample set of hotkeys that can be assigned to the different operations.\n\nNotes:\n * These are not bound by default - if you want to use them you have to call: `spoon.WindowScreenLeftAndRight:bindHotkeys(spoon.WindowScreenLeftAndRight.defaultHotkeys)` after loading the spoon.\n * Value:\n```\n {\n    screen_left = { {\"ctrl\", \"alt\", \"cmd\"}, \"Left\" },\n    screen_right= { {\"ctrl\", \"alt\", \"cmd\"}, \"Right\" },\n }\n```",
        "file": "Source/WindowScreenLeftAndRight.spoon/init.lua",
        "lineno": "22",
        "name": "defaultHotkeys",
        "notes": [
          " * These are not bound by default - if you want to use them you have to call: `spoon.WindowScreenLeftAndRight:bindHotkeys(spoon.WindowScreenLeftAndRight.defaultHotkeys)` after loading the spoon.",
          " * Value:",
          "```",
          " {",
          "    screen_left = { {\"ctrl\", \"alt\", \"cmd\"}, \"Left\" },",
          "    screen_right= { {\"ctrl\", \"alt\", \"cmd\"}, \"Right\" },",
          " }",
          "```"
        ],
        "signature": "WindowScreenLeftAndRight.defaultHotkeys",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowScreenLeftAndRight.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/WindowScreenLeftAndRight.spoon/init.lua",
        "lineno": "17",
        "name": "logger",
        "signature": "WindowScreenLeftAndRight.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "WindowScreenLeftAndRight",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowScreenLeftAndRight.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowScreenLeftAndRight.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "WindowSigils:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for WindowSigils",
        "doc": "Binds hotkeys for WindowSigils\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * enter - Enter the sigil mode",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "99",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * enter - Enter the sigil mode"
        ],
        "returns": [],
        "signature": "WindowSigils:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:bindModeKey(mods, key, action)",
        "desc": "Bind an extra action to be triggered by a key in the sigil mode.",
        "doc": "Bind an extra action to be triggered by a key in the sigil mode.\n\nParameters:\n * mods - The key modifiers\n * key - The key\n * action - A function, called with no parameters.",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "149",
        "name": "bindModeKey",
        "notes": [],
        "parameters": [
          " * mods - The key modifiers",
          " * key - The key",
          " * action - A function, called with no parameters."
        ],
        "returns": [],
        "signature": "WindowSigils:bindModeKey(mods, key, action)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:bindSigilAction(mods, action)",
        "desc": "Bind an action to be triggered in the sigil mode when a window's sigil key is pressed.",
        "doc": "Bind an action to be triggered in the sigil mode when a window's sigil key is pressed.\n\nParameters:\n * mods - The modifiers which must be held to trigger this action.\n * action - A function which takes a window object and performs this action.",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "175",
        "name": "bindSigilAction",
        "notes": [],
        "parameters": [
          " * mods - The modifiers which must be held to trigger this action.",
          " * action - A function which takes a window object and performs this action."
        ],
        "returns": [],
        "signature": "WindowSigils:bindSigilAction(mods, action)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:configure(configuration)",
        "desc": "Configures the spoon.",
        "doc": "Configures the spoon.\n\nParameters:\n * configuration - :\n   * hotkeys \n   * mode_keys - a table of key specs (e.g. {{'shift'}, 'n'}) to functions.  The keys are\n     mapped inside the sigil mode and the key is no longer used as a window sigil.\n   * sigil_actions - a table of mod specs (e.g. {'alt'}) to functions.  When the sigil is\n     used in the sigil mode with the specified modifier pressed, the function is invoked\n     with a window object.",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "120",
        "name": "configure",
        "notes": [],
        "parameters": [
          " * configuration - :\n   * hotkeys\n   * mode_keys - a table of key specs (e.g. {{'shift'}, 'n'}) to functions.  The keys are mapped inside the sigil mode and the key is no longer used as a window sigil.\n   * sigil_actions - a table of mod specs (e.g. {'alt'}) to functions.  When the sigil is used in the sigil mode with the specified modifier pressed, the function is invoked with a window object."
        ],
        "returns": [],
        "signature": "WindowSigils:configure(configuration)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:orderedWindows()",
        "desc": "A list of windows, in the order sigils are assigned.",
        "doc": "A list of windows, in the order sigils are assigned.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "279",
        "name": "orderedWindows",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WindowSigils:orderedWindows()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:refresh()",
        "desc": "Rerender all window sigils.",
        "doc": "Rerender all window sigils.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "411",
        "name": "refresh",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WindowSigils:refresh()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:start()",
        "desc": "Starts rendering the sigils and handling hotkeys",
        "doc": "Starts rendering the sigils and handling hotkeys\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "200",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WindowSigils:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:stop()",
        "desc": "Stops rendering the sigils and handling hotkeys",
        "doc": "Stops rendering the sigils and handling hotkeys\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "237",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WindowSigils:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:window(sigil)",
        "desc": "Find the window with the given index or sigil.",
        "doc": "Find the window with the given index or sigil.\n\nParameters:\n * sigil - If a number, the index of the window; if a string, the sigil of the window.\n   Can also be 'North', 'East', 'South', or 'West' to find a window related to the\n   currently focused window.",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "302",
        "name": "window",
        "notes": [],
        "parameters": [
          " * sigil - If a number, the index of the window; if a string, the sigil of the window. Can also be 'North', 'East', 'South', or 'West' to find a window related to the currently focused window."
        ],
        "returns": [],
        "signature": "WindowSigils:window(sigil)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "WindowSigils.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "88",
        "name": "logger",
        "signature": "WindowSigils.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Assign every window and empty rectangle a sigil for quick access.",
    "doc": "Assign every window and empty rectangle a sigil for quick access.\n\nA letter or digit is rendered in the titlebar of every window (or empty space), and\nactions can be bound inside the sigil mode and triggered with different modifiers.\n\nFor example, with no modifiers, a sigil key can focus the window.  If the 'enter'\naction is bound to control-w, then 'control-w c' will focus the window with sigil 'c'.\nThe action is a function which accepts a window, or in the case of an empty space, a\nwindow-like object which reponds to 'id', 'frame', and 'setFrame'.\n\nThe keys 'h', 'j', 'k', and 'l' are reserved for the window west, south, north, and\neast of the currently focused window in standard Vi-like fashion, and so are not\nassigned as sigils.\n\nBy default, two keys (other than the sigils) are bound in the mode: escape leaves the\nmode without doing anything, and '.' sends the sigil key to the focused window.  This\nallows sending 'control-w' to the underlying window by typing 'control-w .'.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowSigils.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowSigils.spoon.zip)\n\nUsage example:\n```\nlocal function ignore_notification()\n  -- ...\nend\nlocal function paste_as_keystrokes()\n  hs.eventtap.keyStrokes(hs.pasteboard.readString())\nend\nlocal function rerun_last_command()\n  hs.execute(\"kitty @ --to unix:/Users/jfelice/.run/kitty send-text --match=title:kak_repl_window '\\x10\\x0d'\", true)\nend\n\nlocal function focus_window(window)\n  window:focus()\n  if hs.window.focusedWindow() ~= window then\n    -- Some cases with apps having windows on multiple monitors require\n    -- us to try again (?)\n    window:focus()\n  end\nend\n\nlocal function swap_window(window)\n  local focused_frame = hs.window.focusedWindow():frame()\n  local selected_frame = window:frame()\n  hs.window.focusedWindow():setFrame(selected_frame, 0)\n  window:setFrame(focused_frame, 0)\nend\n\nlocal function stack_window(window)\n  local frame = window:frame()\n  hs.window.focusedWindow():setFrame(frame, 0)\nend\n\nsigils = hs.loadSpoon(\"WindowSigils\")\nsigils:configure({\n  hotkeys = {\n    enter = {{\"control\"}, \"W\"}\n  },\n  mode_keys = {\n    [{{'shift'}, 'i'}] = ignore_notification,\n    [{{}, 'v'}]        = paste_as_keystrokes,\n    [{{}, ','}]        = rerun_last_command,\n  },\n  sigil_actions = {\n    [{}]       = focus_window,\n    [{'ctrl'}] = stack_window,\n    [{'alt'}]  = swap_window,\n  }\n})\nsigils:start()\n```",
    "items": [
      {
        "def": "WindowSigils:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for WindowSigils",
        "doc": "Binds hotkeys for WindowSigils\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * enter - Enter the sigil mode",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "99",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * enter - Enter the sigil mode"
        ],
        "returns": [],
        "signature": "WindowSigils:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:bindModeKey(mods, key, action)",
        "desc": "Bind an extra action to be triggered by a key in the sigil mode.",
        "doc": "Bind an extra action to be triggered by a key in the sigil mode.\n\nParameters:\n * mods - The key modifiers\n * key - The key\n * action - A function, called with no parameters.",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "149",
        "name": "bindModeKey",
        "notes": [],
        "parameters": [
          " * mods - The key modifiers",
          " * key - The key",
          " * action - A function, called with no parameters."
        ],
        "returns": [],
        "signature": "WindowSigils:bindModeKey(mods, key, action)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:bindSigilAction(mods, action)",
        "desc": "Bind an action to be triggered in the sigil mode when a window's sigil key is pressed.",
        "doc": "Bind an action to be triggered in the sigil mode when a window's sigil key is pressed.\n\nParameters:\n * mods - The modifiers which must be held to trigger this action.\n * action - A function which takes a window object and performs this action.",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "175",
        "name": "bindSigilAction",
        "notes": [],
        "parameters": [
          " * mods - The modifiers which must be held to trigger this action.",
          " * action - A function which takes a window object and performs this action."
        ],
        "returns": [],
        "signature": "WindowSigils:bindSigilAction(mods, action)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:configure(configuration)",
        "desc": "Configures the spoon.",
        "doc": "Configures the spoon.\n\nParameters:\n * configuration - :\n   * hotkeys \n   * mode_keys - a table of key specs (e.g. {{'shift'}, 'n'}) to functions.  The keys are\n     mapped inside the sigil mode and the key is no longer used as a window sigil.\n   * sigil_actions - a table of mod specs (e.g. {'alt'}) to functions.  When the sigil is\n     used in the sigil mode with the specified modifier pressed, the function is invoked\n     with a window object.",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "120",
        "name": "configure",
        "notes": [],
        "parameters": [
          " * configuration - :\n   * hotkeys\n   * mode_keys - a table of key specs (e.g. {{'shift'}, 'n'}) to functions.  The keys are mapped inside the sigil mode and the key is no longer used as a window sigil.\n   * sigil_actions - a table of mod specs (e.g. {'alt'}) to functions.  When the sigil is used in the sigil mode with the specified modifier pressed, the function is invoked with a window object."
        ],
        "returns": [],
        "signature": "WindowSigils:configure(configuration)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "88",
        "name": "logger",
        "signature": "WindowSigils.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowSigils:orderedWindows()",
        "desc": "A list of windows, in the order sigils are assigned.",
        "doc": "A list of windows, in the order sigils are assigned.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "279",
        "name": "orderedWindows",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WindowSigils:orderedWindows()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:refresh()",
        "desc": "Rerender all window sigils.",
        "doc": "Rerender all window sigils.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "411",
        "name": "refresh",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WindowSigils:refresh()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:start()",
        "desc": "Starts rendering the sigils and handling hotkeys",
        "doc": "Starts rendering the sigils and handling hotkeys\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "200",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WindowSigils:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:stop()",
        "desc": "Stops rendering the sigils and handling hotkeys",
        "doc": "Stops rendering the sigils and handling hotkeys\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "237",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WindowSigils:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowSigils:window(sigil)",
        "desc": "Find the window with the given index or sigil.",
        "doc": "Find the window with the given index or sigil.\n\nParameters:\n * sigil - If a number, the index of the window; if a string, the sigil of the window.\n   Can also be 'North', 'East', 'South', or 'West' to find a window related to the\n   currently focused window.",
        "examples": [],
        "file": "Source/WindowSigils.spoon/init.lua",
        "lineno": "302",
        "name": "window",
        "notes": [],
        "parameters": [
          " * sigil - If a number, the index of the window; if a string, the sigil of the window. Can also be 'North', 'East', 'South', or 'West' to find a window related to the currently focused window."
        ],
        "returns": [],
        "signature": "WindowSigils:window(sigil)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "WindowSigils",
    "stripped_doc": "\nA letter or digit is rendered in the titlebar of every window (or empty space), and\nactions can be bound inside the sigil mode and triggered with different modifiers.\n\nFor example, with no modifiers, a sigil key can focus the window.  If the 'enter'\naction is bound to control-w, then 'control-w c' will focus the window with sigil 'c'.\nThe action is a function which accepts a window, or in the case of an empty space, a\nwindow-like object which reponds to 'id', 'frame', and 'setFrame'.\n\nThe keys 'h', 'j', 'k', and 'l' are reserved for the window west, south, north, and\neast of the currently focused window in standard Vi-like fashion, and so are not\nassigned as sigils.\n\nBy default, two keys (other than the sigils) are bound in the mode: escape leaves the\nmode without doing anything, and '.' sends the sigil key to the focused window.  This\nallows sending 'control-w' to the underlying window by typing 'control-w .'.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowSigils.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WindowSigils.spoon.zip)\n\nUsage example:\n```\nlocal function ignore_notification()\n  -- ...\nend\nlocal function paste_as_keystrokes()\n  hs.eventtap.keyStrokes(hs.pasteboard.readString())\nend\nlocal function rerun_last_command()\n  hs.execute(\"kitty @ --to unix:/Users/jfelice/.run/kitty send-text --match=title:kak_repl_window '\\x10\\x0d'\", true)\nend\n\nlocal function focus_window(window)\n  window:focus()\n  if hs.window.focusedWindow() ~= window then\n    -- Some cases with apps having windows on multiple monitors require\n    -- us to try again (?)\n    window:focus()\n  end\nend\n\nlocal function swap_window(window)\n  local focused_frame = hs.window.focusedWindow():frame()\n  local selected_frame = window:frame()\n  hs.window.focusedWindow():setFrame(selected_frame, 0)\n  window:setFrame(focused_frame, 0)\nend\n\nlocal function stack_window(window)\n  local frame = window:frame()\n  hs.window.focusedWindow():setFrame(frame, 0)\nend\n\nsigils = hs.loadSpoon(\"WindowSigils\")\nsigils:configure({\n  hotkeys = {\n    enter = {{\"control\"}, \"W\"}\n  },\n  mode_keys = {\n    [{{'shift'}, 'i'}] = ignore_notification,\n    [{{}, 'v'}]        = paste_as_keystrokes,\n    [{{}, ','}]        = rerun_last_command,\n  },\n  sigil_actions = {\n    [{}]       = focus_window,\n    [{'ctrl'}] = stack_window,\n    [{'alt'}]  = swap_window,\n  }\n})\nsigils:start()\n```",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "WinWin:centerCursor()",
        "desc": "Center the cursor on the focused window.",
        "doc": "Center the cursor on the focused window.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/WinWin.spoon/init.lua",
        "lineno": "190",
        "name": "centerCursor",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WinWin:centerCursor()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WinWin:moveAndResize(option)",
        "desc": "Move and resize the focused window.",
        "doc": "Move and resize the focused window.\n\nParameters:\n * option - A string specifying the option, valid strings are: `halfleft`, `halfright`, `halfup`, `halfdown`, `cornerNW`, `cornerSW`, `cornerNE`, `cornerSE`, `center`, `fullscreen`, `maximize`, `minimize`, `expand`, `shrink`.",
        "examples": [],
        "file": "Source/WinWin.spoon/init.lua",
        "lineno": "85",
        "name": "moveAndResize",
        "notes": [],
        "parameters": [
          " * option - A string specifying the option, valid strings are: `halfleft`, `halfright`, `halfup`, `halfdown`, `cornerNW`, `cornerSW`, `cornerNE`, `cornerSE`, `center`, `fullscreen`, `maximize`, `minimize`, `expand`, `shrink`."
        ],
        "returns": [],
        "signature": "WinWin:moveAndResize(option)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WinWin:moveToScreen(direction)",
        "desc": "Move the focused window between all of the screens in the `direction`.",
        "doc": "Move the focused window between all of the screens in the `direction`.\n\nParameters:\n * direction - A string specifying the direction, valid strings are: `left`, `right`, `up`, `down`, `next`.",
        "examples": [],
        "file": "Source/WinWin.spoon/init.lua",
        "lineno": "145",
        "name": "moveToScreen",
        "notes": [],
        "parameters": [
          " * direction - A string specifying the direction, valid strings are: `left`, `right`, `up`, `down`, `next`."
        ],
        "returns": [],
        "signature": "WinWin:moveToScreen(direction)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WinWin:stepMove(direction)",
        "desc": "Move the focused window in the `direction` by on step. The step scale equals to the width/height of one gridpart.",
        "doc": "Move the focused window in the `direction` by on step. The step scale equals to the width/height of one gridpart.\n\nParameters:\n * direction - A string specifying the direction, valid strings are: `left`, `right`, `up`, `down`.",
        "examples": [],
        "file": "Source/WinWin.spoon/init.lua",
        "lineno": "25",
        "name": "stepMove",
        "notes": [],
        "parameters": [
          " * direction - A string specifying the direction, valid strings are: `left`, `right`, `up`, `down`."
        ],
        "returns": [],
        "signature": "WinWin:stepMove(direction)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WinWin:stepResize(direction)",
        "desc": "Resize the focused window in the `direction` by on step.",
        "doc": "Resize the focused window in the `direction` by on step.\n\nParameters:\n * direction - A string specifying the direction, valid strings are: `left`, `right`, `up`, `down`.",
        "examples": [],
        "file": "Source/WinWin.spoon/init.lua",
        "lineno": "55",
        "name": "stepResize",
        "notes": [],
        "parameters": [
          " * direction - A string specifying the direction, valid strings are: `left`, `right`, `up`, `down`."
        ],
        "returns": [],
        "signature": "WinWin:stepResize(direction)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WinWin:undo()",
        "desc": "Undo the last window manipulation. Only those \"moveAndResize\" manipulations can be undone.",
        "doc": "Undo the last window manipulation. Only those \"moveAndResize\" manipulations can be undone.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/WinWin.spoon/init.lua",
        "lineno": "173",
        "name": "undo",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WinWin:undo()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "WinWin.gridparts",
        "desc": "An integer specifying how many gridparts the screen should be divided into. Defaults to 30.",
        "doc": "An integer specifying how many gridparts the screen should be divided into. Defaults to 30.",
        "file": "Source/WinWin.spoon/init.lua",
        "lineno": "20",
        "name": "gridparts",
        "signature": "WinWin.gridparts",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Windows manipulation",
    "doc": "Windows manipulation\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WinWin.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WinWin.spoon.zip)",
    "items": [
      {
        "def": "WinWin:centerCursor()",
        "desc": "Center the cursor on the focused window.",
        "doc": "Center the cursor on the focused window.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/WinWin.spoon/init.lua",
        "lineno": "190",
        "name": "centerCursor",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WinWin:centerCursor()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WinWin.gridparts",
        "desc": "An integer specifying how many gridparts the screen should be divided into. Defaults to 30.",
        "doc": "An integer specifying how many gridparts the screen should be divided into. Defaults to 30.",
        "file": "Source/WinWin.spoon/init.lua",
        "lineno": "20",
        "name": "gridparts",
        "signature": "WinWin.gridparts",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WinWin:moveAndResize(option)",
        "desc": "Move and resize the focused window.",
        "doc": "Move and resize the focused window.\n\nParameters:\n * option - A string specifying the option, valid strings are: `halfleft`, `halfright`, `halfup`, `halfdown`, `cornerNW`, `cornerSW`, `cornerNE`, `cornerSE`, `center`, `fullscreen`, `maximize`, `minimize`, `expand`, `shrink`.",
        "examples": [],
        "file": "Source/WinWin.spoon/init.lua",
        "lineno": "85",
        "name": "moveAndResize",
        "notes": [],
        "parameters": [
          " * option - A string specifying the option, valid strings are: `halfleft`, `halfright`, `halfup`, `halfdown`, `cornerNW`, `cornerSW`, `cornerNE`, `cornerSE`, `center`, `fullscreen`, `maximize`, `minimize`, `expand`, `shrink`."
        ],
        "returns": [],
        "signature": "WinWin:moveAndResize(option)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WinWin:moveToScreen(direction)",
        "desc": "Move the focused window between all of the screens in the `direction`.",
        "doc": "Move the focused window between all of the screens in the `direction`.\n\nParameters:\n * direction - A string specifying the direction, valid strings are: `left`, `right`, `up`, `down`, `next`.",
        "examples": [],
        "file": "Source/WinWin.spoon/init.lua",
        "lineno": "145",
        "name": "moveToScreen",
        "notes": [],
        "parameters": [
          " * direction - A string specifying the direction, valid strings are: `left`, `right`, `up`, `down`, `next`."
        ],
        "returns": [],
        "signature": "WinWin:moveToScreen(direction)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WinWin:stepMove(direction)",
        "desc": "Move the focused window in the `direction` by on step. The step scale equals to the width/height of one gridpart.",
        "doc": "Move the focused window in the `direction` by on step. The step scale equals to the width/height of one gridpart.\n\nParameters:\n * direction - A string specifying the direction, valid strings are: `left`, `right`, `up`, `down`.",
        "examples": [],
        "file": "Source/WinWin.spoon/init.lua",
        "lineno": "25",
        "name": "stepMove",
        "notes": [],
        "parameters": [
          " * direction - A string specifying the direction, valid strings are: `left`, `right`, `up`, `down`."
        ],
        "returns": [],
        "signature": "WinWin:stepMove(direction)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WinWin:stepResize(direction)",
        "desc": "Resize the focused window in the `direction` by on step.",
        "doc": "Resize the focused window in the `direction` by on step.\n\nParameters:\n * direction - A string specifying the direction, valid strings are: `left`, `right`, `up`, `down`.",
        "examples": [],
        "file": "Source/WinWin.spoon/init.lua",
        "lineno": "55",
        "name": "stepResize",
        "notes": [],
        "parameters": [
          " * direction - A string specifying the direction, valid strings are: `left`, `right`, `up`, `down`."
        ],
        "returns": [],
        "signature": "WinWin:stepResize(direction)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WinWin:undo()",
        "desc": "Undo the last window manipulation. Only those \"moveAndResize\" manipulations can be undone.",
        "doc": "Undo the last window manipulation. Only those \"moveAndResize\" manipulations can be undone.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/WinWin.spoon/init.lua",
        "lineno": "173",
        "name": "undo",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WinWin:undo()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "WinWin",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WinWin.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WinWin.spoon.zip)",
    "submodules": [],
    "type": "Module"
  }
]