[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "BrewInfo:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for BrewInfo",
        "doc": "Binds hotkeys for BrewInfo\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show_brew_info - Show output of `brew info` using the selected text as package name\n  * open_brew_url - Open the homepage of the formula whose name is currently selected",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show_brew_info - Show output of `brew info` using the selected text as package name",
          "  * open_brew_url - Open the homepage of the formula whose name is currently selected"
        ],
        "signature": "BrewInfo:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:openBrewURL(pkg)",
        "desc": "Opens the homepage for Formula `pkg`",
        "doc": "Opens the homepage for Formula `pkg`\n\nParameters:\n * pkg - name of the package to query\n\nReturns:\n * The Spoon object",
        "name": "openBrewURL",
        "parameters": [
          " * pkg - name of the package to query"
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURL(pkg)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:openBrewURLCurSel()",
        "desc": "Display `brew info` using the selected text as the package name",
        "doc": "Display `brew info` using the selected text as the package name\n\nReturns:\n * The Spoon object",
        "name": "openBrewURLCurSel",
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURLCurSel()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfo(pkg)",
        "desc": "Displays an alert with the output of `brew info <pkg>`",
        "doc": "Displays an alert with the output of `brew info <pkg>`\n\nParameters:\n * pkg - name of the package to query\n\nReturns:\n * The Spoon object",
        "name": "showBrewInfo",
        "parameters": [
          " * pkg - name of the package to query"
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfo(pkg)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfoCurSel()",
        "desc": "Display `brew info` using the selected text as the package name",
        "doc": "Display `brew info` using the selected text as the package name\n\nReturns:\n * The Spoon object",
        "name": "showBrewInfoCurSel",
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfoCurSel()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "BrewInfo.brew_info_delay_sec",
        "desc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "doc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "name": "brew_info_delay_sec",
        "signature": "BrewInfo.brew_info_delay_sec",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo.brew_info_style",
        "desc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "doc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "name": "brew_info_style",
        "signature": "BrewInfo.brew_info_style",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Display pop-up with Homebrew Formula info, or open their URL",
    "doc": "Display pop-up with Homebrew Formula info, or open their URL\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip)\n\nYou can bind keys to automatically display the output of `brew\ninfo` of the currently-selected package name, or to open its\nhomepage. I use it to quickly explore new packages from the output\nof `brew update`.",
    "items": [
      {
        "def": "BrewInfo:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for BrewInfo",
        "doc": "Binds hotkeys for BrewInfo\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show_brew_info - Show output of `brew info` using the selected text as package name\n  * open_brew_url - Open the homepage of the formula whose name is currently selected",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show_brew_info - Show output of `brew info` using the selected text as package name",
          "  * open_brew_url - Open the homepage of the formula whose name is currently selected"
        ],
        "signature": "BrewInfo:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo.brew_info_delay_sec",
        "desc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "doc": "An integer specifying how long the alerts generated by BrewInfo will stay onscreen",
        "name": "brew_info_delay_sec",
        "signature": "BrewInfo.brew_info_delay_sec",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo.brew_info_style",
        "desc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "doc": "A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = \"Courier New\", textSize = 14, radius = 10 }`",
        "name": "brew_info_style",
        "signature": "BrewInfo.brew_info_style",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "BrewInfo:openBrewURL(pkg)",
        "desc": "Opens the homepage for Formula `pkg`",
        "doc": "Opens the homepage for Formula `pkg`\n\nParameters:\n * pkg - name of the package to query\n\nReturns:\n * The Spoon object",
        "name": "openBrewURL",
        "parameters": [
          " * pkg - name of the package to query"
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURL(pkg)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:openBrewURLCurSel()",
        "desc": "Display `brew info` using the selected text as the package name",
        "doc": "Display `brew info` using the selected text as the package name\n\nReturns:\n * The Spoon object",
        "name": "openBrewURLCurSel",
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:openBrewURLCurSel()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfo(pkg)",
        "desc": "Displays an alert with the output of `brew info <pkg>`",
        "doc": "Displays an alert with the output of `brew info <pkg>`\n\nParameters:\n * pkg - name of the package to query\n\nReturns:\n * The Spoon object",
        "name": "showBrewInfo",
        "parameters": [
          " * pkg - name of the package to query"
        ],
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfo(pkg)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "BrewInfo:showBrewInfoCurSel()",
        "desc": "Display `brew info` using the selected text as the package name",
        "doc": "Display `brew info` using the selected text as the package name\n\nReturns:\n * The Spoon object",
        "name": "showBrewInfoCurSel",
        "returns": [
          " * The Spoon object"
        ],
        "signature": "BrewInfo:showBrewInfoCurSel()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "BrewInfo",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip)\n\nYou can bind keys to automatically display the output of `brew\ninfo` of the currently-selected package name, or to open its\nhomepage. I use it to quickly explore new packages from the output\nof `brew update`.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Caffeine:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Caffeine",
        "doc": "Binds hotkeys for Caffeine\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic\n\nReturns:\n * The Caffeine object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:start()",
        "desc": "Starts Caffeine",
        "doc": "Starts Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:stop()",
        "desc": "Stops Caffeine",
        "doc": "Stops Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "name": "stop",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Prevent the screen from going to sleep",
    "doc": "Prevent the screen from going to sleep\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip)",
    "items": [
      {
        "def": "Caffeine:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Caffeine",
        "doc": "Binds hotkeys for Caffeine\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic\n\nReturns:\n * The Caffeine object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * toggle - This will toggle the state of display sleep prevention, and update the menubar graphic"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:start()",
        "desc": "Starts Caffeine",
        "doc": "Starts Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Caffeine:stop()",
        "desc": "Stops Caffeine",
        "doc": "Stops Caffeine\n\nParameters:\n * None\n\nReturns:\n * The Caffeine object",
        "name": "stop",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Caffeine object"
        ],
        "signature": "Caffeine:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Caffeine",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Caffeine.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "ColorPicker:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ColorPicker",
        "doc": "Binds hotkeys for ColorPicker\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * show - Show color picker menu",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:",
          "  * show - Show color picker menu"
        ],
        "signature": "ColorPicker:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ColorPicker.toggleColorSamples(tablename)",
        "desc": "Toggle display on the screen of a grid with all the colors in the given colortable",
        "doc": "Toggle display on the screen of a grid with all the colors in the given colortable\n\nParameters:\n * tablename - name of the colortable to display",
        "name": "toggleColorSamples",
        "parameters": [
          " * tablename - name of the colortable to display"
        ],
        "signature": "ColorPicker.toggleColorSamples(tablename)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "ColorPicker.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "ColorPicker.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ColorPicker.menubar_title",
        "desc": "Title to show in the menubar if `show_in_menubar` is true. Defaults to `\"\\u{1F308}\"`, which is the [Rainbow Emoji](http://emojipedia.org/rainbow/)",
        "doc": "Title to show in the menubar if `show_in_menubar` is true. Defaults to `\"\\u{1F308}\"`, which is the [Rainbow Emoji](http://emojipedia.org/rainbow/)",
        "name": "menubar_title",
        "signature": "ColorPicker.menubar_title",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ColorPicker.show_in_menubar",
        "desc": "If `true`, show an icon in the menubar to trigger the color picker",
        "doc": "If `true`, show an icon in the menubar to trigger the color picker",
        "name": "show_in_menubar",
        "signature": "ColorPicker.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Show a color sample/picker",
    "doc": "Show a color sample/picker\n\nClicking on any color will copy its name to the clipboard, cmd-click will copy its RGB code.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ColorPicker.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ColorPicker.spoon.zip)",
    "items": [
      {
        "def": "ColorPicker:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ColorPicker",
        "doc": "Binds hotkeys for ColorPicker\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * show - Show color picker menu",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:",
          "  * show - Show color picker menu"
        ],
        "signature": "ColorPicker:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ColorPicker.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "ColorPicker.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ColorPicker.menubar_title",
        "desc": "Title to show in the menubar if `show_in_menubar` is true. Defaults to `\"\\u{1F308}\"`, which is the [Rainbow Emoji](http://emojipedia.org/rainbow/)",
        "doc": "Title to show in the menubar if `show_in_menubar` is true. Defaults to `\"\\u{1F308}\"`, which is the [Rainbow Emoji](http://emojipedia.org/rainbow/)",
        "name": "menubar_title",
        "signature": "ColorPicker.menubar_title",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ColorPicker.show_in_menubar",
        "desc": "If `true`, show an icon in the menubar to trigger the color picker",
        "doc": "If `true`, show an icon in the menubar to trigger the color picker",
        "name": "show_in_menubar",
        "signature": "ColorPicker.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ColorPicker.toggleColorSamples(tablename)",
        "desc": "Toggle display on the screen of a grid with all the colors in the given colortable",
        "doc": "Toggle display on the screen of a grid with all the colors in the given colortable\n\nParameters:\n * tablename - name of the colortable to display",
        "name": "toggleColorSamples",
        "parameters": [
          " * tablename - name of the colortable to display"
        ],
        "signature": "ColorPicker.toggleColorSamples(tablename)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "ColorPicker",
    "stripped_doc": "\nClicking on any color will copy its name to the clipboard, cmd-click will copy its RGB code.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ColorPicker.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ColorPicker.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Emojis:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Emojis",
        "doc": "Binds hotkeys for Emojis\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the emoji chooser\n\nReturns:\n * The Emojis object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * toggle - This will toggle the emoji chooser"
        ],
        "returns": [
          " * The Emojis object"
        ],
        "signature": "Emojis:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Let users choose emojis by name/keyword",
    "doc": "Let users choose emojis by name/keyword",
    "items": [
      {
        "def": "Emojis:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Emojis",
        "doc": "Binds hotkeys for Emojis\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle - This will toggle the emoji chooser\n\nReturns:\n * The Emojis object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * toggle - This will toggle the emoji chooser"
        ],
        "returns": [
          " * The Emojis object"
        ],
        "signature": "Emojis:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Emojis",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "FadeLogo:delete()",
        "desc": "Hide and delete the canvas",
        "doc": "Hide and delete the canvas",
        "name": "delete",
        "signature": "FadeLogo:delete()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo:hide()",
        "desc": "Hide the image without zoom, fading it out over `fade_out_time` seconds",
        "doc": "Hide the image without zoom, fading it out over `fade_out_time` seconds",
        "name": "hide",
        "signature": "FadeLogo:hide()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo:show()",
        "desc": "Display the image, fading it in over `fade_in_time` seconds",
        "doc": "Display the image, fading it in over `fade_in_time` seconds",
        "name": "show",
        "signature": "FadeLogo:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo:start()",
        "desc": "Show the image, wait `run_time` seconds, and then zoom-and-fade it out.",
        "doc": "Show the image, wait `run_time` seconds, and then zoom-and-fade it out.",
        "name": "start",
        "signature": "FadeLogo:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo:zoom_and_fade()",
        "desc": "Zoom-and-fade the image over `fade_out_time` seconds",
        "doc": "Zoom-and-fade the image over `fade_out_time` seconds",
        "name": "zoom_and_fade",
        "signature": "FadeLogo:zoom_and_fade()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "FadeLogo.fade_in_time",
        "desc": "Number of seconds over which to fade in the image. Defaults to 0.3.",
        "doc": "Number of seconds over which to fade in the image. Defaults to 0.3.",
        "name": "fade_in_time",
        "signature": "FadeLogo.fade_in_time",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.fade_out_time",
        "desc": "Number of seconds over which to fade out the image. Defaults to 0.5.",
        "doc": "Number of seconds over which to fade out the image. Defaults to 0.5.",
        "name": "fade_out_time",
        "signature": "FadeLogo.fade_out_time",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.image",
        "desc": "Image to display. Must be an `hs.image` object. Defaults to `hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon)` (the Hammerspoon app icon)",
        "doc": "Image to display. Must be an `hs.image` object. Defaults to `hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon)` (the Hammerspoon app icon)",
        "name": "image",
        "signature": "FadeLogo.image",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.image_alpha",
        "desc": "Initial transparency of the image. Defaults to 1.0.",
        "doc": "Initial transparency of the image. Defaults to 1.0.",
        "name": "image_alpha",
        "signature": "FadeLogo.image_alpha",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.image_size",
        "desc": "`hs.geometry` object specifying the initial size of the image to display in the center of the screen. The image object will be resizes proportionally to fit in this size. Defaults to `hs.geometry.size(w=200, h=200)`",
        "doc": "`hs.geometry` object specifying the initial size of the image to display in the center of the screen. The image object will be resizes proportionally to fit in this size. Defaults to `hs.geometry.size(w=200, h=200)`",
        "name": "image_size",
        "signature": "FadeLogo.image_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "FadeLogo.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.run_time",
        "desc": "Number of seconds to leave the image on the screen when `start()` is called.",
        "doc": "Number of seconds to leave the image on the screen when `start()` is called.",
        "name": "run_time",
        "signature": "FadeLogo.run_time",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.zoom",
        "desc": "Do zoom-and-fade if `true`, otherwise do a regular fade",
        "doc": "Do zoom-and-fade if `true`, otherwise do a regular fade",
        "name": "zoom",
        "signature": "FadeLogo.zoom",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.zoom_scale_factor",
        "desc": "Factor by which to scale the image at every iteration during the zoom-and-fade. Defaults to 1.1.",
        "doc": "Factor by which to scale the image at every iteration during the zoom-and-fade. Defaults to 1.1.",
        "name": "zoom_scale_factor",
        "signature": "FadeLogo.zoom_scale_factor",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.zoom_scale_timer",
        "desc": "Seconds between the zooming iterations",
        "doc": "Seconds between the zooming iterations",
        "name": "zoom_scale_timer",
        "signature": "FadeLogo.zoom_scale_timer",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Show a fading-and-zooming image in the center of the screen",
    "doc": "Show a fading-and-zooming image in the center of the screen\n\nBy default the Hammerspoon logo is shown. Typical use is to show it as an indicator when your configuration finishes loading, by adding the following to the bottom of your `~/.hammerspoon/init.lua` file:\n```\n  hs.loadSpoon('FadeLogo'):start()\n```\nWhich looks like this: http://imgur.com/a/TbZOl\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/FadeLogo.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/FadeLogo.spoon.zip)",
    "items": [
      {
        "def": "FadeLogo:delete()",
        "desc": "Hide and delete the canvas",
        "doc": "Hide and delete the canvas",
        "name": "delete",
        "signature": "FadeLogo:delete()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo.fade_in_time",
        "desc": "Number of seconds over which to fade in the image. Defaults to 0.3.",
        "doc": "Number of seconds over which to fade in the image. Defaults to 0.3.",
        "name": "fade_in_time",
        "signature": "FadeLogo.fade_in_time",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.fade_out_time",
        "desc": "Number of seconds over which to fade out the image. Defaults to 0.5.",
        "doc": "Number of seconds over which to fade out the image. Defaults to 0.5.",
        "name": "fade_out_time",
        "signature": "FadeLogo.fade_out_time",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo:hide()",
        "desc": "Hide the image without zoom, fading it out over `fade_out_time` seconds",
        "doc": "Hide the image without zoom, fading it out over `fade_out_time` seconds",
        "name": "hide",
        "signature": "FadeLogo:hide()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo.image",
        "desc": "Image to display. Must be an `hs.image` object. Defaults to `hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon)` (the Hammerspoon app icon)",
        "doc": "Image to display. Must be an `hs.image` object. Defaults to `hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon)` (the Hammerspoon app icon)",
        "name": "image",
        "signature": "FadeLogo.image",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.image_alpha",
        "desc": "Initial transparency of the image. Defaults to 1.0.",
        "doc": "Initial transparency of the image. Defaults to 1.0.",
        "name": "image_alpha",
        "signature": "FadeLogo.image_alpha",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.image_size",
        "desc": "`hs.geometry` object specifying the initial size of the image to display in the center of the screen. The image object will be resizes proportionally to fit in this size. Defaults to `hs.geometry.size(w=200, h=200)`",
        "doc": "`hs.geometry` object specifying the initial size of the image to display in the center of the screen. The image object will be resizes proportionally to fit in this size. Defaults to `hs.geometry.size(w=200, h=200)`",
        "name": "image_size",
        "signature": "FadeLogo.image_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "FadeLogo.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.run_time",
        "desc": "Number of seconds to leave the image on the screen when `start()` is called.",
        "doc": "Number of seconds to leave the image on the screen when `start()` is called.",
        "name": "run_time",
        "signature": "FadeLogo.run_time",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo:show()",
        "desc": "Display the image, fading it in over `fade_in_time` seconds",
        "doc": "Display the image, fading it in over `fade_in_time` seconds",
        "name": "show",
        "signature": "FadeLogo:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo:start()",
        "desc": "Show the image, wait `run_time` seconds, and then zoom-and-fade it out.",
        "doc": "Show the image, wait `run_time` seconds, and then zoom-and-fade it out.",
        "name": "start",
        "signature": "FadeLogo:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo.zoom",
        "desc": "Do zoom-and-fade if `true`, otherwise do a regular fade",
        "doc": "Do zoom-and-fade if `true`, otherwise do a regular fade",
        "name": "zoom",
        "signature": "FadeLogo.zoom",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo:zoom_and_fade()",
        "desc": "Zoom-and-fade the image over `fade_out_time` seconds",
        "doc": "Zoom-and-fade the image over `fade_out_time` seconds",
        "name": "zoom_and_fade",
        "signature": "FadeLogo:zoom_and_fade()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "FadeLogo.zoom_scale_factor",
        "desc": "Factor by which to scale the image at every iteration during the zoom-and-fade. Defaults to 1.1.",
        "doc": "Factor by which to scale the image at every iteration during the zoom-and-fade. Defaults to 1.1.",
        "name": "zoom_scale_factor",
        "signature": "FadeLogo.zoom_scale_factor",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "FadeLogo.zoom_scale_timer",
        "desc": "Seconds between the zooming iterations",
        "doc": "Seconds between the zooming iterations",
        "name": "zoom_scale_timer",
        "signature": "FadeLogo.zoom_scale_timer",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "FadeLogo",
    "stripped_doc": "\nBy default the Hammerspoon logo is shown. Typical use is to show it as an indicator when your configuration finishes loading, by adding the following to the bottom of your `~/.hammerspoon/init.lua` file:\n```\n  hs.loadSpoon('FadeLogo'):start()\n```\nWhich looks like this: http://imgur.com/a/TbZOl\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/FadeLogo.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/FadeLogo.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "HeadphoneAutoPause:audiodevwatch(dev_uid, event_name)",
        "desc": "Callback function to use as an audio device watcher, to pause/unpause the application on headphones plugged/unplugged",
        "doc": "Callback function to use as an audio device watcher, to pause/unpause the application on headphones plugged/unplugged",
        "name": "audiodevwatch",
        "signature": "HeadphoneAutoPause:audiodevwatch(dev_uid, event_name)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HeadphoneAutoPause.defaultControlFns(app)",
        "desc": "Generate the most common set of application control definition.",
        "doc": "Generate the most common set of application control definition.\n\nParameters:\n * app - name of the application, with its correct letter casing (i.e. \"iTunes\"). The name as provided will be used to find the running application, and its lowercase version will be used to find the corresponding `hs.*` module.\n\nReturns:\n * A table in the correct format for `HeadphoneAutoPause.controlfns`, using the lower-case value of `app` as the module name (for example, if app = \"iTunes\", the module loaded will be `hs.itunes`, and assuming the functions `isPlaying()`, `play()` and `pause()` exist in that module.",
        "name": "defaultControlFns",
        "parameters": [
          " * app - name of the application, with its correct letter casing (i.e. \"iTunes\"). The name as provided will be used to find the running application, and its lowercase version will be used to find the corresponding `hs.*` module."
        ],
        "returns": [
          " * A table in the correct format for `HeadphoneAutoPause.controlfns`, using the lower-case value of `app` as the module name (for example, if app = \"iTunes\", the module loaded will be `hs.itunes`, and assuming the functions `isPlaying()`, `play()` and `pause()` exist in that module."
        ],
        "signature": "HeadphoneAutoPause.defaultControlFns(app)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HeadphoneAutoPause:start()",
        "desc": "Start headphone detection on all audio devices that support it",
        "doc": "Start headphone detection on all audio devices that support it",
        "name": "start",
        "signature": "HeadphoneAutoPause:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HeadphoneAutoPause:stop()",
        "desc": "Stop headphone detection",
        "doc": "Stop headphone detection",
        "name": "stop",
        "signature": "HeadphoneAutoPause:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "HeadphoneAutoPause.control",
        "desc": "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause/unpause that application in response to the headphone being plugged/unplugged. The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:",
        "doc": "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause/unpause that application in response to the headphone being plugged/unplugged. The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:\n```\n{\n   itunes = true,\n   spotify = true,\n   deezer = true,\n   vox = false -- Vox has built-in headphone detection support\n}\n```",
        "name": "control",
        "signature": "HeadphoneAutoPause.control",
        "stripped_doc": "```\n{\n   itunes = true,\n   spotify = true,\n   deezer = true,\n   vox = false -- Vox has built-in headphone detection support\n}\n```",
        "type": "Variable"
      },
      {
        "def": "HeadphoneAutoPause.controlfns",
        "desc": "Table containing control functions for each application to control.",
        "doc": "Table containing control functions for each application to control.\nThe keys must correspond to the values in `HeadphoneAutoPause.control`, and the value is a table with the following elements:\n * `appname` - application name (case-sensitive, as the application appears to the system)\n * `isPlaying` - function that returns a true value if the application is playing\n * `play` - function that starts playback in the application\n * `pause` - function that pauses playback in the application\n\nThe default value includes definitions for iTunes, Spotify, Deezer and Vox, using the corresponding functions from `hs.itunes`, `hs.spotify`, `hs.deezer` and `hs.vox`, respectively.",
        "name": "controlfns",
        "signature": "HeadphoneAutoPause.controlfns",
        "stripped_doc": "The keys must correspond to the values in `HeadphoneAutoPause.control`, and the value is a table with the following elements:\n * `appname` - application name (case-sensitive, as the application appears to the system)\n * `isPlaying` - function that returns a true value if the application is playing\n * `play` - function that starts playback in the application\n * `pause` - function that pauses playback in the application\nThe default value includes definitions for iTunes, Spotify, Deezer and Vox, using the corresponding functions from `hs.itunes`, `hs.spotify`, `hs.deezer` and `hs.vox`, respectively.",
        "type": "Variable"
      },
      {
        "def": "HeadphoneAutoPause.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "HeadphoneAutoPause.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Play/pause music players when headphones are connected/disconnected",
    "doc": "Play/pause music players when headphones are connected/disconnected\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HeadphoneAutoPause.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HeadphoneAutoPause.spoon.zip)",
    "items": [
      {
        "def": "HeadphoneAutoPause:audiodevwatch(dev_uid, event_name)",
        "desc": "Callback function to use as an audio device watcher, to pause/unpause the application on headphones plugged/unplugged",
        "doc": "Callback function to use as an audio device watcher, to pause/unpause the application on headphones plugged/unplugged",
        "name": "audiodevwatch",
        "signature": "HeadphoneAutoPause:audiodevwatch(dev_uid, event_name)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HeadphoneAutoPause.control",
        "desc": "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause/unpause that application in response to the headphone being plugged/unplugged. The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:",
        "doc": "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause/unpause that application in response to the headphone being plugged/unplugged. The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:\n```\n{\n   itunes = true,\n   spotify = true,\n   deezer = true,\n   vox = false -- Vox has built-in headphone detection support\n}\n```",
        "name": "control",
        "signature": "HeadphoneAutoPause.control",
        "stripped_doc": "```\n{\n   itunes = true,\n   spotify = true,\n   deezer = true,\n   vox = false -- Vox has built-in headphone detection support\n}\n```",
        "type": "Variable"
      },
      {
        "def": "HeadphoneAutoPause.controlfns",
        "desc": "Table containing control functions for each application to control.",
        "doc": "Table containing control functions for each application to control.\nThe keys must correspond to the values in `HeadphoneAutoPause.control`, and the value is a table with the following elements:\n * `appname` - application name (case-sensitive, as the application appears to the system)\n * `isPlaying` - function that returns a true value if the application is playing\n * `play` - function that starts playback in the application\n * `pause` - function that pauses playback in the application\n\nThe default value includes definitions for iTunes, Spotify, Deezer and Vox, using the corresponding functions from `hs.itunes`, `hs.spotify`, `hs.deezer` and `hs.vox`, respectively.",
        "name": "controlfns",
        "signature": "HeadphoneAutoPause.controlfns",
        "stripped_doc": "The keys must correspond to the values in `HeadphoneAutoPause.control`, and the value is a table with the following elements:\n * `appname` - application name (case-sensitive, as the application appears to the system)\n * `isPlaying` - function that returns a true value if the application is playing\n * `play` - function that starts playback in the application\n * `pause` - function that pauses playback in the application\nThe default value includes definitions for iTunes, Spotify, Deezer and Vox, using the corresponding functions from `hs.itunes`, `hs.spotify`, `hs.deezer` and `hs.vox`, respectively.",
        "type": "Variable"
      },
      {
        "def": "HeadphoneAutoPause.defaultControlFns(app)",
        "desc": "Generate the most common set of application control definition.",
        "doc": "Generate the most common set of application control definition.\n\nParameters:\n * app - name of the application, with its correct letter casing (i.e. \"iTunes\"). The name as provided will be used to find the running application, and its lowercase version will be used to find the corresponding `hs.*` module.\n\nReturns:\n * A table in the correct format for `HeadphoneAutoPause.controlfns`, using the lower-case value of `app` as the module name (for example, if app = \"iTunes\", the module loaded will be `hs.itunes`, and assuming the functions `isPlaying()`, `play()` and `pause()` exist in that module.",
        "name": "defaultControlFns",
        "parameters": [
          " * app - name of the application, with its correct letter casing (i.e. \"iTunes\"). The name as provided will be used to find the running application, and its lowercase version will be used to find the corresponding `hs.*` module."
        ],
        "returns": [
          " * A table in the correct format for `HeadphoneAutoPause.controlfns`, using the lower-case value of `app` as the module name (for example, if app = \"iTunes\", the module loaded will be `hs.itunes`, and assuming the functions `isPlaying()`, `play()` and `pause()` exist in that module."
        ],
        "signature": "HeadphoneAutoPause.defaultControlFns(app)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HeadphoneAutoPause.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "HeadphoneAutoPause.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "HeadphoneAutoPause:start()",
        "desc": "Start headphone detection on all audio devices that support it",
        "doc": "Start headphone detection on all audio devices that support it",
        "name": "start",
        "signature": "HeadphoneAutoPause:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HeadphoneAutoPause:stop()",
        "desc": "Stop headphone detection",
        "doc": "Stop headphone detection",
        "name": "stop",
        "signature": "HeadphoneAutoPause:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "HeadphoneAutoPause",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HeadphoneAutoPause.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/HeadphoneAutoPause.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MenubarFlag:drawIndicators(src)",
        "desc": "Draw the indicators corresponding to the given layout name",
        "doc": "Draw the indicators corresponding to the given layout name\n\nParameters:\n * src - name of the layout to draw. If the given element exists in `MenubarFlag.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen.\n\nReturns:\n * The MenubarFlag object",
        "name": "drawIndicators",
        "parameters": [
          " * src - name of the layout to draw. If the given element exists in `MenubarFlag.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen."
        ],
        "returns": [
          " * The MenubarFlag object"
        ],
        "signature": "MenubarFlag:drawIndicators(src)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:getLayoutAndDrawindicators",
        "desc": "Draw indicators for the current keyboard method or layout",
        "doc": "Draw indicators for the current keyboard method or layout\n\nParameters:\n * None\n\nReturns:\n * The MenubarFlag object",
        "name": "getLayoutAndDrawindicators",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MenubarFlag object"
        ],
        "signature": "MenubarFlag:getLayoutAndDrawindicators",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:start()",
        "desc": "Start the keyboard layout watcher to draw the menubar indicators.",
        "doc": "Start the keyboard layout watcher to draw the menubar indicators.",
        "name": "start",
        "signature": "MenubarFlag:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:stop()",
        "desc": "Remove indicators and stop the keyboard layout watcher",
        "doc": "Remove indicators and stop the keyboard layout watcher",
        "name": "stop",
        "signature": "MenubarFlag:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "MenubarFlag.allScreens",
        "desc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "doc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "name": "allScreens",
        "signature": "MenubarFlag.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.colors",
        "desc": "Table that contains the configuration of indicator colors",
        "doc": "Table that contains the configuration of indicator colors\n\nThe table below indicates the colors to use for a given keyboard\nlayout. The index is the name of the layout as it appears in the\ninput source menu. The value of each indicator is a table made of\nan arbitrary number of segments, which will be distributed evenly\nacross the width of the screen. Each segment must be a valid\n`hs.drawing.color` specification (most commonly, you should just\nuse the named colors from within the tables). If a layout is not\nfound, then the indicators are removed when that layout is active.\n\nIndicator specs can be static flag-like:\n```\n  Spanish = {col.green, col.white, col.red},\n  German = {col.black, col.red, col.yellow},\n```\nor complex, programmatically-generated:\n```\n[\"U.S.\"] = (\n   function() res={} \n      for i = 0,10,1 do\n         table.insert(res, col.blue)\n         table.insert(res, col.white)\n         table.insert(res, col.red)\n      end\n      return res\n   end)()\n```\nor solid colors:\n```\n  Spanish = {col.red},\n  German = {col.yellow},\n```\nContributions of indicator specs are welcome!",
        "name": "colors",
        "signature": "MenubarFlag.colors",
        "stripped_doc": "The table below indicates the colors to use for a given keyboard\nlayout. The index is the name of the layout as it appears in the\ninput source menu. The value of each indicator is a table made of\nan arbitrary number of segments, which will be distributed evenly\nacross the width of the screen. Each segment must be a valid\n`hs.drawing.color` specification (most commonly, you should just\nuse the named colors from within the tables). If a layout is not\nfound, then the indicators are removed when that layout is active.\nIndicator specs can be static flag-like:\n```\n  Spanish = {col.green, col.white, col.red},\n  German = {col.black, col.red, col.yellow},\n```\nor complex, programmatically-generated:\n```\n[\"U.S.\"] = (\n   function() res={} \n      for i = 0,10,1 do\n         table.insert(res, col.blue)\n         table.insert(res, col.white)\n         table.insert(res, col.red)\n      end\n      return res\n   end)()\n```\nor solid colors:\n```\n  Spanish = {col.red},\n  German = {col.yellow},\n```\nContributions of indicator specs are welcome!",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorAlpha",
        "desc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "doc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "name": "indicatorAlpha",
        "signature": "MenubarFlag.indicatorAlpha",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorHeight",
        "desc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "doc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "name": "indicatorHeight",
        "signature": "MenubarFlag.indicatorHeight",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorInAllSpaces",
        "desc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "doc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "name": "indicatorInAllSpaces",
        "signature": "MenubarFlag.indicatorInAllSpaces",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Color the menubar according to the current keyboard layout",
    "doc": "Color the menubar according to the current keyboard layout\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag.spoon.zip)\n\nFunctionality inspired by [ShowyEdge](https://pqrs.org/osx/ShowyEdge/index.html.en)",
    "items": [
      {
        "def": "MenubarFlag.allScreens",
        "desc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "doc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "name": "allScreens",
        "signature": "MenubarFlag.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.colors",
        "desc": "Table that contains the configuration of indicator colors",
        "doc": "Table that contains the configuration of indicator colors\n\nThe table below indicates the colors to use for a given keyboard\nlayout. The index is the name of the layout as it appears in the\ninput source menu. The value of each indicator is a table made of\nan arbitrary number of segments, which will be distributed evenly\nacross the width of the screen. Each segment must be a valid\n`hs.drawing.color` specification (most commonly, you should just\nuse the named colors from within the tables). If a layout is not\nfound, then the indicators are removed when that layout is active.\n\nIndicator specs can be static flag-like:\n```\n  Spanish = {col.green, col.white, col.red},\n  German = {col.black, col.red, col.yellow},\n```\nor complex, programmatically-generated:\n```\n[\"U.S.\"] = (\n   function() res={} \n      for i = 0,10,1 do\n         table.insert(res, col.blue)\n         table.insert(res, col.white)\n         table.insert(res, col.red)\n      end\n      return res\n   end)()\n```\nor solid colors:\n```\n  Spanish = {col.red},\n  German = {col.yellow},\n```\nContributions of indicator specs are welcome!",
        "name": "colors",
        "signature": "MenubarFlag.colors",
        "stripped_doc": "The table below indicates the colors to use for a given keyboard\nlayout. The index is the name of the layout as it appears in the\ninput source menu. The value of each indicator is a table made of\nan arbitrary number of segments, which will be distributed evenly\nacross the width of the screen. Each segment must be a valid\n`hs.drawing.color` specification (most commonly, you should just\nuse the named colors from within the tables). If a layout is not\nfound, then the indicators are removed when that layout is active.\nIndicator specs can be static flag-like:\n```\n  Spanish = {col.green, col.white, col.red},\n  German = {col.black, col.red, col.yellow},\n```\nor complex, programmatically-generated:\n```\n[\"U.S.\"] = (\n   function() res={} \n      for i = 0,10,1 do\n         table.insert(res, col.blue)\n         table.insert(res, col.white)\n         table.insert(res, col.red)\n      end\n      return res\n   end)()\n```\nor solid colors:\n```\n  Spanish = {col.red},\n  German = {col.yellow},\n```\nContributions of indicator specs are welcome!",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag:drawIndicators(src)",
        "desc": "Draw the indicators corresponding to the given layout name",
        "doc": "Draw the indicators corresponding to the given layout name\n\nParameters:\n * src - name of the layout to draw. If the given element exists in `MenubarFlag.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen.\n\nReturns:\n * The MenubarFlag object",
        "name": "drawIndicators",
        "parameters": [
          " * src - name of the layout to draw. If the given element exists in `MenubarFlag.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen."
        ],
        "returns": [
          " * The MenubarFlag object"
        ],
        "signature": "MenubarFlag:drawIndicators(src)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:getLayoutAndDrawindicators",
        "desc": "Draw indicators for the current keyboard method or layout",
        "doc": "Draw indicators for the current keyboard method or layout\n\nParameters:\n * None\n\nReturns:\n * The MenubarFlag object",
        "name": "getLayoutAndDrawindicators",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MenubarFlag object"
        ],
        "signature": "MenubarFlag:getLayoutAndDrawindicators",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag.indicatorAlpha",
        "desc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "doc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "name": "indicatorAlpha",
        "signature": "MenubarFlag.indicatorAlpha",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorHeight",
        "desc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "doc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "name": "indicatorHeight",
        "signature": "MenubarFlag.indicatorHeight",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorInAllSpaces",
        "desc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "doc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "name": "indicatorInAllSpaces",
        "signature": "MenubarFlag.indicatorInAllSpaces",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag:start()",
        "desc": "Start the keyboard layout watcher to draw the menubar indicators.",
        "doc": "Start the keyboard layout watcher to draw the menubar indicators.",
        "name": "start",
        "signature": "MenubarFlag:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:stop()",
        "desc": "Remove indicators and stop the keyboard layout watcher",
        "doc": "Remove indicators and stop the keyboard layout watcher",
        "name": "stop",
        "signature": "MenubarFlag:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "MenubarFlag",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag.spoon.zip)\n\nFunctionality inspired by [ShowyEdge](https://pqrs.org/osx/ShowyEdge/index.html.en)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MouseCircle:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for MouseCircle",
        "doc": "Binds hotkeys for MouseCircle\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will cause the mouse circle to be drawn",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show - This will cause the mouse circle to be drawn"
        ],
        "signature": "MouseCircle:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseCircle:show()",
        "desc": "Draws a circle around the mouse",
        "doc": "Draws a circle around the mouse\n\nParameters:\n * None\n\nReturns:\n * None",
        "name": "show",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "MouseCircle:show()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "MouseCircle.color",
        "desc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "doc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "name": "color",
        "signature": "MouseCircle.color",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Draws a circle around the mouse pointer when a hotkey is pressed",
    "doc": "Draws a circle around the mouse pointer when a hotkey is pressed\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip)",
    "items": [
      {
        "def": "MouseCircle:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for MouseCircle",
        "doc": "Binds hotkeys for MouseCircle\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will cause the mouse circle to be drawn",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show - This will cause the mouse circle to be drawn"
        ],
        "signature": "MouseCircle:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MouseCircle.color",
        "desc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "doc": "An `hs.drawing.color` table defining the colour of the circle. Defaults to red.",
        "name": "color",
        "signature": "MouseCircle.color",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MouseCircle:show()",
        "desc": "Draws a circle around the mouse",
        "doc": "Draws a circle around the mouse\n\nParameters:\n * None\n\nReturns:\n * None",
        "name": "show",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "MouseCircle:show()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "MouseCircle",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MouseCircle.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "RoundedCorners:start()",
        "desc": "Starts RoundedCorners",
        "doc": "Starts RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly",
        "name": "start",
        "notes": [
          " * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "RoundedCorners:stop()",
        "desc": "Stops RoundedCorners",
        "doc": "Stops RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts",
        "name": "stop",
        "notes": [
          " * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "RoundedCorners.allScreens",
        "desc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "doc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "name": "allScreens",
        "signature": "RoundedCorners.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.level",
        "desc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "doc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "name": "level",
        "signature": "RoundedCorners.level",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.radius",
        "desc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "doc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "name": "radius",
        "signature": "RoundedCorners.radius",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Give your screens rounded corners",
    "doc": "Give your screens rounded corners\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip)",
    "items": [
      {
        "def": "RoundedCorners.allScreens",
        "desc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "doc": "Controls whether corners are drawn on all screens or just the primary screen. Defaults to true",
        "name": "allScreens",
        "signature": "RoundedCorners.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.level",
        "desc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "doc": "Controls which level of the screens the corners are drawn at. See `hs.canvas.windowLevels` for more information. Defaults to `screenSaver + 1`",
        "name": "level",
        "signature": "RoundedCorners.level",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners.radius",
        "desc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "doc": "Controls the radius of the rounded corners, in points. Defaults to 6",
        "name": "radius",
        "signature": "RoundedCorners.radius",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "RoundedCorners:start()",
        "desc": "Starts RoundedCorners",
        "doc": "Starts RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly",
        "name": "start",
        "notes": [
          " * This will draw the rounded screen corners and start watching for changes in screen sizes/layouts, reacting accordingly"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "RoundedCorners:stop()",
        "desc": "Stops RoundedCorners",
        "doc": "Stops RoundedCorners\n\nParameters:\n * None\n\nReturns:\n * The RoundedCorners object\n\nNotes:\n * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts",
        "name": "stop",
        "notes": [
          " * This will remove all rounded screen corners and stop watching for changes in screen sizes/layouts"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The RoundedCorners object"
        ],
        "signature": "RoundedCorners:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "RoundedCorners",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/RoundedCorners.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Seal:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Seal",
        "doc": "Binds hotkeys for Seal\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will cause Seal's UI to be shown\n\nReturns:\n * The Seal object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show - This will cause Seal's UI to be shown"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:loadPluginFromFile(plugin_name, file)",
        "desc": "Loads a plugin from a given file",
        "doc": "Loads a plugin from a given file\n\nParameters:\n * plugin_name - the name of the plugin, without \"seal_\" at the beginning or \".lua\" at the end\n * file - the file where the plugin code is stored.\n\nReturns:\n * The Seal object if the plugin was successfully loaded, `nil` otherwise\n\nNotes:\n * You should normally use `Seal:loadPlugins()`. This method allows you to load plugins\n   from non-standard locations and is mostly a development interface.\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "name": "loadPluginFromFile",
        "notes": [
          " * You should normally use `Seal:loadPlugins()`. This method allows you to load plugins",
          "   from non-standard locations and is mostly a development interface.",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * plugin_name - the name of the plugin, without \"seal_\" at the beginning or \".lua\" at the end",
          " * file - the file where the plugin code is stored."
        ],
        "returns": [
          " * The Seal object if the plugin was successfully loaded, `nil` otherwise"
        ],
        "signature": "Seal:loadPluginFromFile(plugin_name, file)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:loadPlugins(plugins)",
        "desc": "Loads a list of Seal plugins",
        "doc": "Loads a list of Seal plugins\n\nParameters:\n * plugins - A list containing the names of plugins to load\n\nReturns:\n * The Seal object\n\nNotes:\n * The plugins live inside the Seal.spoon directory\n * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "name": "loadPlugins",
        "notes": [
          " * The plugins live inside the Seal.spoon directory",
          " * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * plugins - A list containing the names of plugins to load"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:loadPlugins(plugins)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:refreshAllCommands()",
        "desc": "Refresh the list of commands provided by all the currently loaded plugins.",
        "doc": "Refresh the list of commands provided by all the currently loaded plugins.\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands.",
        "name": "refreshAllCommands",
        "notes": [
          " * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:refreshAllCommands()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:refreshCommandsForPlugin(plugin_name)",
        "desc": "Refresh the list of commands provided by the given plugin.",
        "doc": "Refresh the list of commands provided by the given plugin.\n\nParameters:\n * plugin_name - the name of the plugin. Should be the name as passed to `loadPlugins()` or `loadPluginFromFile`.\n\nReturns:\n * The Seal object\n\nNotes:\n * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands.",
        "name": "refreshCommandsForPlugin",
        "notes": [
          " * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands."
        ],
        "parameters": [
          " * plugin_name - the name of the plugin. Should be the name as passed to `loadPlugins()` or `loadPluginFromFile`."
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:refreshCommandsForPlugin(plugin_name)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:show()",
        "desc": "Shows the Seal UI",
        "doc": "Shows the Seal UI\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This may be useful if you wish to show Seal in response to something other than its hotkey",
        "name": "show",
        "notes": [
          " * This may be useful if you wish to show Seal in response to something other than its hotkey"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:start()",
        "desc": "Starts Seal",
        "doc": "Starts Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:stop()",
        "desc": "Stops Seal",
        "doc": "Stops Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)",
        "name": "stop",
        "notes": [
          " * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Seal.plugins.safari_bookmarks.always_open_with_safari",
        "desc": "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `/usr/bin/open` command.",
        "doc": "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `/usr/bin/open` command.",
        "name": "always_open_with_safari",
        "signature": "Seal.plugins.safari_bookmarks.always_open_with_safari",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Seal.plugin_search_paths",
        "desc": "List of directories where Seal will look for plugins. Defaults to `~/.hammerspoon/seal_plugins/` and the Seal Spoon directory.",
        "doc": "List of directories where Seal will look for plugins. Defaults to `~/.hammerspoon/seal_plugins/` and the Seal Spoon directory.",
        "name": "plugin_search_paths",
        "signature": "Seal.plugin_search_paths",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Pluggable launch bar",
    "doc": "Pluggable launch bar\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip)",
    "items": [
      {
        "def": "Seal.plugins.safari_bookmarks.always_open_with_safari",
        "desc": "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `/usr/bin/open` command.",
        "doc": "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `/usr/bin/open` command.",
        "name": "always_open_with_safari",
        "signature": "Seal.plugins.safari_bookmarks.always_open_with_safari",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Seal:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for Seal",
        "doc": "Binds hotkeys for Seal\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * show - This will cause Seal's UI to be shown\n\nReturns:\n * The Seal object",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * show - This will cause Seal's UI to be shown"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:loadPluginFromFile(plugin_name, file)",
        "desc": "Loads a plugin from a given file",
        "doc": "Loads a plugin from a given file\n\nParameters:\n * plugin_name - the name of the plugin, without \"seal_\" at the beginning or \".lua\" at the end\n * file - the file where the plugin code is stored.\n\nReturns:\n * The Seal object if the plugin was successfully loaded, `nil` otherwise\n\nNotes:\n * You should normally use `Seal:loadPlugins()`. This method allows you to load plugins\n   from non-standard locations and is mostly a development interface.\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "name": "loadPluginFromFile",
        "notes": [
          " * You should normally use `Seal:loadPlugins()`. This method allows you to load plugins",
          "   from non-standard locations and is mostly a development interface.",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * plugin_name - the name of the plugin, without \"seal_\" at the beginning or \".lua\" at the end",
          " * file - the file where the plugin code is stored."
        ],
        "returns": [
          " * The Seal object if the plugin was successfully loaded, `nil` otherwise"
        ],
        "signature": "Seal:loadPluginFromFile(plugin_name, file)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:loadPlugins(plugins)",
        "desc": "Loads a list of Seal plugins",
        "doc": "Loads a list of Seal plugins\n\nParameters:\n * plugins - A list containing the names of plugins to load\n\nReturns:\n * The Seal object\n\nNotes:\n * The plugins live inside the Seal.spoon directory\n * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "name": "loadPlugins",
        "notes": [
          " * The plugins live inside the Seal.spoon directory",
          " * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * plugins - A list containing the names of plugins to load"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:loadPlugins(plugins)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal.plugin_search_paths",
        "desc": "List of directories where Seal will look for plugins. Defaults to `~/.hammerspoon/seal_plugins/` and the Seal Spoon directory.",
        "doc": "List of directories where Seal will look for plugins. Defaults to `~/.hammerspoon/seal_plugins/` and the Seal Spoon directory.",
        "name": "plugin_search_paths",
        "signature": "Seal.plugin_search_paths",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Seal:refreshAllCommands()",
        "desc": "Refresh the list of commands provided by all the currently loaded plugins.",
        "doc": "Refresh the list of commands provided by all the currently loaded plugins.\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands.",
        "name": "refreshAllCommands",
        "notes": [
          " * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:refreshAllCommands()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:refreshCommandsForPlugin(plugin_name)",
        "desc": "Refresh the list of commands provided by the given plugin.",
        "doc": "Refresh the list of commands provided by the given plugin.\n\nParameters:\n * plugin_name - the name of the plugin. Should be the name as passed to `loadPlugins()` or `loadPluginFromFile`.\n\nReturns:\n * The Seal object\n\nNotes:\n * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands.",
        "name": "refreshCommandsForPlugin",
        "notes": [
          " * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands."
        ],
        "parameters": [
          " * plugin_name - the name of the plugin. Should be the name as passed to `loadPlugins()` or `loadPluginFromFile`."
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:refreshCommandsForPlugin(plugin_name)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:show()",
        "desc": "Shows the Seal UI",
        "doc": "Shows the Seal UI\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This may be useful if you wish to show Seal in response to something other than its hotkey",
        "name": "show",
        "notes": [
          " * This may be useful if you wish to show Seal in response to something other than its hotkey"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Seal:show()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:start()",
        "desc": "Starts Seal",
        "doc": "Starts Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Seal:stop()",
        "desc": "Stops Seal",
        "doc": "Stops Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)",
        "name": "stop",
        "notes": [
          " * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)"
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The Seal object"
        ],
        "signature": "Seal:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Seal",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/Seal.spoon.zip)",
    "submodules": [
      "plugins"
    ],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [
      {
        "def": "Seal.plugins.useractions.actions",
        "desc": "",
        "doc": "\nA table containing the definitions of static user-defined actions. Each entry is indexed by the name of the entry as it will be shown in the chooser. Its value is a table which can have the following keys (one of `fn` or `url` is required. If both are provided, `url` is ignored):\n * fn - A function which will be called when the entry is selected. The function receives no arguments.\n * url - A URL which will be opened when the entry is selected. Can also be non-HTTP URLs, such as `mailto:` or other app-specific URLs.\n * icon - (optional) An `hs.image` object that will be shown next to the entry in the chooser. If not provided, `Seal.plugins.useractions.default_icon` is used. For `url` bookmarks, it can be set to `\"favicon\"` to fetch and use the website's favicon.\n * keyword - (optional) A command by which this action will be invoked, effectively turning it into a Seal command. Any arguments passed to the command will be handled as follows:\n   * For `fn` actions, passed as an argument to the function\n   * For `url` actions, substituted into the URL, taking the place of any occurrences of `${query}`.\n * hotkey - (optional) A hotkey specification in the form `{ modifiers, key }` by which this action can be invoked.\n\nExample configuration:\n```\nspoon.Seal:loadPlugins({\"useractions\"})\nspoon.Seal.plugins.useractions.actions =\n   {\n      [\"Hammerspoon docs webpage\"] = {\n         url = \"http://hammerspoon.org/docs/\",\n         icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),\n         hotkey = { hyper, \"h\" }\n      },\n      [\"Leave corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('foo', 'corpnet01')\n         end,\n      },\n      [\"Arrive in corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('corpnet01', 'foo')\n         end,\n      },\n      [\"Translate using Leo\"] = {\n         url = \"http://dict.leo.org/ende/index_de.html#/search=${query}\",\n         icon = 'favicon',\n         keyword = \"leo\",\n      },\n      [\"Tell me something\"] = {\n         keyword = \"tellme\",\n         fn = function(str) hs.alert.show(str) end,\n      }\n```",
        "name": "actions",
        "signature": "Seal.plugins.useractions.actions",
        "stripped_doc": "A table containing the definitions of static user-defined actions. Each entry is indexed by the name of the entry as it will be shown in the chooser. Its value is a table which can have the following keys (one of `fn` or `url` is required. If both are provided, `url` is ignored):\n * fn - A function which will be called when the entry is selected. The function receives no arguments.\n * url - A URL which will be opened when the entry is selected. Can also be non-HTTP URLs, such as `mailto:` or other app-specific URLs.\n * icon - (optional) An `hs.image` object that will be shown next to the entry in the chooser. If not provided, `Seal.plugins.useractions.default_icon` is used. For `url` bookmarks, it can be set to `\"favicon\"` to fetch and use the website's favicon.\n * keyword - (optional) A command by which this action will be invoked, effectively turning it into a Seal command. Any arguments passed to the command will be handled as follows:\n   * For `fn` actions, passed as an argument to the function\n   * For `url` actions, substituted into the URL, taking the place of any occurrences of `${query}`.\n * hotkey - (optional) A hotkey specification in the form `{ modifiers, key }` by which this action can be invoked.\nExample configuration:\n```\nspoon.Seal:loadPlugins({\"useractions\"})\nspoon.Seal.plugins.useractions.actions =\n   {\n      [\"Hammerspoon docs webpage\"] = {\n         url = \"http://hammerspoon.org/docs/\",\n         icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),\n         hotkey = { hyper, \"h\" }\n      },\n      [\"Leave corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('foo', 'corpnet01')\n         end,\n      },\n      [\"Arrive in corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('corpnet01', 'foo')\n         end,\n      },\n      [\"Translate using Leo\"] = {\n         url = \"http://dict.leo.org/ende/index_de.html#/search=${query}\",\n         icon = 'favicon',\n         keyword = \"leo\",\n      },\n      [\"Tell me something\"] = {\n         keyword = \"tellme\",\n         fn = function(str) hs.alert.show(str) end,\n      }\n```",
        "type": "Variable"
      },
      {
        "def": "Seal.plugins.useractions.get_favicon",
        "desc": "",
        "doc": "\nIf `true`, attempt to obtain the favicon for URLs added through the `add` command, and use it in the chooser.",
        "name": "get_favicon",
        "signature": "Seal.plugins.useractions.get_favicon",
        "stripped_doc": "If `true`, attempt to obtain the favicon for URLs added through the `add` command, and use it in the chooser.",
        "type": "Variable"
      }
    ],
    "desc": "Allow accessing user-defined bookmarks and arbitrary actions from Seal.",
    "doc": "Allow accessing user-defined bookmarks and arbitrary actions from Seal.\n",
    "items": [
      {
        "def": "Seal.plugins.useractions.actions",
        "desc": "",
        "doc": "\nA table containing the definitions of static user-defined actions. Each entry is indexed by the name of the entry as it will be shown in the chooser. Its value is a table which can have the following keys (one of `fn` or `url` is required. If both are provided, `url` is ignored):\n * fn - A function which will be called when the entry is selected. The function receives no arguments.\n * url - A URL which will be opened when the entry is selected. Can also be non-HTTP URLs, such as `mailto:` or other app-specific URLs.\n * icon - (optional) An `hs.image` object that will be shown next to the entry in the chooser. If not provided, `Seal.plugins.useractions.default_icon` is used. For `url` bookmarks, it can be set to `\"favicon\"` to fetch and use the website's favicon.\n * keyword - (optional) A command by which this action will be invoked, effectively turning it into a Seal command. Any arguments passed to the command will be handled as follows:\n   * For `fn` actions, passed as an argument to the function\n   * For `url` actions, substituted into the URL, taking the place of any occurrences of `${query}`.\n * hotkey - (optional) A hotkey specification in the form `{ modifiers, key }` by which this action can be invoked.\n\nExample configuration:\n```\nspoon.Seal:loadPlugins({\"useractions\"})\nspoon.Seal.plugins.useractions.actions =\n   {\n      [\"Hammerspoon docs webpage\"] = {\n         url = \"http://hammerspoon.org/docs/\",\n         icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),\n         hotkey = { hyper, \"h\" }\n      },\n      [\"Leave corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('foo', 'corpnet01')\n         end,\n      },\n      [\"Arrive in corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('corpnet01', 'foo')\n         end,\n      },\n      [\"Translate using Leo\"] = {\n         url = \"http://dict.leo.org/ende/index_de.html#/search=${query}\",\n         icon = 'favicon',\n         keyword = \"leo\",\n      },\n      [\"Tell me something\"] = {\n         keyword = \"tellme\",\n         fn = function(str) hs.alert.show(str) end,\n      }\n```",
        "name": "actions",
        "signature": "Seal.plugins.useractions.actions",
        "stripped_doc": "A table containing the definitions of static user-defined actions. Each entry is indexed by the name of the entry as it will be shown in the chooser. Its value is a table which can have the following keys (one of `fn` or `url` is required. If both are provided, `url` is ignored):\n * fn - A function which will be called when the entry is selected. The function receives no arguments.\n * url - A URL which will be opened when the entry is selected. Can also be non-HTTP URLs, such as `mailto:` or other app-specific URLs.\n * icon - (optional) An `hs.image` object that will be shown next to the entry in the chooser. If not provided, `Seal.plugins.useractions.default_icon` is used. For `url` bookmarks, it can be set to `\"favicon\"` to fetch and use the website's favicon.\n * keyword - (optional) A command by which this action will be invoked, effectively turning it into a Seal command. Any arguments passed to the command will be handled as follows:\n   * For `fn` actions, passed as an argument to the function\n   * For `url` actions, substituted into the URL, taking the place of any occurrences of `${query}`.\n * hotkey - (optional) A hotkey specification in the form `{ modifiers, key }` by which this action can be invoked.\nExample configuration:\n```\nspoon.Seal:loadPlugins({\"useractions\"})\nspoon.Seal.plugins.useractions.actions =\n   {\n      [\"Hammerspoon docs webpage\"] = {\n         url = \"http://hammerspoon.org/docs/\",\n         icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),\n         hotkey = { hyper, \"h\" }\n      },\n      [\"Leave corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('foo', 'corpnet01')\n         end,\n      },\n      [\"Arrive in corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('corpnet01', 'foo')\n         end,\n      },\n      [\"Translate using Leo\"] = {\n         url = \"http://dict.leo.org/ende/index_de.html#/search=${query}\",\n         icon = 'favicon',\n         keyword = \"leo\",\n      },\n      [\"Tell me something\"] = {\n         keyword = \"tellme\",\n         fn = function(str) hs.alert.show(str) end,\n      }\n```",
        "type": "Variable"
      },
      {
        "def": "Seal.plugins.useractions.get_favicon",
        "desc": "",
        "doc": "\nIf `true`, attempt to obtain the favicon for URLs added through the `add` command, and use it in the chooser.",
        "name": "get_favicon",
        "signature": "Seal.plugins.useractions.get_favicon",
        "stripped_doc": "If `true`, attempt to obtain the favicon for URLs added through the `add` command, and use it in the chooser.",
        "type": "Variable"
      }
    ],
    "name": "Seal.plugins.useractions",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "SendToOmniFocus:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for SendToOmniFocus",
        "doc": "Binds hotkeys for SendToOmniFocus\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * send_to_omnifocus - file current item to OmniFocus.",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:",
          "  * send_to_omnifocus - file current item to OmniFocus."
        ],
        "signature": "SendToOmniFocus:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "desc": "Register a new application handler",
        "doc": "Register a new application handler\n\nParameters:\n * app - application name\n * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application.",
        "name": "registerApplication",
        "parameters": [
          " * app - application name",
          " * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application."
        ],
        "signature": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus:sendCurrentItem",
        "desc": "Send current item in current application to OmniFocus by triggering the appropriate handler.",
        "doc": "Send current item in current application to OmniFocus by triggering the appropriate handler.\n\nParamters:\n * None\n\nReturns:\n * The SendToOmniFocus object",
        "name": "sendCurrentItem",
        "returns": [
          " * The SendToOmniFocus object"
        ],
        "signature": "SendToOmniFocus:sendCurrentItem",
        "stripped_doc": "Paramters:\n * None",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "SendToOmniFocus.actions",
        "desc": "Table containing application handlers for sending the current item to OmniFocus.",
        "doc": "Table containing application handlers for sending the current item to OmniFocus.\nEach entry's key is the application name, and its value is another table with the following keys:\n * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".\n * One of the following, invoked to do the actual filing:\n   * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.\n   * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.\n   * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.\n   * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).\n\nThe built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.\nNew handlers can be registered using `SendToOmniFocus:registerApplication()`\n\nDefault value:\n```\n  {\n     [\"Microsoft Outlook\"] = {\n        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     },\n     Evernote = {\n        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),\n        itemname = \"note\"\n     },\n     [\"Google Chrome\"] = {\n        apptype = \"chromeapp\",\n        itemname = \"tab\"\n     },\n     Mail = {\n        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     }\n  }\n```",
        "name": "actions",
        "signature": "SendToOmniFocus.actions",
        "stripped_doc": "Each entry's key is the application name, and its value is another table with the following keys:\n * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".\n * One of the following, invoked to do the actual filing:\n   * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.\n   * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.\n   * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.\n   * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).\nThe built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.\nNew handlers can be registered using `SendToOmniFocus:registerApplication()`\nDefault value:\n```\n  {\n     [\"Microsoft Outlook\"] = {\n        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     },\n     Evernote = {\n        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),\n        itemname = \"note\"\n     },\n     [\"Google Chrome\"] = {\n        apptype = \"chromeapp\",\n        itemname = \"tab\"\n     },\n     Mail = {\n        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     }\n  }\n```",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "SendToOmniFocus.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.notifications",
        "desc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "doc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "name": "notifications",
        "signature": "SendToOmniFocus.notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.quickentrydialog",
        "desc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "doc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "name": "quickentrydialog",
        "signature": "SendToOmniFocus.quickentrydialog",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Handles \"send current item to OmniFocus\" for multiple applications",
    "doc": "Handles \"send current item to OmniFocus\" for multiple applications\n\nThe following applications are supported: out of the box: Outlook, Evernote, Mail, Chrome and any Chrome-based apps (such as SSBs created by [Epichrome](https://github.com/dmarmor/epichrome))\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip)",
    "items": [
      {
        "def": "SendToOmniFocus.actions",
        "desc": "Table containing application handlers for sending the current item to OmniFocus.",
        "doc": "Table containing application handlers for sending the current item to OmniFocus.\nEach entry's key is the application name, and its value is another table with the following keys:\n * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".\n * One of the following, invoked to do the actual filing:\n   * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.\n   * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.\n   * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.\n   * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).\n\nThe built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.\nNew handlers can be registered using `SendToOmniFocus:registerApplication()`\n\nDefault value:\n```\n  {\n     [\"Microsoft Outlook\"] = {\n        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     },\n     Evernote = {\n        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),\n        itemname = \"note\"\n     },\n     [\"Google Chrome\"] = {\n        apptype = \"chromeapp\",\n        itemname = \"tab\"\n     },\n     Mail = {\n        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     }\n  }\n```",
        "name": "actions",
        "signature": "SendToOmniFocus.actions",
        "stripped_doc": "Each entry's key is the application name, and its value is another table with the following keys:\n * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".\n * One of the following, invoked to do the actual filing:\n   * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.\n   * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.\n   * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.\n   * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).\nThe built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.\nNew handlers can be registered using `SendToOmniFocus:registerApplication()`\nDefault value:\n```\n  {\n     [\"Microsoft Outlook\"] = {\n        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     },\n     Evernote = {\n        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),\n        itemname = \"note\"\n     },\n     [\"Google Chrome\"] = {\n        apptype = \"chromeapp\",\n        itemname = \"tab\"\n     },\n     Mail = {\n        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     }\n  }\n```",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for SendToOmniFocus",
        "doc": "Binds hotkeys for SendToOmniFocus\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * send_to_omnifocus - file current item to OmniFocus.",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:",
          "  * send_to_omnifocus - file current item to OmniFocus."
        ],
        "signature": "SendToOmniFocus:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "SendToOmniFocus.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.notifications",
        "desc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "doc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "name": "notifications",
        "signature": "SendToOmniFocus.notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.quickentrydialog",
        "desc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "doc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "name": "quickentrydialog",
        "signature": "SendToOmniFocus.quickentrydialog",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "desc": "Register a new application handler",
        "doc": "Register a new application handler\n\nParameters:\n * app - application name\n * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application.",
        "name": "registerApplication",
        "parameters": [
          " * app - application name",
          " * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application."
        ],
        "signature": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus:sendCurrentItem",
        "desc": "Send current item in current application to OmniFocus by triggering the appropriate handler.",
        "doc": "Send current item in current application to OmniFocus by triggering the appropriate handler.\n\nParamters:\n * None\n\nReturns:\n * The SendToOmniFocus object",
        "name": "sendCurrentItem",
        "returns": [
          " * The SendToOmniFocus object"
        ],
        "signature": "SendToOmniFocus:sendCurrentItem",
        "stripped_doc": "Paramters:\n * None",
        "type": "Method"
      }
    ],
    "name": "SendToOmniFocus",
    "stripped_doc": "\nThe following applications are supported: out of the box: Outlook, Evernote, Mail, Chrome and any Chrome-based apps (such as SSBs created by [Epichrome](https://github.com/dmarmor/epichrome))\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "TextClipboardHistory:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for TextClipboardHistory",
        "doc": "Binds hotkeys for TextClipboardHistory\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * show_clipboard - Display the clipboard history chooser\n  * toggle_clipboard - Show/hide the clipboard history chooser",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:",
          "  * show_clipboard - Display the clipboard history chooser",
          "  * toggle_clipboard - Show/hide the clipboard history chooser"
        ],
        "signature": "TextClipboardHistory:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:checkAndStorePasteboard()",
        "desc": "If the pasteboard has changed, we add the current item to our history and update the counter",
        "doc": "If the pasteboard has changed, we add the current item to our history and update the counter",
        "name": "checkAndStorePasteboard",
        "signature": "TextClipboardHistory:checkAndStorePasteboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:clearAll()",
        "desc": "Clears the clipboard and history",
        "doc": "Clears the clipboard and history",
        "name": "clearAll",
        "signature": "TextClipboardHistory:clearAll()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:clearLastItem()",
        "desc": "Clears the last added to the history",
        "doc": "Clears the last added to the history",
        "name": "clearLastItem",
        "signature": "TextClipboardHistory:clearLastItem()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:pasteboardToClipboard(item)",
        "desc": "Add the given string to the history",
        "doc": "Add the given string to the history\n\nParameters:\n * item - string to add to the clipboard history\n\nReturns:\n * None",
        "name": "pasteboardToClipboard",
        "parameters": [
          " * item - string to add to the clipboard history"
        ],
        "returns": [
          " * None"
        ],
        "signature": "TextClipboardHistory:pasteboardToClipboard(item)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:shouldBeStored()",
        "desc": "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
        "doc": "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
        "name": "shouldBeStored",
        "signature": "TextClipboardHistory:shouldBeStored()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:showClipboard()",
        "desc": "Display the current clipboard list in a chooser",
        "doc": "Display the current clipboard list in a chooser",
        "name": "showClipboard",
        "signature": "TextClipboardHistory:showClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:start()",
        "desc": "Start the clipboard history collector",
        "doc": "Start the clipboard history collector",
        "name": "start",
        "signature": "TextClipboardHistory:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:toggleClipboard()",
        "desc": "Show/hide the clipboard list, depending on its current state",
        "doc": "Show/hide the clipboard list, depending on its current state",
        "name": "toggleClipboard",
        "signature": "TextClipboardHistory:toggleClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:togglePasteOnSelect()",
        "desc": "Toggle the value of `TextClipboardHistory.paste_on_select`",
        "doc": "Toggle the value of `TextClipboardHistory.paste_on_select`",
        "name": "togglePasteOnSelect",
        "signature": "TextClipboardHistory:togglePasteOnSelect()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "TextClipboardHistory.deduplicate",
        "desc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "doc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "name": "deduplicate",
        "signature": "TextClipboardHistory.deduplicate",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.frequency",
        "desc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "doc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "name": "frequency",
        "signature": "TextClipboardHistory.frequency",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.hist_size",
        "desc": "How many items to keep on history. Defaults to 100",
        "doc": "How many items to keep on history. Defaults to 100",
        "name": "hist_size",
        "signature": "TextClipboardHistory.hist_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.honor_ignoredidentifiers",
        "desc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "doc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "name": "honor_ignoredidentifiers",
        "signature": "TextClipboardHistory.honor_ignoredidentifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.ignoredIdentifiers",
        "desc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua. Default value (don't modify unless you know what you are doing):",
        "doc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua. Default value (don't modify unless you know what you are doing):\n```\n {\n    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler\n    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me\n    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator\n    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password\n    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient\n    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed\n    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic\n }\n```",
        "name": "ignoredIdentifiers",
        "signature": "TextClipboardHistory.ignoredIdentifiers",
        "stripped_doc": "```\n {\n    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler\n    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me\n    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator\n    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password\n    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient\n    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed\n    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic\n }\n```",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "TextClipboardHistory.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.menubar_title",
        "desc": "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)",
        "doc": "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)",
        "name": "menubar_title",
        "signature": "TextClipboardHistory.menubar_title",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.paste_on_select",
        "desc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "doc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "name": "paste_on_select",
        "signature": "TextClipboardHistory.paste_on_select",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.show_in_menubar",
        "desc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "doc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "name": "show_in_menubar",
        "signature": "TextClipboardHistory.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Keep a history of the clipboard, only for text entries",
    "doc": "Keep a history of the clipboard, only for text entries\n\nOriginally based on [code by VFS](https://github.com/VFS/.hammerspoon/blob/master/tools/clipboard.lua), but with many changes and some contributions and inspiration from [asmagill](https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua).\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TextClipboardHistory.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TextClipboardHistory.spoon.zip)",
    "items": [
      {
        "def": "TextClipboardHistory:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for TextClipboardHistory",
        "doc": "Binds hotkeys for TextClipboardHistory\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * show_clipboard - Display the clipboard history chooser\n  * toggle_clipboard - Show/hide the clipboard history chooser",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:",
          "  * show_clipboard - Display the clipboard history chooser",
          "  * toggle_clipboard - Show/hide the clipboard history chooser"
        ],
        "signature": "TextClipboardHistory:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:checkAndStorePasteboard()",
        "desc": "If the pasteboard has changed, we add the current item to our history and update the counter",
        "doc": "If the pasteboard has changed, we add the current item to our history and update the counter",
        "name": "checkAndStorePasteboard",
        "signature": "TextClipboardHistory:checkAndStorePasteboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:clearAll()",
        "desc": "Clears the clipboard and history",
        "doc": "Clears the clipboard and history",
        "name": "clearAll",
        "signature": "TextClipboardHistory:clearAll()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:clearLastItem()",
        "desc": "Clears the last added to the history",
        "doc": "Clears the last added to the history",
        "name": "clearLastItem",
        "signature": "TextClipboardHistory:clearLastItem()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory.deduplicate",
        "desc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "doc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "name": "deduplicate",
        "signature": "TextClipboardHistory.deduplicate",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.frequency",
        "desc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "doc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "name": "frequency",
        "signature": "TextClipboardHistory.frequency",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.hist_size",
        "desc": "How many items to keep on history. Defaults to 100",
        "doc": "How many items to keep on history. Defaults to 100",
        "name": "hist_size",
        "signature": "TextClipboardHistory.hist_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.honor_ignoredidentifiers",
        "desc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "doc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "name": "honor_ignoredidentifiers",
        "signature": "TextClipboardHistory.honor_ignoredidentifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.ignoredIdentifiers",
        "desc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua. Default value (don't modify unless you know what you are doing):",
        "doc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua. Default value (don't modify unless you know what you are doing):\n```\n {\n    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler\n    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me\n    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator\n    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password\n    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient\n    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed\n    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic\n }\n```",
        "name": "ignoredIdentifiers",
        "signature": "TextClipboardHistory.ignoredIdentifiers",
        "stripped_doc": "```\n {\n    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler\n    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me\n    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator\n    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password\n    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient\n    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed\n    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic\n }\n```",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "TextClipboardHistory.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.menubar_title",
        "desc": "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)",
        "doc": "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)",
        "name": "menubar_title",
        "signature": "TextClipboardHistory.menubar_title",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.paste_on_select",
        "desc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "doc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "name": "paste_on_select",
        "signature": "TextClipboardHistory.paste_on_select",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory:pasteboardToClipboard(item)",
        "desc": "Add the given string to the history",
        "doc": "Add the given string to the history\n\nParameters:\n * item - string to add to the clipboard history\n\nReturns:\n * None",
        "name": "pasteboardToClipboard",
        "parameters": [
          " * item - string to add to the clipboard history"
        ],
        "returns": [
          " * None"
        ],
        "signature": "TextClipboardHistory:pasteboardToClipboard(item)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:shouldBeStored()",
        "desc": "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
        "doc": "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
        "name": "shouldBeStored",
        "signature": "TextClipboardHistory:shouldBeStored()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory.show_in_menubar",
        "desc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "doc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "name": "show_in_menubar",
        "signature": "TextClipboardHistory.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory:showClipboard()",
        "desc": "Display the current clipboard list in a chooser",
        "doc": "Display the current clipboard list in a chooser",
        "name": "showClipboard",
        "signature": "TextClipboardHistory:showClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:start()",
        "desc": "Start the clipboard history collector",
        "doc": "Start the clipboard history collector",
        "name": "start",
        "signature": "TextClipboardHistory:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:toggleClipboard()",
        "desc": "Show/hide the clipboard list, depending on its current state",
        "doc": "Show/hide the clipboard list, depending on its current state",
        "name": "toggleClipboard",
        "signature": "TextClipboardHistory:toggleClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:togglePasteOnSelect()",
        "desc": "Toggle the value of `TextClipboardHistory.paste_on_select`",
        "doc": "Toggle the value of `TextClipboardHistory.paste_on_select`",
        "name": "togglePasteOnSelect",
        "signature": "TextClipboardHistory:togglePasteOnSelect()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "TextClipboardHistory",
    "stripped_doc": "\nOriginally based on [code by VFS](https://github.com/VFS/.hammerspoon/blob/master/tools/clipboard.lua), but with many changes and some contributions and inspiration from [asmagill](https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua).\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TextClipboardHistory.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TextClipboardHistory.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "ToggleScreenRotation:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ToggleScreenRotation.",
        "doc": "Binds hotkeys for ToggleScreenRotation.\n\nParameters:\n * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen):\n   ```\n     [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" }\n   ```",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen):",
          "   ```",
          "     [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" }",
          "   ```"
        ],
        "signature": "ToggleScreenRotation:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "ToggleScreenRotation.rotating_angles",
        "desc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "doc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "name": "rotating_angles",
        "signature": "ToggleScreenRotation.rotating_angles",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ToggleScreenRotation.screens_to_skip",
        "desc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.",
        "doc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.\nDefaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs.",
        "name": "screens_to_skip",
        "signature": "ToggleScreenRotation.screens_to_skip",
        "stripped_doc": "Defaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs.",
        "type": "Variable"
      }
    ],
    "desc": "Toggle rotation on external screens",
    "doc": "Toggle rotation on external screens\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip)\n\nMakes the following simplifying assumptions:\n* That you only toggle between two positions for rotated/not\n  rotated (configured in `rotating_angles`, and which apply to all\n  screens)\n* That \"rotated\" means \"taller than wider\", for the purposes of\n  determining if the screen is rotated upon initialization.",
    "items": [
      {
        "def": "ToggleScreenRotation:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ToggleScreenRotation.",
        "doc": "Binds hotkeys for ToggleScreenRotation.\n\nParameters:\n * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen):\n   ```\n     [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" }\n   ```",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details to rotate screens. Instead of fixed \"key names\", each key must be the name of a screen to rotate, or a Lua pattern - in this case the first screen to match the pattern will be rotated. The value is a table containing the hotkey modifier/key details as usual. You can use the special key `first` (or the Lua pattern `[\".*\"]`) to match the first external screen, which should be sufficient unless you have more than one external screen. Example (bind Ctrl-Cmd-Alt-F15 to rotate the first external screen):",
          "   ```",
          "     [\".*\"] = { {\"ctrl\", \"cmd\", \"alt\"}, \"f15\" }",
          "   ```"
        ],
        "signature": "ToggleScreenRotation:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ToggleScreenRotation.rotating_angles",
        "desc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "doc": "Two-element table containing the rotation angles for \"normal\" and \"rotated\". Defaults to `{ 0, 90 }` and should only be changed if you really know what you are doing.",
        "name": "rotating_angles",
        "signature": "ToggleScreenRotation.rotating_angles",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ToggleScreenRotation.screens_to_skip",
        "desc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.",
        "doc": "Lua patterns for screens that shouldn't be rotated, even if they match one of the patterns.\nDefaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs.",
        "name": "screens_to_skip",
        "signature": "ToggleScreenRotation.screens_to_skip",
        "stripped_doc": "Defaults to `{ \"Color LCD\", \"iMac\" }`, which excludes the built-in display on laptops and iMacs.",
        "type": "Variable"
      }
    ],
    "name": "ToggleScreenRotation",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleScreenRotation.spoon.zip)\n\nMakes the following simplifying assumptions:\n* That you only toggle between two positions for rotated/not\n  rotated (configured in `rotating_angles`, and which apply to all\n  screens)\n* That \"rotated\" means \"taller than wider\", for the purposes of\n  determining if the screen is rotated upon initialization.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "ToggleSkypeMute:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ToggleSkypeMute",
        "doc": "Binds hotkeys for ToggleSkypeMute\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle_skype - Mute/unmute active conversation in Skype\n  * toggle_skype_for_business - Mute/unmute active conversation in Skype For Business",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * toggle_skype - Mute/unmute active conversation in Skype",
          "  * toggle_skype_for_business - Mute/unmute active conversation in Skype For Business"
        ],
        "signature": "ToggleSkypeMute:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ToggleSkypeMute:toggle(app)",
        "desc": "Toggle Skype between muted/unmuted, whether it is focused or not",
        "doc": "Toggle Skype between muted/unmuted, whether it is focused or not\n\nParameters:\n * app - name of the application to mute/unmute. Supported values are \"Skype\" and \"Skype for Business\". Defaults to \"Skype\".\n\nReturns:\n * None",
        "name": "toggle",
        "parameters": [
          " * app - name of the application to mute/unmute. Supported values are \"Skype\" and \"Skype for Business\". Defaults to \"Skype\"."
        ],
        "returns": [
          " * None"
        ],
        "signature": "ToggleSkypeMute:toggle(app)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "ToggleSkypeMute.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "ToggleSkypeMute.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ToggleSkypeMute.notifications",
        "desc": "If `true`, produce notifications when Skype is muted/unmuted. Defaults to `true`.",
        "doc": "If `true`, produce notifications when Skype is muted/unmuted. Defaults to `true`.",
        "name": "notifications",
        "signature": "ToggleSkypeMute.notifications",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Provide keybindings for muting/unmuting Skype or Skype for Business",
    "doc": "Provide keybindings for muting/unmuting Skype or Skype for Business\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleSkypeMute.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleSkypeMute.spoon.zip)",
    "items": [
      {
        "def": "ToggleSkypeMute:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for ToggleSkypeMute",
        "doc": "Binds hotkeys for ToggleSkypeMute\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * toggle_skype - Mute/unmute active conversation in Skype\n  * toggle_skype_for_business - Mute/unmute active conversation in Skype For Business",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * toggle_skype - Mute/unmute active conversation in Skype",
          "  * toggle_skype_for_business - Mute/unmute active conversation in Skype For Business"
        ],
        "signature": "ToggleSkypeMute:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ToggleSkypeMute.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "ToggleSkypeMute.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ToggleSkypeMute.notifications",
        "desc": "If `true`, produce notifications when Skype is muted/unmuted. Defaults to `true`.",
        "doc": "If `true`, produce notifications when Skype is muted/unmuted. Defaults to `true`.",
        "name": "notifications",
        "signature": "ToggleSkypeMute.notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ToggleSkypeMute:toggle(app)",
        "desc": "Toggle Skype between muted/unmuted, whether it is focused or not",
        "doc": "Toggle Skype between muted/unmuted, whether it is focused or not\n\nParameters:\n * app - name of the application to mute/unmute. Supported values are \"Skype\" and \"Skype for Business\". Defaults to \"Skype\".\n\nReturns:\n * None",
        "name": "toggle",
        "parameters": [
          " * app - name of the application to mute/unmute. Supported values are \"Skype\" and \"Skype for Business\". Defaults to \"Skype\"."
        ],
        "returns": [
          " * None"
        ],
        "signature": "ToggleSkypeMute:toggle(app)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "ToggleSkypeMute",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleSkypeMute.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/ToggleSkypeMute.spoon.zip)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "UniversalArchive:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for UniversalArchive",
        "doc": "Binds hotkeys for UniversalArchive\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.\n  * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations.",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.",
          "  * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations."
        ],
        "signature": "UniversalArchive:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:evernoteArchive(where)",
        "desc": "Archive current note in Evernote.",
        "doc": "Archive current note in Evernote.\n\nParameters:\n * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`.",
        "name": "evernoteArchive",
        "parameters": [
          " * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`."
        ],
        "signature": "UniversalArchive:evernoteArchive(where)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:mailArchive()",
        "desc": "Archive current message in Mail using the built-in Archive functionality",
        "doc": "Archive current message in Mail using the built-in Archive functionality\n\nParameters:\n * none",
        "name": "mailArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:mailArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:outlookArchive()",
        "desc": "Archive current message in Outlook to the folder specified in",
        "doc": "Archive current message in Outlook to the folder specified in\n`UniversalArchive.outlook_archive_folder`. The folder has to\nappear in the Message -> Move submenu for this to work. Since this\nsubmenu only lists the last few destination folders, you have to\nmove a message by hand the first time (or periodically if you\ndon't archive very often).\n\nParameters:\n * none",
        "name": "outlookArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:outlookArchive()",
        "stripped_doc": "`UniversalArchive.outlook_archive_folder`. The folder has to\nappear in the Message -> Move submenu for this to work. Since this\nsubmenu only lists the last few destination folders, you have to\nmove a message by hand the first time (or periodically if you\ndon't archive very often).",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:registerApplication(appname, fn)",
        "desc": "Register a handler function for an application.",
        "doc": "Register a handler function for an application.\n\nParameters:\n * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.\n * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:\n   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.\n   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler.",
        "name": "registerApplication",
        "parameters": [
          " * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.",
          " * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:",
          "   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.",
          "   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler."
        ],
        "signature": "UniversalArchive:registerApplication(appname, fn)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:sparkArchive()",
        "desc": "Archive current message in Spark using the built-in Archive functionality",
        "doc": "Archive current message in Spark using the built-in Archive functionality\n\nParameters:\n * none",
        "name": "sparkArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:sparkArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:universalArchive(where)",
        "desc": "Main entry point for archiving an item. If a handler function is",
        "doc": "Main entry point for archiving an item. If a handler function is\ndefined for the current application, it is called with the\n`UniversalArchive` object as its first argument, and the archive\ndestination (if provided) as the second. Handlers must have a\n\"default destination\" that gets used when no destination is\nprovided. Not all handlers support specifying a destination. New\nhandlers can be registered using the `registerApplication()`\nmethod.",
        "name": "universalArchive",
        "signature": "UniversalArchive:universalArchive(where)",
        "stripped_doc": "defined for the current application, it is called with the\n`UniversalArchive` object as its first argument, and the archive\ndestination (if provided) as the second. Handlers must have a\n\"default destination\" that gets used when no destination is\nprovided. Not all handlers support specifying a destination. New\nhandlers can be registered using the `registerApplication()`\nmethod.",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "UniversalArchive.archive_notifications",
        "desc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "doc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "name": "archive_notifications",
        "signature": "UniversalArchive.archive_notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.evernote_archive_notebook",
        "desc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "doc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "name": "evernote_archive_notebook",
        "signature": "UniversalArchive.evernote_archive_notebook",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.evernote_delay_before_typing",
        "desc": "In Evernote, archive is done by selectin \"Move note\" and then",
        "doc": "In Evernote, archive is done by selectin \"Move note\" and then\nsimulating typing of the notebook name. A short pause in between\nmakes it more reliable for Evernote to recognize the notebook name\ncorrectly. This variable controls how much to wait, in seconds.\nDo not change this unless you know what you are doing",
        "name": "evernote_delay_before_typing",
        "signature": "UniversalArchive.evernote_delay_before_typing",
        "stripped_doc": "simulating typing of the notebook name. A short pause in between\nmakes it more reliable for Evernote to recognize the notebook name\ncorrectly. This variable controls how much to wait, in seconds.\nDo not change this unless you know what you are doing",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "UniversalArchive.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.outlook_archive_folder",
        "desc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "doc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "name": "outlook_archive_folder",
        "signature": "UniversalArchive.outlook_archive_folder",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Handle \"archive current item\" for multiple applications using the same hotkey",
    "doc": "Handle \"archive current item\" for multiple applications using the same hotkey\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip)\n\nUsing this Spoon enables you to use a single hotkey to archive an\nitem in multiple applications.  Out of the box the following\napplications are supported: Evernote, Mail, Spark and Outlook. You\ncan easily register handlers for new applications (or override the\nbuilt-in ones) using the `registerApplication()` method. If you\nwrite a new handler and feel others could benefit from it, please\nsubmit a pull request!\n\nHandlers can also provide support for archiving to multiple\nlocations, and you can bind different hotkeys for each\ndestination. At the moment only Evernote supports this. See the\ndocumentation for `bindHotkeys()` for the details on how to\nspecify multiple-destination filing hotkeys.",
    "items": [
      {
        "def": "UniversalArchive.archive_notifications",
        "desc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "doc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "name": "archive_notifications",
        "signature": "UniversalArchive.archive_notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for UniversalArchive",
        "doc": "Binds hotkeys for UniversalArchive\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.\n  * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations.",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.",
          "  * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations."
        ],
        "signature": "UniversalArchive:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive.evernote_archive_notebook",
        "desc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "doc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "name": "evernote_archive_notebook",
        "signature": "UniversalArchive.evernote_archive_notebook",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.evernote_delay_before_typing",
        "desc": "In Evernote, archive is done by selectin \"Move note\" and then",
        "doc": "In Evernote, archive is done by selectin \"Move note\" and then\nsimulating typing of the notebook name. A short pause in between\nmakes it more reliable for Evernote to recognize the notebook name\ncorrectly. This variable controls how much to wait, in seconds.\nDo not change this unless you know what you are doing",
        "name": "evernote_delay_before_typing",
        "signature": "UniversalArchive.evernote_delay_before_typing",
        "stripped_doc": "simulating typing of the notebook name. A short pause in between\nmakes it more reliable for Evernote to recognize the notebook name\ncorrectly. This variable controls how much to wait, in seconds.\nDo not change this unless you know what you are doing",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:evernoteArchive(where)",
        "desc": "Archive current note in Evernote.",
        "doc": "Archive current note in Evernote.\n\nParameters:\n * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`.",
        "name": "evernoteArchive",
        "parameters": [
          " * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`."
        ],
        "signature": "UniversalArchive:evernoteArchive(where)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "UniversalArchive.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:mailArchive()",
        "desc": "Archive current message in Mail using the built-in Archive functionality",
        "doc": "Archive current message in Mail using the built-in Archive functionality\n\nParameters:\n * none",
        "name": "mailArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:mailArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive.outlook_archive_folder",
        "desc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "doc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "name": "outlook_archive_folder",
        "signature": "UniversalArchive.outlook_archive_folder",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:outlookArchive()",
        "desc": "Archive current message in Outlook to the folder specified in",
        "doc": "Archive current message in Outlook to the folder specified in\n`UniversalArchive.outlook_archive_folder`. The folder has to\nappear in the Message -> Move submenu for this to work. Since this\nsubmenu only lists the last few destination folders, you have to\nmove a message by hand the first time (or periodically if you\ndon't archive very often).\n\nParameters:\n * none",
        "name": "outlookArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:outlookArchive()",
        "stripped_doc": "`UniversalArchive.outlook_archive_folder`. The folder has to\nappear in the Message -> Move submenu for this to work. Since this\nsubmenu only lists the last few destination folders, you have to\nmove a message by hand the first time (or periodically if you\ndon't archive very often).",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:registerApplication(appname, fn)",
        "desc": "Register a handler function for an application.",
        "doc": "Register a handler function for an application.\n\nParameters:\n * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.\n * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:\n   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.\n   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler.",
        "name": "registerApplication",
        "parameters": [
          " * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.",
          " * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:",
          "   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.",
          "   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler."
        ],
        "signature": "UniversalArchive:registerApplication(appname, fn)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:sparkArchive()",
        "desc": "Archive current message in Spark using the built-in Archive functionality",
        "doc": "Archive current message in Spark using the built-in Archive functionality\n\nParameters:\n * none",
        "name": "sparkArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:sparkArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:universalArchive(where)",
        "desc": "Main entry point for archiving an item. If a handler function is",
        "doc": "Main entry point for archiving an item. If a handler function is\ndefined for the current application, it is called with the\n`UniversalArchive` object as its first argument, and the archive\ndestination (if provided) as the second. Handlers must have a\n\"default destination\" that gets used when no destination is\nprovided. Not all handlers support specifying a destination. New\nhandlers can be registered using the `registerApplication()`\nmethod.",
        "name": "universalArchive",
        "signature": "UniversalArchive:universalArchive(where)",
        "stripped_doc": "defined for the current application, it is called with the\n`UniversalArchive` object as its first argument, and the archive\ndestination (if provided) as the second. Handlers must have a\n\"default destination\" that gets used when no destination is\nprovided. Not all handlers support specifying a destination. New\nhandlers can be registered using the `registerApplication()`\nmethod.",
        "type": "Method"
      }
    ],
    "name": "UniversalArchive",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip)\n\nUsing this Spoon enables you to use a single hotkey to archive an\nitem in multiple applications.  Out of the box the following\napplications are supported: Evernote, Mail, Spark and Outlook. You\ncan easily register handlers for new applications (or override the\nbuilt-in ones) using the `registerApplication()` method. If you\nwrite a new handler and feel others could benefit from it, please\nsubmit a pull request!\n\nHandlers can also provide support for archiving to multiple\nlocations, and you can bind different hotkeys for each\ndestination. At the moment only Evernote supports this. See the\ndocumentation for `bindHotkeys()` for the details on how to\nspecify multiple-destination filing hotkeys.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "desc": "Dispatch a URL to an application according to the defined `url_patterns`.",
        "doc": "Dispatch a URL to an application according to the defined `url_patterns`.\n\nParameters (according to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification):\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL",
        "name": "dispatchURL",
        "signature": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "stripped_doc": "Parameters (according to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification):\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL",
        "type": "Method"
      },
      {
        "def": "URLDispatcher:start()",
        "desc": "Start dispatching URLs according to the rules",
        "doc": "Start dispatching URLs according to the rules",
        "name": "start",
        "signature": "URLDispatcher:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "URLDispatcher.decode_slack_redir_urls",
        "desc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "doc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "name": "decode_slack_redir_urls",
        "signature": "URLDispatcher.decode_slack_redir_urls",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.default_handler",
        "desc": "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "doc": "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "name": "default_handler",
        "signature": "URLDispatcher.default_handler",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "URLDispatcher.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.url_patterns",
        "desc": "URL dispatch rules.",
        "doc": "URL dispatch rules.\nA table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`.",
        "name": "url_patterns",
        "signature": "URLDispatcher.url_patterns",
        "stripped_doc": "A table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`.",
        "type": "Variable"
      }
    ],
    "desc": "Route URLs to different applications with pattern matching",
    "doc": "Route URLs to different applications with pattern matching\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip)\n\nSets Hammerspoon as the default browser for HTTP/HTTPS links, and\ndispatches them to different apps according to the patterns defined\nin the config. If no pattern matches, `default_handler` is used.",
    "items": [
      {
        "def": "URLDispatcher.decode_slack_redir_urls",
        "desc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "doc": "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "name": "decode_slack_redir_urls",
        "signature": "URLDispatcher.decode_slack_redir_urls",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher.default_handler",
        "desc": "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "doc": "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "name": "default_handler",
        "signature": "URLDispatcher.default_handler",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "desc": "Dispatch a URL to an application according to the defined `url_patterns`.",
        "doc": "Dispatch a URL to an application according to the defined `url_patterns`.\n\nParameters (according to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification):\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL",
        "name": "dispatchURL",
        "signature": "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "stripped_doc": "Parameters (according to the [httpCallback](http://www.hammerspoon.org/docs/hs.urlevent.html#httpCallback) specification):\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL",
        "type": "Method"
      },
      {
        "def": "URLDispatcher.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "URLDispatcher.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "URLDispatcher:start()",
        "desc": "Start dispatching URLs according to the rules",
        "doc": "Start dispatching URLs according to the rules",
        "name": "start",
        "signature": "URLDispatcher:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "URLDispatcher.url_patterns",
        "desc": "URL dispatch rules.",
        "doc": "URL dispatch rules.\nA table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`.",
        "name": "url_patterns",
        "signature": "URLDispatcher.url_patterns",
        "stripped_doc": "A table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https://www.lua.org/pil/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`.",
        "type": "Variable"
      }
    ],
    "name": "URLDispatcher",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/URLDispatcher.spoon.zip)\n\nSets Hammerspoon as the default browser for HTTP/HTTPS links, and\ndispatches them to different apps according to the patterns defined\nin the config. If no pattern matches, `default_handler` is used.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "desc": "Process the rules and execute any actions corresponding to the specified transition.",
        "doc": "Process the rules and execute any actions corresponding to the specified transition.\n\nThis method is called internally by the `hs.wifi.watcher` object\nwhen WiFi transitions happen. It does not get any system\ninformation nor does it set any Spoon state information, so it can\nalso be used to \"trigger\" transitions manually, either for testing\nor if the automated processing fails for any reason.\n\nParameters:\n * new_ssid - new SSID name\n * prev_ssid - previous SSID name. Defaults to `nil`\n * interface - interface where the transition occurred. Defaults to `nil`",
        "name": "processTransition",
        "parameters": [
          " * new_ssid - new SSID name",
          " * prev_ssid - previous SSID name. Defaults to `nil`",
          " * interface - interface where the transition occurred. Defaults to `nil`"
        ],
        "signature": "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "stripped_doc": "This method is called internally by the `hs.wifi.watcher` object\nwhen WiFi transitions happen. It does not get any system\ninformation nor does it set any Spoon state information, so it can\nalso be used to \"trigger\" transitions manually, either for testing\nor if the automated processing fails for any reason.",
        "type": "Method"
      },
      {
        "def": "WiFiTransitions:start()",
        "desc": "Start the WiFi watcher",
        "doc": "Start the WiFi watcher\n\nReturns:\n * The WiFiTransitions spoon object",
        "name": "start",
        "returns": [
          " * The WiFiTransitions spoon object"
        ],
        "signature": "WiFiTransitions:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "WiFiTransitions.actions",
        "desc": "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:",
        "doc": "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:\n * to - if given, pattern to match against the new SSID. Defaults to match any network. Transitions through the disabled state are ignored (i.e. normally a `nil` SSID is reported when switching SSIDs)\n * from - if given, pattern to match against the previous SSID. Defaults to match any network.\n * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:\n   * event - always \"SSIDChange\"\n   * interface - name of the interface on which the SSID changed\n   * old_ssid - previous SSID name\n   * new_ssid - new SSID name\n * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored.",
        "name": "actions",
        "signature": "WiFiTransitions.actions",
        "stripped_doc": " * to - if given, pattern to match against the new SSID. Defaults to match any network. Transitions through the disabled state are ignored (i.e. normally a `nil` SSID is reported when switching SSIDs)\n * from - if given, pattern to match against the previous SSID. Defaults to match any network.\n * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:\n   * event - always \"SSIDChange\"\n   * interface - name of the interface on which the SSID changed\n   * old_ssid - previous SSID name\n   * new_ssid - new SSID name\n * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored.",
        "type": "Variable"
      },
      {
        "def": "WiFiTransitions.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "WiFiTransitions.logger",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Allow arbitrary actions when transitioning between SSIDs",
    "doc": "Allow arbitrary actions when transitioning between SSIDs\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WiFiTransitions.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WiFiTransitions.spoon.zip)",
    "items": [
      {
        "def": "WiFiTransitions.actions",
        "desc": "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:",
        "doc": "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:\n * to - if given, pattern to match against the new SSID. Defaults to match any network. Transitions through the disabled state are ignored (i.e. normally a `nil` SSID is reported when switching SSIDs)\n * from - if given, pattern to match against the previous SSID. Defaults to match any network.\n * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:\n   * event - always \"SSIDChange\"\n   * interface - name of the interface on which the SSID changed\n   * old_ssid - previous SSID name\n   * new_ssid - new SSID name\n * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored.",
        "name": "actions",
        "signature": "WiFiTransitions.actions",
        "stripped_doc": " * to - if given, pattern to match against the new SSID. Defaults to match any network. Transitions through the disabled state are ignored (i.e. normally a `nil` SSID is reported when switching SSIDs)\n * from - if given, pattern to match against the previous SSID. Defaults to match any network.\n * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:\n   * event - always \"SSIDChange\"\n   * interface - name of the interface on which the SSID changed\n   * old_ssid - previous SSID name\n   * new_ssid - new SSID name\n * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored.",
        "type": "Variable"
      },
      {
        "def": "WiFiTransitions.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "WiFiTransitions.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "desc": "Process the rules and execute any actions corresponding to the specified transition.",
        "doc": "Process the rules and execute any actions corresponding to the specified transition.\n\nThis method is called internally by the `hs.wifi.watcher` object\nwhen WiFi transitions happen. It does not get any system\ninformation nor does it set any Spoon state information, so it can\nalso be used to \"trigger\" transitions manually, either for testing\nor if the automated processing fails for any reason.\n\nParameters:\n * new_ssid - new SSID name\n * prev_ssid - previous SSID name. Defaults to `nil`\n * interface - interface where the transition occurred. Defaults to `nil`",
        "name": "processTransition",
        "parameters": [
          " * new_ssid - new SSID name",
          " * prev_ssid - previous SSID name. Defaults to `nil`",
          " * interface - interface where the transition occurred. Defaults to `nil`"
        ],
        "signature": "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "stripped_doc": "This method is called internally by the `hs.wifi.watcher` object\nwhen WiFi transitions happen. It does not get any system\ninformation nor does it set any Spoon state information, so it can\nalso be used to \"trigger\" transitions manually, either for testing\nor if the automated processing fails for any reason.",
        "type": "Method"
      },
      {
        "def": "WiFiTransitions:start()",
        "desc": "Start the WiFi watcher",
        "doc": "Start the WiFi watcher\n\nReturns:\n * The WiFiTransitions spoon object",
        "name": "start",
        "returns": [
          " * The WiFiTransitions spoon object"
        ],
        "signature": "WiFiTransitions:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "WiFiTransitions",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WiFiTransitions.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/WiFiTransitions.spoon.zip)",
    "submodules": [],
    "type": "Module"
  }
]