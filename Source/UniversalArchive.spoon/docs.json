[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "UniversalArchive:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for UniversalArchive",
        "doc": "Binds hotkeys for UniversalArchive\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.\n  * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations.",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "182",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.",
          "  * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations."
        ],
        "signature": "UniversalArchive:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:evernoteArchive(where)",
        "desc": "Archive current note in Evernote.",
        "doc": "Archive current note in Evernote.\n\nParameters:\n * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`.",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "60",
        "name": "evernoteArchive",
        "parameters": [
          " * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`."
        ],
        "signature": "UniversalArchive:evernoteArchive(where)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:mailArchive()",
        "desc": "Archive current message in Mail using the built-in Archive functionality",
        "doc": "Archive current message in Mail using the built-in Archive functionality\n\nParameters:\n * none",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "84",
        "name": "mailArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:mailArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:outlookArchive()",
        "desc": "Archive current message in Outlook using one of two methods:",
        "doc": "Archive current message in Outlook using one of two methods:\n\nParameters:\n * none\n\nNotes:\n * If the \"Message -> Archive\" menu item exists, it is used (this has been added in recent versions of Outlook)\n * Otherwise, the message gets manually moved to the folder specified in `UniversalArchive.outlook_archive_folder`. The folder has to appear in the Message -> Move submenu for this to work. Since this submenu only lists the last few destination folders, you have to move a message by hand the first time (or periodically if you don't archive very often).",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "120",
        "name": "outlookArchive",
        "notes": [
          " * If the \"Message -> Archive\" menu item exists, it is used (this has been added in recent versions of Outlook)",
          " * Otherwise, the message gets manually moved to the folder specified in `UniversalArchive.outlook_archive_folder`. The folder has to appear in the Message -> Move submenu for this to work. Since this submenu only lists the last few destination folders, you have to move a message by hand the first time (or periodically if you don't archive very often)."
        ],
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:outlookArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:registerApplication(appname, fn)",
        "desc": "Register a handler function for an application.",
        "doc": "Register a handler function for an application.\n\nParameters:\n * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.\n * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:\n   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.\n   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler.",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "165",
        "name": "registerApplication",
        "parameters": [
          " * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.",
          " * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:",
          "   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.",
          "   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler."
        ],
        "signature": "UniversalArchive:registerApplication(appname, fn)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:sparkArchive()",
        "desc": "Archive current message in Spark using the built-in Archive functionality",
        "doc": "Archive current message in Spark using the built-in Archive functionality\n\nParameters:\n * none",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "102",
        "name": "sparkArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:sparkArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:universalArchive(where)",
        "desc": "Main entry point for archiving an item.",
        "doc": "Main entry point for archiving an item.\n\nParameters:\n * None\n\nNotes:\n * If a handler function is defined for the current application, it is called with the `UniversalArchive` object as its first argument, and the archive destination (if provided) as the second.\n * Handlers must have a \"default destination\" that gets used when no destination is provided. Not all handlers support specifying a destination. New handlers can be registered using the `registerApplication()` method.",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "142",
        "name": "universalArchive",
        "notes": [
          " * If a handler function is defined for the current application, it is called with the `UniversalArchive` object as its first argument, and the archive destination (if provided) as the second.",
          " * Handlers must have a \"default destination\" that gets used when no destination is provided. Not all handlers support specifying a destination. New handlers can be registered using the `registerApplication()` method."
        ],
        "parameters": [
          " * None"
        ],
        "signature": "UniversalArchive:universalArchive(where)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "UniversalArchive.archive_notifications",
        "desc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "doc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "46",
        "name": "archive_notifications",
        "signature": "UniversalArchive.archive_notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.evernote_archive_notebook",
        "desc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "doc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "36",
        "name": "evernote_archive_notebook",
        "signature": "UniversalArchive.evernote_archive_notebook",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.evernote_delay_before_typing",
        "desc": "In Evernote, archive is done by selectin \"Move note\" and then",
        "doc": "In Evernote, archive is done by selectin \"Move note\" and then\nsimulating typing of the notebook name. A short pause in between\nmakes it more reliable for Evernote to recognize the notebook name\ncorrectly. This variable controls how much to wait, in seconds.\nDo not change this unless you know what you are doing",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "51",
        "name": "evernote_delay_before_typing",
        "signature": "UniversalArchive.evernote_delay_before_typing",
        "stripped_doc": "simulating typing of the notebook name. A short pause in between\nmakes it more reliable for Evernote to recognize the notebook name\ncorrectly. This variable controls how much to wait, in seconds.\nDo not change this unless you know what you are doing",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "31",
        "name": "logger",
        "signature": "UniversalArchive.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.outlook_archive_folder",
        "desc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "doc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "41",
        "name": "outlook_archive_folder",
        "signature": "UniversalArchive.outlook_archive_folder",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Handle \"archive current item\" for multiple applications using the same hotkey",
    "doc": "Handle \"archive current item\" for multiple applications using the same hotkey\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip)\n\nUsing this Spoon enables you to use a single hotkey to archive an\nitem in multiple applications.  Out of the box the following\napplications are supported: Evernote, Mail, Spark and Outlook. You\ncan easily register handlers for new applications (or override the\nbuilt-in ones) using the `registerApplication()` method. If you\nwrite a new handler and feel others could benefit from it, please\nsubmit a pull request!\n\nHandlers can also provide support for archiving to multiple\nlocations, and you can bind different hotkeys for each\ndestination. At the moment only Evernote supports this. See the\ndocumentation for `bindHotkeys()` for the details on how to\nspecify multiple-destination filing hotkeys.",
    "items": [
      {
        "def": "UniversalArchive.archive_notifications",
        "desc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "doc": "Boolean indicating whether a notification should be produced when an item is archived. Defaults to \"true\".",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "46",
        "name": "archive_notifications",
        "signature": "UniversalArchive.archive_notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for UniversalArchive",
        "doc": "Binds hotkeys for UniversalArchive\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for the following items:\n  * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.\n  * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations.",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "182",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for the following items:",
          "  * `archive` - hotkey for trigger the `universalArchive()` method, to archive the current item on the current application.",
          "  * `<app>_<dest>` - if an application handler supports multiple destinations, you can specify hotkeys for specific destinations using this format. For example, to assign a hotkey that files the current note in Evernote to the \"MyProject\" notebook using Ctrl-Alt-Cmd-M, you would specify `Evernote_MyProject = { { \"ctrl\", \"alt\", \"cmd\" }, \"m\" }` as one of the elements of `mapping`. Keep in mind that the application name must appear exactly as the system sees it (including upper/lowercase), and that if either the application or the destination name contain spaces or other non-alphanumeric characters, you need to use the Lua table notation. For example: `[\"Evernote_Some Long Notebook Name\"] = { keybinding }`. At the moment only the Evernote handler supports multiple destinations."
        ],
        "signature": "UniversalArchive:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive.evernote_archive_notebook",
        "desc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "doc": "Name of the Notebook to use for archiving in Evernote. Defaults to \"Archive\"",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "36",
        "name": "evernote_archive_notebook",
        "signature": "UniversalArchive.evernote_archive_notebook",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive.evernote_delay_before_typing",
        "desc": "In Evernote, archive is done by selectin \"Move note\" and then",
        "doc": "In Evernote, archive is done by selectin \"Move note\" and then\nsimulating typing of the notebook name. A short pause in between\nmakes it more reliable for Evernote to recognize the notebook name\ncorrectly. This variable controls how much to wait, in seconds.\nDo not change this unless you know what you are doing",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "51",
        "name": "evernote_delay_before_typing",
        "signature": "UniversalArchive.evernote_delay_before_typing",
        "stripped_doc": "simulating typing of the notebook name. A short pause in between\nmakes it more reliable for Evernote to recognize the notebook name\ncorrectly. This variable controls how much to wait, in seconds.\nDo not change this unless you know what you are doing",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:evernoteArchive(where)",
        "desc": "Archive current note in Evernote.",
        "doc": "Archive current note in Evernote.\n\nParameters:\n * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`.",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "60",
        "name": "evernoteArchive",
        "parameters": [
          " * where - destination notebook. Defaults to the value of `UniversalArchive.evernote_archive_notebook`."
        ],
        "signature": "UniversalArchive:evernoteArchive(where)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "31",
        "name": "logger",
        "signature": "UniversalArchive.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:mailArchive()",
        "desc": "Archive current message in Mail using the built-in Archive functionality",
        "doc": "Archive current message in Mail using the built-in Archive functionality\n\nParameters:\n * none",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "84",
        "name": "mailArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:mailArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive.outlook_archive_folder",
        "desc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "doc": "Name of the mailbox to use for archiving in Outlook. You must move a message manually to that mailbox at least once so that it appears in the \"Message\" -> \"Move...\" submenu. Defaults to \"Archive\"",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "41",
        "name": "outlook_archive_folder",
        "signature": "UniversalArchive.outlook_archive_folder",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "UniversalArchive:outlookArchive()",
        "desc": "Archive current message in Outlook using one of two methods:",
        "doc": "Archive current message in Outlook using one of two methods:\n\nParameters:\n * none\n\nNotes:\n * If the \"Message -> Archive\" menu item exists, it is used (this has been added in recent versions of Outlook)\n * Otherwise, the message gets manually moved to the folder specified in `UniversalArchive.outlook_archive_folder`. The folder has to appear in the Message -> Move submenu for this to work. Since this submenu only lists the last few destination folders, you have to move a message by hand the first time (or periodically if you don't archive very often).",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "120",
        "name": "outlookArchive",
        "notes": [
          " * If the \"Message -> Archive\" menu item exists, it is used (this has been added in recent versions of Outlook)",
          " * Otherwise, the message gets manually moved to the folder specified in `UniversalArchive.outlook_archive_folder`. The folder has to appear in the Message -> Move submenu for this to work. Since this submenu only lists the last few destination folders, you have to move a message by hand the first time (or periodically if you don't archive very often)."
        ],
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:outlookArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:registerApplication(appname, fn)",
        "desc": "Register a handler function for an application.",
        "doc": "Register a handler function for an application.\n\nParameters:\n * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.\n * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:\n   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.\n   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler.",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "165",
        "name": "registerApplication",
        "parameters": [
          " * appname - string containing the name of the application. If the application already has a handler, it will be replaced with the new one.",
          " * fn - handler function (to remove the handler for an application, use `nil`). The function receives the following arguments:",
          "   * self - the UniversalArchive object, so the handler can make use of all the object methods and variables.",
          "   * where - optional \"destination\" for the archive operation. Handlers must provide a default destination when `where == nil`. Destination doesn't make sense for all applications, so the implementation of this is optional and depending on the handler."
        ],
        "signature": "UniversalArchive:registerApplication(appname, fn)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:sparkArchive()",
        "desc": "Archive current message in Spark using the built-in Archive functionality",
        "doc": "Archive current message in Spark using the built-in Archive functionality\n\nParameters:\n * none",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "102",
        "name": "sparkArchive",
        "parameters": [
          " * none"
        ],
        "signature": "UniversalArchive:sparkArchive()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "UniversalArchive:universalArchive(where)",
        "desc": "Main entry point for archiving an item.",
        "doc": "Main entry point for archiving an item.\n\nParameters:\n * None\n\nNotes:\n * If a handler function is defined for the current application, it is called with the `UniversalArchive` object as its first argument, and the archive destination (if provided) as the second.\n * Handlers must have a \"default destination\" that gets used when no destination is provided. Not all handlers support specifying a destination. New handlers can be registered using the `registerApplication()` method.",
        "file": "Source/UniversalArchive.spoon//init.lua",
        "lineno": "142",
        "name": "universalArchive",
        "notes": [
          " * If a handler function is defined for the current application, it is called with the `UniversalArchive` object as its first argument, and the archive destination (if provided) as the second.",
          " * Handlers must have a \"default destination\" that gets used when no destination is provided. Not all handlers support specifying a destination. New handlers can be registered using the `registerApplication()` method."
        ],
        "parameters": [
          " * None"
        ],
        "signature": "UniversalArchive:universalArchive(where)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "UniversalArchive",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/UniversalArchive.spoon.zip)\n\nUsing this Spoon enables you to use a single hotkey to archive an\nitem in multiple applications.  Out of the box the following\napplications are supported: Evernote, Mail, Spark and Outlook. You\ncan easily register handlers for new applications (or override the\nbuilt-in ones) using the `registerApplication()` method. If you\nwrite a new handler and feel others could benefit from it, please\nsubmit a pull request!\n\nHandlers can also provide support for archiving to multiple\nlocations, and you can bind different hotkeys for each\ndestination. At the moment only Evernote supports this. See the\ndocumentation for `bindHotkeys()` for the details on how to\nspecify multiple-destination filing hotkeys.",
    "submodules": [],
    "type": "Module"
  }
]