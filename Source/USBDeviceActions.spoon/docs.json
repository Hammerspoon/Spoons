[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "A table where the keys should correspond to `productName`s of USB devices and the values should be tables containing the keys `apps` and\/or `fn`. (You can find the `productName` for a connected USB device using `hs.usb.attachedDevices()`).\n\nThe value of the `apps` key should contain a list of apps that will be launched\/killed when the USB device is connected\/disconnected. The value of the `fn` key should be a single parameter function that will be passed `true`\/`false` when the USB device is connected\/disconnected.\n\nExample:\n```\n{\n  ScanSnapiX500EE            = { apps = { \"ScanSnap Manager Evernote Edition\" } },\n  Planck                     = { fn = toggleKeyboardLayout },\n  [\"Corne Keyboard (crkbd)\"] = { fn = toggleKeyboardLayout }\n}\n```",
        "stripped_doc" : [
          "A table where the keys should correspond to `productName`s of USB devices and the values should be tables containing the keys `apps` and\/or `fn`. (You can find the `productName` for a connected USB device using `hs.usb.attachedDevices()`).",
          "",
          "The value of the `apps` key should contain a list of apps that will be launched\/killed when the USB device is connected\/disconnected. The value of the `fn` key should be a single parameter function that will be passed `true`\/`false` when the USB device is connected\/disconnected.",
          "",
          "Example:",
          "```",
          "{",
          "  ScanSnapiX500EE            = { apps = { \"ScanSnap Manager Evernote Edition\" } },",
          "  Planck                     = { fn = toggleKeyboardLayout },",
          "  [\"Corne Keyboard (crkbd)\"] = { fn = toggleKeyboardLayout }",
          "}",
          "```"
        ],
        "def" : "USBDeviceActions.devices (Table)",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "USBDeviceActions.devices (Table)",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "devices",
        "desc" : "A table where the keys should correspond to `productName`s of USB devices and the values should be tables containing the keys `apps` and\/or `fn`. (You can find the `productName` for a connected USB device using `hs.usb.attachedDevices()`)."
      }
    ],
    "stripped_doc" : [

    ],
    "type" : "Module",
    "Deprecated" : [

    ],
    "desc" : "Open\/close apps or run an arbitrary function when a USB device is connected\/disconnected.",
    "Constructor" : [

    ],
    "doc" : "Open\/close apps or run an arbitrary function when a USB device is connected\/disconnected.\n\nExample configuration (using SpoonInstall.spoon):\n```\nfunction toggleKeyboardLayout(x)\n  if x then\n    hs.keycodes.setLayout(\"U.S.\")\n  else\n    hs.keycodes.setLayout(\"Colemak\")\n  end\nend\n\nspoonInstall:andUse(\n  \"USBDeviceActions\",\n  {\n    config = {\n      devices = {\n        ScanSnapiX500EE            = { apps = { \"ScanSnap Manager Evernote Edition\" } },\n        Planck                     = { fn = toggleKeyboardLayout },\n        [\"Corne Keyboard (crkbd)\"] = { fn = toggleKeyboardLayout }\n      }\n    },\n    start = true\n  }\n)\n```",
    "Field" : [

    ],
    "Command" : [

    ],
    "Method" : [
      {
        "doc" : "Creates an `hs.usb.watcher` with a callback that will execute the specified actions for the USB devices in `USBDeviceActions.devices` when they are connected\/disconnected, but doesn't start the watcher.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Creates an `hs.usb.watcher` with a callback that will execute the specified actions for the USB devices in `USBDeviceActions.devices` when they are connected\/disconnected, but doesn't start the watcher.",
          ""
        ],
        "def" : "USBDeviceActions:init() -> Self",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "USBDeviceActions:init() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "name" : "init",
        "desc" : "Creates an `hs.usb.watcher` with a callback that will execute the specified actions for the USB devices in `USBDeviceActions.devices` when they are connected\/disconnected, but doesn't start the watcher."
      },
      {
        "doc" : "Starts the `hs.usb.watcher` created by `USBDeviceActions:init()`.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Starts the `hs.usb.watcher` created by `USBDeviceActions:init()`.",
          ""
        ],
        "def" : "USBDeviceActions:start() -> Self",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "USBDeviceActions:start() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "name" : "start",
        "desc" : "Starts the `hs.usb.watcher` created by `USBDeviceActions:init()`."
      },
      {
        "doc" : "Stops the `hs.usb.watcher` created by `USBDeviceActions:init()`.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Stops the `hs.usb.watcher` created by `USBDeviceActions:init()`.",
          ""
        ],
        "def" : "USBDeviceActions:stop() -> Self",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "USBDeviceActions:stop() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "name" : "stop",
        "desc" : "Stops the `hs.usb.watcher` created by `USBDeviceActions:init()`."
      }
    ],
    "items" : [
      {
        "doc" : "A table where the keys should correspond to `productName`s of USB devices and the values should be tables containing the keys `apps` and\/or `fn`. (You can find the `productName` for a connected USB device using `hs.usb.attachedDevices()`).\n\nThe value of the `apps` key should contain a list of apps that will be launched\/killed when the USB device is connected\/disconnected. The value of the `fn` key should be a single parameter function that will be passed `true`\/`false` when the USB device is connected\/disconnected.\n\nExample:\n```\n{\n  ScanSnapiX500EE            = { apps = { \"ScanSnap Manager Evernote Edition\" } },\n  Planck                     = { fn = toggleKeyboardLayout },\n  [\"Corne Keyboard (crkbd)\"] = { fn = toggleKeyboardLayout }\n}\n```",
        "stripped_doc" : [
          "A table where the keys should correspond to `productName`s of USB devices and the values should be tables containing the keys `apps` and\/or `fn`. (You can find the `productName` for a connected USB device using `hs.usb.attachedDevices()`).",
          "",
          "The value of the `apps` key should contain a list of apps that will be launched\/killed when the USB device is connected\/disconnected. The value of the `fn` key should be a single parameter function that will be passed `true`\/`false` when the USB device is connected\/disconnected.",
          "",
          "Example:",
          "```",
          "{",
          "  ScanSnapiX500EE            = { apps = { \"ScanSnap Manager Evernote Edition\" } },",
          "  Planck                     = { fn = toggleKeyboardLayout },",
          "  [\"Corne Keyboard (crkbd)\"] = { fn = toggleKeyboardLayout }",
          "}",
          "```"
        ],
        "def" : "USBDeviceActions.devices (Table)",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "USBDeviceActions.devices (Table)",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "devices",
        "desc" : "A table where the keys should correspond to `productName`s of USB devices and the values should be tables containing the keys `apps` and\/or `fn`. (You can find the `productName` for a connected USB device using `hs.usb.attachedDevices()`)."
      },
      {
        "doc" : "Creates an `hs.usb.watcher` with a callback that will execute the specified actions for the USB devices in `USBDeviceActions.devices` when they are connected\/disconnected, but doesn't start the watcher.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Creates an `hs.usb.watcher` with a callback that will execute the specified actions for the USB devices in `USBDeviceActions.devices` when they are connected\/disconnected, but doesn't start the watcher.",
          ""
        ],
        "def" : "USBDeviceActions:init() -> Self",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "USBDeviceActions:init() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "name" : "init",
        "desc" : "Creates an `hs.usb.watcher` with a callback that will execute the specified actions for the USB devices in `USBDeviceActions.devices` when they are connected\/disconnected, but doesn't start the watcher."
      },
      {
        "doc" : "Starts the `hs.usb.watcher` created by `USBDeviceActions:init()`.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Starts the `hs.usb.watcher` created by `USBDeviceActions:init()`.",
          ""
        ],
        "def" : "USBDeviceActions:start() -> Self",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "USBDeviceActions:start() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "name" : "start",
        "desc" : "Starts the `hs.usb.watcher` created by `USBDeviceActions:init()`."
      },
      {
        "doc" : "Stops the `hs.usb.watcher` created by `USBDeviceActions:init()`.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Stops the `hs.usb.watcher` created by `USBDeviceActions:init()`.",
          ""
        ],
        "def" : "USBDeviceActions:stop() -> Self",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "USBDeviceActions:stop() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "name" : "stop",
        "desc" : "Stops the `hs.usb.watcher` created by `USBDeviceActions:init()`."
      }
    ],
    "name" : "USBDeviceActions"
  }
]