[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MenubarFlag:drawIndicators(src)",
        "desc": "Draw the indicators corresponding to the given layout name",
        "doc": "Draw the indicators corresponding to the given layout name\n\nParameters:\n * src - name of the layout to draw. If the given element exists in `MenubarFlag.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen.\n\nReturns:\n * The MenubarFlag object",
        "examples": [],
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "118",
        "name": "drawIndicators",
        "notes": [],
        "parameters": [
          " * src - name of the layout to draw. If the given element exists in `MenubarFlag.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen."
        ],
        "returns": [
          " * The MenubarFlag object"
        ],
        "signature": "MenubarFlag:drawIndicators(src)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:getLayoutAndDrawindicators()",
        "desc": "Draw indicators for the current keyboard method or layout",
        "doc": "Draw indicators for the current keyboard method or layout\n\nParameters:\n * None\n\nReturns:\n * The MenubarFlag object",
        "examples": [],
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "175",
        "name": "getLayoutAndDrawindicators",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MenubarFlag object"
        ],
        "signature": "MenubarFlag:getLayoutAndDrawindicators()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:start()",
        "desc": "Start the keyboard layout watcher to draw the menubar indicators.",
        "doc": "Start the keyboard layout watcher to draw the menubar indicators.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "188",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MenubarFlag:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:stop()",
        "desc": "Remove indicators and stop the keyboard layout watcher",
        "doc": "Remove indicators and stop the keyboard layout watcher\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "208",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MenubarFlag:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "MenubarFlag.allScreens",
        "desc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "doc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "22",
        "name": "allScreens",
        "signature": "MenubarFlag.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.colors",
        "desc": "Table that contains the configuration of indicator colors",
        "doc": "Table that contains the configuration of indicator colors\n\nNotes:\n * The table below indicates the colors to use for a given keyboard layout.\n * The index is the name of the layout as it appears in the input source menu.\n * The value of each indicator is a table made of an arbitrary number of segments, which will be distributed evenly across the width of the screen.\n * Each segment must be a valid `hs.drawing.color` specification (most commonly, you should just use the named colors from within the tables). If a layout is not found, then the indicators are removed when that layout is active.\n * Indicator specs can be static flag-like:\n```\n  Spanish = {col.green, col.white, col.red},\n  German = {col.black, col.red, col.yellow},\n```\nor complex, programmatically-generated:\n```\n[\"U.S.\"] = (\n   function() res={}\n      for i = 0,10,1 do\n         table.insert(res, col.blue)\n         table.insert(res, col.white)\n         table.insert(res, col.red)\n      end\n      return res\n   end)()\n```\nor solid colors:\n```\n  Spanish = {col.red},\n  German = {col.yellow},\n```\n * Contributions of indicator specs are welcome!",
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "42",
        "name": "colors",
        "notes": [
          " * The table below indicates the colors to use for a given keyboard layout.",
          " * The index is the name of the layout as it appears in the input source menu.",
          " * The value of each indicator is a table made of an arbitrary number of segments, which will be distributed evenly across the width of the screen.",
          " * Each segment must be a valid `hs.drawing.color` specification (most commonly, you should just use the named colors from within the tables). If a layout is not found, then the indicators are removed when that layout is active.",
          " * Indicator specs can be static flag-like:",
          "```",
          "  Spanish = {col.green, col.white, col.red},",
          "  German = {col.black, col.red, col.yellow},",
          "```",
          "or complex, programmatically-generated:",
          "```",
          "[\"U.S.\"] = (",
          "   function() res={}",
          "      for i = 0,10,1 do",
          "         table.insert(res, col.blue)",
          "         table.insert(res, col.white)",
          "         table.insert(res, col.red)",
          "      end",
          "      return res",
          "   end)()",
          "```",
          "or solid colors:",
          "```",
          "  Spanish = {col.red},",
          "  German = {col.yellow},",
          "```",
          " * Contributions of indicator specs are welcome!"
        ],
        "signature": "MenubarFlag.colors",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorAlpha",
        "desc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "doc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "32",
        "name": "indicatorAlpha",
        "signature": "MenubarFlag.indicatorAlpha",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorHeight",
        "desc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "doc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "27",
        "name": "indicatorHeight",
        "signature": "MenubarFlag.indicatorHeight",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorInAllSpaces",
        "desc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "doc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "37",
        "name": "indicatorInAllSpaces",
        "signature": "MenubarFlag.indicatorInAllSpaces",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.timerFreq",
        "desc": "Number to indicate how frequently (in seconds) should the menubar indicator be updated. Defaults to 1.0.",
        "doc": "Number to indicate how frequently (in seconds) should the menubar indicator be updated. Defaults to 1.0.\n\nNotes:\n * Sometimes Hammerspoon misses the callback when the keyboard layout changes. As a workaround, MenuBarFlag can automatically update the indicator at a fixed frequency.\n * The timer can be disabled by setting this parameter to 0.",
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "80",
        "name": "timerFreq",
        "notes": [
          " * Sometimes Hammerspoon misses the callback when the keyboard layout changes. As a workaround, MenuBarFlag can automatically update the indicator at a fixed frequency.",
          " * The timer can be disabled by setting this parameter to 0."
        ],
        "signature": "MenubarFlag.timerFreq",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Color the menubar according to the current keyboard layout",
    "doc": "Color the menubar according to the current keyboard layout\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag.spoon.zip)\n\nFunctionality inspired by [ShowyEdge](https://pqrs.org/osx/ShowyEdge/index.html.en)",
    "items": [
      {
        "def": "MenubarFlag.allScreens",
        "desc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "doc": "Boolean to specify whether the indicators should be shown on all monitors or just the current one. Defaults to `true`",
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "22",
        "name": "allScreens",
        "signature": "MenubarFlag.allScreens",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.colors",
        "desc": "Table that contains the configuration of indicator colors",
        "doc": "Table that contains the configuration of indicator colors\n\nNotes:\n * The table below indicates the colors to use for a given keyboard layout.\n * The index is the name of the layout as it appears in the input source menu.\n * The value of each indicator is a table made of an arbitrary number of segments, which will be distributed evenly across the width of the screen.\n * Each segment must be a valid `hs.drawing.color` specification (most commonly, you should just use the named colors from within the tables). If a layout is not found, then the indicators are removed when that layout is active.\n * Indicator specs can be static flag-like:\n```\n  Spanish = {col.green, col.white, col.red},\n  German = {col.black, col.red, col.yellow},\n```\nor complex, programmatically-generated:\n```\n[\"U.S.\"] = (\n   function() res={}\n      for i = 0,10,1 do\n         table.insert(res, col.blue)\n         table.insert(res, col.white)\n         table.insert(res, col.red)\n      end\n      return res\n   end)()\n```\nor solid colors:\n```\n  Spanish = {col.red},\n  German = {col.yellow},\n```\n * Contributions of indicator specs are welcome!",
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "42",
        "name": "colors",
        "notes": [
          " * The table below indicates the colors to use for a given keyboard layout.",
          " * The index is the name of the layout as it appears in the input source menu.",
          " * The value of each indicator is a table made of an arbitrary number of segments, which will be distributed evenly across the width of the screen.",
          " * Each segment must be a valid `hs.drawing.color` specification (most commonly, you should just use the named colors from within the tables). If a layout is not found, then the indicators are removed when that layout is active.",
          " * Indicator specs can be static flag-like:",
          "```",
          "  Spanish = {col.green, col.white, col.red},",
          "  German = {col.black, col.red, col.yellow},",
          "```",
          "or complex, programmatically-generated:",
          "```",
          "[\"U.S.\"] = (",
          "   function() res={}",
          "      for i = 0,10,1 do",
          "         table.insert(res, col.blue)",
          "         table.insert(res, col.white)",
          "         table.insert(res, col.red)",
          "      end",
          "      return res",
          "   end)()",
          "```",
          "or solid colors:",
          "```",
          "  Spanish = {col.red},",
          "  German = {col.yellow},",
          "```",
          " * Contributions of indicator specs are welcome!"
        ],
        "signature": "MenubarFlag.colors",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag:drawIndicators(src)",
        "desc": "Draw the indicators corresponding to the given layout name",
        "doc": "Draw the indicators corresponding to the given layout name\n\nParameters:\n * src - name of the layout to draw. If the given element exists in `MenubarFlag.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen.\n\nReturns:\n * The MenubarFlag object",
        "examples": [],
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "118",
        "name": "drawIndicators",
        "notes": [],
        "parameters": [
          " * src - name of the layout to draw. If the given element exists in `MenubarFlag.colors`, it will be drawn. If it does not exist, then the indicators will be removed from the screen."
        ],
        "returns": [
          " * The MenubarFlag object"
        ],
        "signature": "MenubarFlag:drawIndicators(src)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:getLayoutAndDrawindicators()",
        "desc": "Draw indicators for the current keyboard method or layout",
        "doc": "Draw indicators for the current keyboard method or layout\n\nParameters:\n * None\n\nReturns:\n * The MenubarFlag object",
        "examples": [],
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "175",
        "name": "getLayoutAndDrawindicators",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The MenubarFlag object"
        ],
        "signature": "MenubarFlag:getLayoutAndDrawindicators()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag.indicatorAlpha",
        "desc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "doc": "Number to specify the indicator transparency (0.0 - invisible; 1.0 - fully opaque). Defaults to 0.3",
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "32",
        "name": "indicatorAlpha",
        "signature": "MenubarFlag.indicatorAlpha",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorHeight",
        "desc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "doc": "Number to specify the height of the indicator. Specify 0.0-1.0 to specify a percentage of the height of the menu bar, larger values indicate a fixed height in pixels. Defaults to 1.0",
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "27",
        "name": "indicatorHeight",
        "signature": "MenubarFlag.indicatorHeight",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag.indicatorInAllSpaces",
        "desc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "doc": "Boolean to specify whether the indicator should be shown in all spaces (this includes full-screen mode). Defaults to `true`",
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "37",
        "name": "indicatorInAllSpaces",
        "signature": "MenubarFlag.indicatorInAllSpaces",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenubarFlag:start()",
        "desc": "Start the keyboard layout watcher to draw the menubar indicators.",
        "doc": "Start the keyboard layout watcher to draw the menubar indicators.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "188",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MenubarFlag:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag:stop()",
        "desc": "Remove indicators and stop the keyboard layout watcher",
        "doc": "Remove indicators and stop the keyboard layout watcher\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "208",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MenubarFlag:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenubarFlag.timerFreq",
        "desc": "Number to indicate how frequently (in seconds) should the menubar indicator be updated. Defaults to 1.0.",
        "doc": "Number to indicate how frequently (in seconds) should the menubar indicator be updated. Defaults to 1.0.\n\nNotes:\n * Sometimes Hammerspoon misses the callback when the keyboard layout changes. As a workaround, MenuBarFlag can automatically update the indicator at a fixed frequency.\n * The timer can be disabled by setting this parameter to 0.",
        "file": "Source/MenubarFlag.spoon//init.lua",
        "lineno": "80",
        "name": "timerFreq",
        "notes": [
          " * Sometimes Hammerspoon misses the callback when the keyboard layout changes. As a workaround, MenuBarFlag can automatically update the indicator at a fixed frequency.",
          " * The timer can be disabled by setting this parameter to 0."
        ],
        "signature": "MenubarFlag.timerFreq",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "MenubarFlag",
    "stripped_doc": "\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/MenubarFlag.spoon.zip)\n\nFunctionality inspired by [ShowyEdge](https://pqrs.org/osx/ShowyEdge/index.html.en)",
    "submodules": [],
    "type": "Module"
  }
]