[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Leanpub:displayAllBookStatus()",
        "desc": "Check and display (if needed) the status of all the books in",
        "doc": "Check and display (if needed) the status of all the books in\n`watch_books`",
        "name": "displayAllBookStatus",
        "signature": "Leanpub:displayAllBookStatus()",
        "stripped_doc": "`watch_books`",
        "type": "Method"
      },
      {
        "def": "Leanpub:displayBookStatus(book)",
        "desc": "Display a notification with the current build status of a book.",
        "doc": "Display a notification with the current build status of a book.\nOnly produce a notification if the current status is different\nthan the last known one (from the last time `displayBookStatus`\nwas run for the same book).\n\nParameters:\n * book - table containing the information of the book to\n   check. The table must contain the following fields:\n   * slug - URL \"slug\" of the book to check. The slug is the part\n     of the book URL after https://leanpub.com/.\n   * icon - optional icon to show in the notifications for the\n     book, as an `hs.image` object. If this field is not specified\n     but `fetch_leanpub_covers` is true (the default value), this\n     method attempts to fetch the book cover from Leanpub. If the\n     cover can be retrieved, it gets stored in the icon field so\n     it doesn't get fetched every time. You can disable cover\n     fetching for individual books by setting this field\n     explicitly to `false`\n\nReturns:\n * A Lua table containing the status (may be empty), nil if an\n   error occurred",
        "name": "displayBookStatus",
        "parameters": [
          " * book - table containing the information of the book to",
          "   check. The table must contain the following fields:",
          "   * slug - URL \"slug\" of the book to check. The slug is the part",
          "     of the book URL after https://leanpub.com/.",
          "   * icon - optional icon to show in the notifications for the",
          "     book, as an `hs.image` object. If this field is not specified",
          "     but `fetch_leanpub_covers` is true (the default value), this",
          "     method attempts to fetch the book cover from Leanpub. If the",
          "     cover can be retrieved, it gets stored in the icon field so",
          "     it doesn't get fetched every time. You can disable cover",
          "     fetching for individual books by setting this field",
          "     explicitly to `false`"
        ],
        "returns": [
          " * A Lua table containing the status (may be empty), nil if an",
          "   error occurred"
        ],
        "signature": "Leanpub:displayBookStatus(book)",
        "stripped_doc": "Only produce a notification if the current status is different\nthan the last known one (from the last time `displayBookStatus`\nwas run for the same book).",
        "type": "Method"
      },
      {
        "def": "Leanpub:fetchBookCover(slug)",
        "desc": "Fetch the cover of a book.",
        "doc": "Fetch the cover of a book.\n\nParameters:\n * book - slug for the book\n\nReturns:\n * The image object if it can be fetched, nil otherwise",
        "name": "fetchBookCover",
        "parameters": [
          " * book - slug for the book"
        ],
        "returns": [
          " * The image object if it can be fetched, nil otherwise"
        ],
        "signature": "Leanpub:fetchBookCover(slug)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub:getBookStatus(slug)",
        "desc": "Get the status of a book given its slug.",
        "doc": "Get the status of a book given its slug.\n\nParameters:\n * slug - URL \"slug\" of the book to check. The slug of a book is\n   the part of the URL for your book after https://leanpub.com/.\n\nReturns:\n * Table containing the fields returned by the Leanpub API. If the\n   book is not being built at the moment, an empty table is\n   returned. If an error occurs, returns `nil`. Samples of the\n   return values can be found at\n   https://leanpub.com/help/api#getting-the-job-status",
        "name": "getBookStatus",
        "parameters": [
          " * slug - URL \"slug\" of the book to check. The slug of a book is",
          "   the part of the URL for your book after https://leanpub.com/."
        ],
        "returns": [
          " * Table containing the fields returned by the Leanpub API. If the",
          "   book is not being built at the moment, an empty table is",
          "   returned. If an error occurs, returns `nil`. Samples of the",
          "   return values can be found at",
          "   https://leanpub.com/help/api#getting-the-job-status"
        ],
        "signature": "Leanpub:getBookStatus(slug)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub:start()",
        "desc": "Start periodic check for book status, checking every",
        "doc": "Start periodic check for book status, checking every\ncheck_interval seconds.",
        "name": "start",
        "signature": "Leanpub:start()",
        "stripped_doc": "check_interval seconds.",
        "type": "Method"
      },
      {
        "def": "Leanpub:stop()",
        "desc": "Stops periodic check for book status, if enabled.",
        "doc": "Stops periodic check for book status, if enabled.\ncheck_interval seconds.",
        "name": "stop",
        "signature": "Leanpub:stop()",
        "stripped_doc": "check_interval seconds.",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Leanpub.api_key",
        "desc": "String containing the key to use for Leanpub API requests. Get it",
        "doc": "String containing the key to use for Leanpub API requests. Get it\nfrom your Leanpub account under the \"Author / Your API Key\" menu\nsection. No default.",
        "name": "api_key",
        "signature": "Leanpub.api_key",
        "stripped_doc": "from your Leanpub account under the \"Author / Your API Key\" menu\nsection. No default.",
        "type": "Variable"
      },
      {
        "def": "Leanpub.check_interval",
        "desc": "Integer containing the interval (in seconds) at which the book",
        "doc": "Integer containing the interval (in seconds) at which the book\nstatus is checked. Default 5.",
        "name": "check_interval",
        "signature": "Leanpub.check_interval",
        "stripped_doc": "status is checked. Default 5.",
        "type": "Variable"
      },
      {
        "def": "Leanpub.fetch_leanpub_covers",
        "desc": "Boolean indicating whether we should try to fetch book covers from",
        "doc": "Boolean indicating whether we should try to fetch book covers from\nLeanpub (default true)",
        "name": "fetch_leanpub_covers",
        "signature": "Leanpub.fetch_leanpub_covers",
        "stripped_doc": "Leanpub (default true)",
        "type": "Variable"
      },
      {
        "def": "Leanpub.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the",
        "doc": "Logger object used within the Spoon. Can be accessed to set the\ndefault log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "Leanpub.logger",
        "stripped_doc": "default log level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "Leanpub.persistent_notification",
        "desc": "Table specifying the Leanpub status for which notifications should",
        "doc": "Table specifying the Leanpub status for which notifications should\nnot disappear automatically. The indices correspond to the values\nof the `status` field returned by the Leanpub API. Possible values\nare `working` and `complete`. Default `{ complete = true }` to\nkeep the \"Book generation complete\" messages.",
        "name": "persistent_notification",
        "signature": "Leanpub.persistent_notification",
        "stripped_doc": "not disappear automatically. The indices correspond to the values\nof the `status` field returned by the Leanpub API. Possible values\nare `working` and `complete`. Default `{ complete = true }` to\nkeep the \"Book generation complete\" messages.",
        "type": "Variable"
      },
      {
        "def": "Leanpub.watch_books",
        "desc": "List of books to watch (by default an empty list). Each element of",
        "doc": "List of books to watch (by default an empty list). Each element of\nthe list must be a table containing the following keys:\n * slug - the web page \"slug\" of the book to watch. The slug of a\n   book can be set under the \"Book Web Page / Web Page URL\" menu\n   section in Leanpub.\n * icon - optional icon to show in the notifications for the book,\n   as an hs.image object. If not specified, and if\n   `fetch_leanpub_covers` is `true`, then the icon is generated\n   automatically from the book cover.",
        "name": "watch_books",
        "signature": "Leanpub.watch_books",
        "stripped_doc": "the list must be a table containing the following keys:\n * slug - the web page \"slug\" of the book to watch. The slug of a\n   book can be set under the \"Book Web Page / Web Page URL\" menu\n   section in Leanpub.\n * icon - optional icon to show in the notifications for the book,\n   as an hs.image object. If not specified, and if\n   `fetch_leanpub_covers` is `true`, then the icon is generated\n   automatically from the book cover.",
        "type": "Variable"
      }
    ],
    "desc": "Spoon to track and notify about Leanpub builds.",
    "doc": "Spoon to track and notify about Leanpub builds.\n\nDownload:\nhttps://github.com/Hammerspoon/Spoons/raw/master/Spoons/Leanpub.spoon.zip",
    "items": [
      {
        "def": "Leanpub.api_key",
        "desc": "String containing the key to use for Leanpub API requests. Get it",
        "doc": "String containing the key to use for Leanpub API requests. Get it\nfrom your Leanpub account under the \"Author / Your API Key\" menu\nsection. No default.",
        "name": "api_key",
        "signature": "Leanpub.api_key",
        "stripped_doc": "from your Leanpub account under the \"Author / Your API Key\" menu\nsection. No default.",
        "type": "Variable"
      },
      {
        "def": "Leanpub.check_interval",
        "desc": "Integer containing the interval (in seconds) at which the book",
        "doc": "Integer containing the interval (in seconds) at which the book\nstatus is checked. Default 5.",
        "name": "check_interval",
        "signature": "Leanpub.check_interval",
        "stripped_doc": "status is checked. Default 5.",
        "type": "Variable"
      },
      {
        "def": "Leanpub:displayAllBookStatus()",
        "desc": "Check and display (if needed) the status of all the books in",
        "doc": "Check and display (if needed) the status of all the books in\n`watch_books`",
        "name": "displayAllBookStatus",
        "signature": "Leanpub:displayAllBookStatus()",
        "stripped_doc": "`watch_books`",
        "type": "Method"
      },
      {
        "def": "Leanpub:displayBookStatus(book)",
        "desc": "Display a notification with the current build status of a book.",
        "doc": "Display a notification with the current build status of a book.\nOnly produce a notification if the current status is different\nthan the last known one (from the last time `displayBookStatus`\nwas run for the same book).\n\nParameters:\n * book - table containing the information of the book to\n   check. The table must contain the following fields:\n   * slug - URL \"slug\" of the book to check. The slug is the part\n     of the book URL after https://leanpub.com/.\n   * icon - optional icon to show in the notifications for the\n     book, as an `hs.image` object. If this field is not specified\n     but `fetch_leanpub_covers` is true (the default value), this\n     method attempts to fetch the book cover from Leanpub. If the\n     cover can be retrieved, it gets stored in the icon field so\n     it doesn't get fetched every time. You can disable cover\n     fetching for individual books by setting this field\n     explicitly to `false`\n\nReturns:\n * A Lua table containing the status (may be empty), nil if an\n   error occurred",
        "name": "displayBookStatus",
        "parameters": [
          " * book - table containing the information of the book to",
          "   check. The table must contain the following fields:",
          "   * slug - URL \"slug\" of the book to check. The slug is the part",
          "     of the book URL after https://leanpub.com/.",
          "   * icon - optional icon to show in the notifications for the",
          "     book, as an `hs.image` object. If this field is not specified",
          "     but `fetch_leanpub_covers` is true (the default value), this",
          "     method attempts to fetch the book cover from Leanpub. If the",
          "     cover can be retrieved, it gets stored in the icon field so",
          "     it doesn't get fetched every time. You can disable cover",
          "     fetching for individual books by setting this field",
          "     explicitly to `false`"
        ],
        "returns": [
          " * A Lua table containing the status (may be empty), nil if an",
          "   error occurred"
        ],
        "signature": "Leanpub:displayBookStatus(book)",
        "stripped_doc": "Only produce a notification if the current status is different\nthan the last known one (from the last time `displayBookStatus`\nwas run for the same book).",
        "type": "Method"
      },
      {
        "def": "Leanpub.fetch_leanpub_covers",
        "desc": "Boolean indicating whether we should try to fetch book covers from",
        "doc": "Boolean indicating whether we should try to fetch book covers from\nLeanpub (default true)",
        "name": "fetch_leanpub_covers",
        "signature": "Leanpub.fetch_leanpub_covers",
        "stripped_doc": "Leanpub (default true)",
        "type": "Variable"
      },
      {
        "def": "Leanpub:fetchBookCover(slug)",
        "desc": "Fetch the cover of a book.",
        "doc": "Fetch the cover of a book.\n\nParameters:\n * book - slug for the book\n\nReturns:\n * The image object if it can be fetched, nil otherwise",
        "name": "fetchBookCover",
        "parameters": [
          " * book - slug for the book"
        ],
        "returns": [
          " * The image object if it can be fetched, nil otherwise"
        ],
        "signature": "Leanpub:fetchBookCover(slug)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub:getBookStatus(slug)",
        "desc": "Get the status of a book given its slug.",
        "doc": "Get the status of a book given its slug.\n\nParameters:\n * slug - URL \"slug\" of the book to check. The slug of a book is\n   the part of the URL for your book after https://leanpub.com/.\n\nReturns:\n * Table containing the fields returned by the Leanpub API. If the\n   book is not being built at the moment, an empty table is\n   returned. If an error occurs, returns `nil`. Samples of the\n   return values can be found at\n   https://leanpub.com/help/api#getting-the-job-status",
        "name": "getBookStatus",
        "parameters": [
          " * slug - URL \"slug\" of the book to check. The slug of a book is",
          "   the part of the URL for your book after https://leanpub.com/."
        ],
        "returns": [
          " * Table containing the fields returned by the Leanpub API. If the",
          "   book is not being built at the moment, an empty table is",
          "   returned. If an error occurs, returns `nil`. Samples of the",
          "   return values can be found at",
          "   https://leanpub.com/help/api#getting-the-job-status"
        ],
        "signature": "Leanpub:getBookStatus(slug)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Leanpub.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the",
        "doc": "Logger object used within the Spoon. Can be accessed to set the\ndefault log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "Leanpub.logger",
        "stripped_doc": "default log level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "Leanpub.persistent_notification",
        "desc": "Table specifying the Leanpub status for which notifications should",
        "doc": "Table specifying the Leanpub status for which notifications should\nnot disappear automatically. The indices correspond to the values\nof the `status` field returned by the Leanpub API. Possible values\nare `working` and `complete`. Default `{ complete = true }` to\nkeep the \"Book generation complete\" messages.",
        "name": "persistent_notification",
        "signature": "Leanpub.persistent_notification",
        "stripped_doc": "not disappear automatically. The indices correspond to the values\nof the `status` field returned by the Leanpub API. Possible values\nare `working` and `complete`. Default `{ complete = true }` to\nkeep the \"Book generation complete\" messages.",
        "type": "Variable"
      },
      {
        "def": "Leanpub:start()",
        "desc": "Start periodic check for book status, checking every",
        "doc": "Start periodic check for book status, checking every\ncheck_interval seconds.",
        "name": "start",
        "signature": "Leanpub:start()",
        "stripped_doc": "check_interval seconds.",
        "type": "Method"
      },
      {
        "def": "Leanpub:stop()",
        "desc": "Stops periodic check for book status, if enabled.",
        "doc": "Stops periodic check for book status, if enabled.\ncheck_interval seconds.",
        "name": "stop",
        "signature": "Leanpub:stop()",
        "stripped_doc": "check_interval seconds.",
        "type": "Method"
      },
      {
        "def": "Leanpub.watch_books",
        "desc": "List of books to watch (by default an empty list). Each element of",
        "doc": "List of books to watch (by default an empty list). Each element of\nthe list must be a table containing the following keys:\n * slug - the web page \"slug\" of the book to watch. The slug of a\n   book can be set under the \"Book Web Page / Web Page URL\" menu\n   section in Leanpub.\n * icon - optional icon to show in the notifications for the book,\n   as an hs.image object. If not specified, and if\n   `fetch_leanpub_covers` is `true`, then the icon is generated\n   automatically from the book cover.",
        "name": "watch_books",
        "signature": "Leanpub.watch_books",
        "stripped_doc": "the list must be a table containing the following keys:\n * slug - the web page \"slug\" of the book to watch. The slug of a\n   book can be set under the \"Book Web Page / Web Page URL\" menu\n   section in Leanpub.\n * icon - optional icon to show in the notifications for the book,\n   as an hs.image object. If not specified, and if\n   `fetch_leanpub_covers` is `true`, then the icon is generated\n   automatically from the book cover.",
        "type": "Variable"
      }
    ],
    "name": "Leanpub",
    "stripped_doc": "\nDownload:\nhttps://github.com/Hammerspoon/Spoons/raw/master/Spoons/Leanpub.spoon.zip",
    "submodules": [],
    "type": "Module"
  }
]