[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "Miscellaneous utility and management functions for spoons",
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "Miscellaneous utility and management functions for spoons\n\nDownload: [https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/SpoonUtils.spoon.zip](https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/SpoonUtils.spoon.zip)",
    "Method" : [
      {
        "doc" : "Create a skeleton directory for a new Spoon\n\nParameters:\n * name: name of the new spoon, without the `.spoon` extension\n * basedir: (optional) directory where to create the template. Defaults to `~\/.hammerspoon\/Spoons`\n * metadata: (optional) table containing metadata values to be inserted in the template. Provided values are merged with the defaults. Defaults to:\n   ```\n   {\n     version = \"0.1\",\n     author = \"Your Name <your@email.org>\",\n     homepage = \"https:\/\/github.com\/Hammerspoon\/Spoons\",\n     license = \"MIT - https:\/\/opensource.org\/licenses\/MIT\",\n     download_url = \"https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/\"..name..\".spoon.zip\"\n   }\n   ```\n * template: (optional) absolute path of the template to use for the `init.lua` file of the new Spoon. Defaults to the `templates\/init.tpl` file included with SpoonUtils.",
        "stripped_doc" : [
          "Create a skeleton directory for a new Spoon",
          ""
        ],
        "def" : "SpoonUtils.newSpoon(name, basedir, metadata)",
        "desc" : "Create a skeleton directory for a new Spoon",
        "notes" : [

        ],
        "signature" : "SpoonUtils.newSpoon(name, basedir, metadata)",
        "type" : "Method",
        "returns" : [

        ],
        "name" : "newSpoon",
        "parameters" : [
          " * name: name of the new spoon, without the `.spoon` extension",
          " * basedir: (optional) directory where to create the template. Defaults to `~\/.hammerspoon\/Spoons`",
          " * metadata: (optional) table containing metadata values to be inserted in the template. Provided values are merged with the defaults. Defaults to:",
          "   ```",
          "   {",
          "     version = \"0.1\",",
          "     author = \"Your Name <your@email.org>\",",
          "     homepage = \"https:\/\/github.com\/Hammerspoon\/Spoons\",",
          "     license = \"MIT - https:\/\/opensource.org\/licenses\/MIT\",",
          "     download_url = \"https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/\"..name..\".spoon.zip\"",
          "   }",
          "   ```",
          " * template: (optional) absolute path of the template to use for the `init.lua` file of the new Spoon. Defaults to the `templates\/init.tpl` file included with SpoonUtils."
        ]
      },
      {
        "doc" : "Return path of the current spoon.\n\nParameters:\n * n - (optional) stack level for which to get the path. Defaults to 2, which will return the path of the spoon which called `script_path()`\n\nReturns:\n * String with the path from where the calling code was loaded.",
        "stripped_doc" : [
          "Return path of the current spoon.",
          ""
        ],
        "def" : "SpoonUtils:script_path()",
        "desc" : "Return path of the current spoon.",
        "notes" : [

        ],
        "signature" : "SpoonUtils:script_path()",
        "type" : "Method",
        "returns" : [
          " * String with the path from where the calling code was loaded."
        ],
        "name" : "script_path",
        "parameters" : [
          " * n - (optional) stack level for which to get the path. Defaults to 2, which will return the path of the spoon which called `script_path()`",
          ""
        ]
      },
      {
        "doc" : "Return full path of an object within a spoon directory, given its partial path.\n\nParameters:\n * partial - path of a file relative to the Spoon directory. For example `images\/img1.png` will refer to a file within the `images` directory of the Spoon.\n\nReturns:\n * Absolute path of the file. Note: no existence or other checks are done on the path.",
        "stripped_doc" : [
          "Return full path of an object within a spoon directory, given its partial path.",
          ""
        ],
        "def" : "SpoonUtils:resource_path(partial)",
        "desc" : "Return full path of an object within a spoon directory, given its partial path.",
        "notes" : [

        ],
        "signature" : "SpoonUtils:resource_path(partial)",
        "type" : "Method",
        "returns" : [
          " * Absolute path of the file. Note: no existence or other checks are done on the path."
        ],
        "name" : "resource_path",
        "parameters" : [
          " * partial - path of a file relative to the Spoon directory. For example `images\/img1.png` will refer to a file within the `images` directory of the Spoon.",
          ""
        ]
      },
      {
        "doc" : "Map a number of hotkeys according to a definition table\n\nParameters:\n * def - table containing name-to-function definitions for the hotkeys supported by the Spoon. Each key is a hotkey name, and its value must be a function that will be called when the hotkey is invoked.\n * map - table containing name-to-hotkey definitions, as supported by [bindHotkeys in the Spoon API](https:\/\/github.com\/Hammerspoon\/hammerspoon\/blob\/master\/SPOONS.md#hotkeys). Not all the entries in `def` must be bound, but",
        "stripped_doc" : [
          "Map a number of hotkeys according to a definition table",
          ""
        ],
        "def" : "SpoonUtils:bindHotkeysToSpec(def, map)",
        "desc" : "Map a number of hotkeys according to a definition table",
        "notes" : [

        ],
        "signature" : "SpoonUtils:bindHotkeysToSpec(def, map)",
        "type" : "Method",
        "returns" : [

        ],
        "name" : "bindHotkeysToSpec",
        "parameters" : [
          " * def - table containing name-to-function definitions for the hotkeys supported by the Spoon. Each key is a hotkey name, and its value must be a function that will be called when the hotkey is invoked.",
          " * map - table containing name-to-hotkey definitions, as supported by [bindHotkeys in the Spoon API](https:\/\/github.com\/Hammerspoon\/hammerspoon\/blob\/master\/SPOONS.md#hotkeys). Not all the entries in `def` must be bound, but"
        ]
      },
      {
        "doc" : "Return a list of installed\/loaded Spoons\n\nParameters:\n * only_loaded - only return loaded Spoons (skips those that are installed but not loaded). Defaults to `false`\n\nReturns:\n * Table with a list of installed\/loaded spoons (depending on the value of `only_loaded`). Each entry is a table with the following entries:\n   * `name` - Spoon name\n   * `loaded` - boolean indication of whether the Spoon is loaded (`true`) or only installed (`false`)\n   * `version` - Spoon version number. Available only for loaded Spoons.",
        "stripped_doc" : [
          "Return a list of installed\/loaded Spoons",
          ""
        ],
        "def" : "SpoonUtils:list()",
        "desc" : "Return a list of installed\/loaded Spoons",
        "notes" : [

        ],
        "signature" : "SpoonUtils:list()",
        "type" : "Method",
        "returns" : [
          " * Table with a list of installed\/loaded spoons (depending on the value of `only_loaded`). Each entry is a table with the following entries:",
          "   * `name` - Spoon name",
          "   * `loaded` - boolean indication of whether the Spoon is loaded (`true`) or only installed (`false`)",
          "   * `version` - Spoon version number. Available only for loaded Spoons."
        ],
        "name" : "list",
        "parameters" : [
          " * only_loaded - only return loaded Spoons (skips those that are installed but not loaded). Defaults to `false`",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "Map a number of hotkeys according to a definition table\n\nParameters:\n * def - table containing name-to-function definitions for the hotkeys supported by the Spoon. Each key is a hotkey name, and its value must be a function that will be called when the hotkey is invoked.\n * map - table containing name-to-hotkey definitions, as supported by [bindHotkeys in the Spoon API](https:\/\/github.com\/Hammerspoon\/hammerspoon\/blob\/master\/SPOONS.md#hotkeys). Not all the entries in `def` must be bound, but",
        "stripped_doc" : [
          "Map a number of hotkeys according to a definition table",
          ""
        ],
        "def" : "SpoonUtils:bindHotkeysToSpec(def, map)",
        "desc" : "Map a number of hotkeys according to a definition table",
        "notes" : [

        ],
        "signature" : "SpoonUtils:bindHotkeysToSpec(def, map)",
        "type" : "Method",
        "returns" : [

        ],
        "name" : "bindHotkeysToSpec",
        "parameters" : [
          " * def - table containing name-to-function definitions for the hotkeys supported by the Spoon. Each key is a hotkey name, and its value must be a function that will be called when the hotkey is invoked.",
          " * map - table containing name-to-hotkey definitions, as supported by [bindHotkeys in the Spoon API](https:\/\/github.com\/Hammerspoon\/hammerspoon\/blob\/master\/SPOONS.md#hotkeys). Not all the entries in `def` must be bound, but"
        ]
      },
      {
        "doc" : "Return a list of installed\/loaded Spoons\n\nParameters:\n * only_loaded - only return loaded Spoons (skips those that are installed but not loaded). Defaults to `false`\n\nReturns:\n * Table with a list of installed\/loaded spoons (depending on the value of `only_loaded`). Each entry is a table with the following entries:\n   * `name` - Spoon name\n   * `loaded` - boolean indication of whether the Spoon is loaded (`true`) or only installed (`false`)\n   * `version` - Spoon version number. Available only for loaded Spoons.",
        "stripped_doc" : [
          "Return a list of installed\/loaded Spoons",
          ""
        ],
        "def" : "SpoonUtils:list()",
        "desc" : "Return a list of installed\/loaded Spoons",
        "notes" : [

        ],
        "signature" : "SpoonUtils:list()",
        "type" : "Method",
        "returns" : [
          " * Table with a list of installed\/loaded spoons (depending on the value of `only_loaded`). Each entry is a table with the following entries:",
          "   * `name` - Spoon name",
          "   * `loaded` - boolean indication of whether the Spoon is loaded (`true`) or only installed (`false`)",
          "   * `version` - Spoon version number. Available only for loaded Spoons."
        ],
        "name" : "list",
        "parameters" : [
          " * only_loaded - only return loaded Spoons (skips those that are installed but not loaded). Defaults to `false`",
          ""
        ]
      },
      {
        "doc" : "Create a skeleton directory for a new Spoon\n\nParameters:\n * name: name of the new spoon, without the `.spoon` extension\n * basedir: (optional) directory where to create the template. Defaults to `~\/.hammerspoon\/Spoons`\n * metadata: (optional) table containing metadata values to be inserted in the template. Provided values are merged with the defaults. Defaults to:\n   ```\n   {\n     version = \"0.1\",\n     author = \"Your Name <your@email.org>\",\n     homepage = \"https:\/\/github.com\/Hammerspoon\/Spoons\",\n     license = \"MIT - https:\/\/opensource.org\/licenses\/MIT\",\n     download_url = \"https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/\"..name..\".spoon.zip\"\n   }\n   ```\n * template: (optional) absolute path of the template to use for the `init.lua` file of the new Spoon. Defaults to the `templates\/init.tpl` file included with SpoonUtils.",
        "stripped_doc" : [
          "Create a skeleton directory for a new Spoon",
          ""
        ],
        "def" : "SpoonUtils.newSpoon(name, basedir, metadata)",
        "desc" : "Create a skeleton directory for a new Spoon",
        "notes" : [

        ],
        "signature" : "SpoonUtils.newSpoon(name, basedir, metadata)",
        "type" : "Method",
        "returns" : [

        ],
        "name" : "newSpoon",
        "parameters" : [
          " * name: name of the new spoon, without the `.spoon` extension",
          " * basedir: (optional) directory where to create the template. Defaults to `~\/.hammerspoon\/Spoons`",
          " * metadata: (optional) table containing metadata values to be inserted in the template. Provided values are merged with the defaults. Defaults to:",
          "   ```",
          "   {",
          "     version = \"0.1\",",
          "     author = \"Your Name <your@email.org>\",",
          "     homepage = \"https:\/\/github.com\/Hammerspoon\/Spoons\",",
          "     license = \"MIT - https:\/\/opensource.org\/licenses\/MIT\",",
          "     download_url = \"https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/\"..name..\".spoon.zip\"",
          "   }",
          "   ```",
          " * template: (optional) absolute path of the template to use for the `init.lua` file of the new Spoon. Defaults to the `templates\/init.tpl` file included with SpoonUtils."
        ]
      },
      {
        "doc" : "Return full path of an object within a spoon directory, given its partial path.\n\nParameters:\n * partial - path of a file relative to the Spoon directory. For example `images\/img1.png` will refer to a file within the `images` directory of the Spoon.\n\nReturns:\n * Absolute path of the file. Note: no existence or other checks are done on the path.",
        "stripped_doc" : [
          "Return full path of an object within a spoon directory, given its partial path.",
          ""
        ],
        "def" : "SpoonUtils:resource_path(partial)",
        "desc" : "Return full path of an object within a spoon directory, given its partial path.",
        "notes" : [

        ],
        "signature" : "SpoonUtils:resource_path(partial)",
        "type" : "Method",
        "returns" : [
          " * Absolute path of the file. Note: no existence or other checks are done on the path."
        ],
        "name" : "resource_path",
        "parameters" : [
          " * partial - path of a file relative to the Spoon directory. For example `images\/img1.png` will refer to a file within the `images` directory of the Spoon.",
          ""
        ]
      },
      {
        "doc" : "Return path of the current spoon.\n\nParameters:\n * n - (optional) stack level for which to get the path. Defaults to 2, which will return the path of the spoon which called `script_path()`\n\nReturns:\n * String with the path from where the calling code was loaded.",
        "stripped_doc" : [
          "Return path of the current spoon.",
          ""
        ],
        "def" : "SpoonUtils:script_path()",
        "desc" : "Return path of the current spoon.",
        "notes" : [

        ],
        "signature" : "SpoonUtils:script_path()",
        "type" : "Method",
        "returns" : [
          " * String with the path from where the calling code was loaded."
        ],
        "name" : "script_path",
        "parameters" : [
          " * n - (optional) stack level for which to get the path. Defaults to 2, which will return the path of the spoon which called `script_path()`",
          ""
        ]
      }
    ],
    "name" : "SpoonUtils"
  }
]
