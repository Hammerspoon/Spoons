[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "key to abort, default to {keyNone, 'escape'}",
        "stripped_doc" : [
          "key to abort, default to {keyNone, 'escape'}"
        ],
        "desc" : "key to abort, default to {keyNone, 'escape'}",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "RecursiveBinder.escapeKey",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "escapeKey",
        "def" : "RecursiveBinder.escapeKey"
      },
      {
        "doc" : "Number of entries each line of helper. Default to 5.",
        "stripped_doc" : [
          "Number of entries each line of helper. Default to 5."
        ],
        "desc" : "Number of entries each line of helper. Default to 5.",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "RecursiveBinder.helperEntryEachLine",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "helperEntryEachLine",
        "def" : "RecursiveBinder.helperEntryEachLine"
      },
      {
        "doc" : "Length of each entry in char. Default to 20.",
        "stripped_doc" : [
          "Length of each entry in char. Default to 20."
        ],
        "desc" : "Length of each entry in char. Default to 20.",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "RecursiveBinder.helperEntryLengthInChar",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "helperEntryLengthInChar",
        "def" : "RecursiveBinder.helperEntryLengthInChar"
      },
      {
        "doc" : "format of helper, the helper is just a hs.alert\ndefault to {atScreenEdge=2,\n            strokeColor={ white = 0, alpha = 2 },\n            textFont='SF Mono'\n            textSize=20}",
        "stripped_doc" : [
          "format of helper, the helper is just a hs.alert",
          "default to {atScreenEdge=2,",
          "            strokeColor={ white = 0, alpha = 2 },",
          "            textFont='SF Mono'",
          "            textSize=20}"
        ],
        "desc" : "format of helper, the helper is just a hs.alert",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "RecursiveBinder.helperFormat",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "helperFormat",
        "def" : "RecursiveBinder.helperFormat"
      },
      {
        "doc" : "whether to show helper, can be true of false",
        "stripped_doc" : [
          "whether to show helper, can be true of false"
        ],
        "desc" : "whether to show helper, can be true of false",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "RecursiveBinder.showBindHelper()",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "showBindHelper",
        "def" : "RecursiveBinder.showBindHelper()"
      }
    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "type" : "Module",
    "desc" : "A spoon that let you bind sequential bindings.",
    "Constructor" : [

    ],
    "Field" : [

    ],
    "Method" : [
      {
        "doc" : "this function simply return a table with empty modifiers\nalso it translates capital letters to normal letter with shift modifer\n\nParameters:\n * key - a letter\n * name - the description to pass to the keys binding function\n\nReturns:\n * a table of modifiers and keys and names, ready to be used in keymap\n   to pass to RecursiveBinder.recursiveBind()",
        "stripped_doc" : [
          "this function simply return a table with empty modifiers",
          "also it translates capital letters to normal letter with shift modifer",
          ""
        ],
        "desc" : "this function simply return a table with empty modifiers",
        "parameters" : [
          " * key - a letter",
          " * name - the description to pass to the keys binding function",
          ""
        ],
        "notes" : [

        ],
        "signature" : "RecursiveBinder.singleKey(key, name)",
        "type" : "Method",
        "returns" : [
          " * a table of modifiers and keys and names, ready to be used in keymap",
          "   to pass to RecursiveBinder.recursiveBind()"
        ],
        "name" : "singleKey",
        "def" : "RecursiveBinder.singleKey(key, name)"
      },
      {
        "doc" : "Bind sequential keys by a nested keymap.\n\nParameters:\n * keymap - A table that specifies the mapping.\n\nReturns:\n * A function to start. Bind it to a initial key binding.\n\nNote:\nSpec of keymap:\nEvery key is of format {{modifers}, key, (optional) description}\nThe first two element is what you usually pass into a hs.hotkey.bind() function.\n\nEach value of key can be in two form:\n1. A function. Then pressing the key invokes the function\n2. A table. Then pressing the key bring to another layer of keybindings.\n   And the table have the same format of top table: keys to keys, value to table or function",
        "stripped_doc" : [
          "Bind sequential keys by a nested keymap.",
          ""
        ],
        "desc" : "Bind sequential keys by a nested keymap.",
        "parameters" : [
          " * keymap - A table that specifies the mapping.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "RecursiveBinder.recursiveBind(keymap)",
        "type" : "Method",
        "returns" : [
          " * A function to start. Bind it to a initial key binding.",
          "",
          "Note:",
          "Spec of keymap:",
          "Every key is of format {{modifers}, key, (optional) description}",
          "The first two element is what you usually pass into a hs.hotkey.bind() function.",
          "",
          "Each value of key can be in two form:",
          "1. A function. Then pressing the key invokes the function",
          "2. A table. Then pressing the key bring to another layer of keybindings.",
          "   And the table have the same format of top table: keys to keys, value to table or function"
        ],
        "name" : "recursiveBind",
        "def" : "RecursiveBinder.recursiveBind(keymap)"
      }
    ],
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "key to abort, default to {keyNone, 'escape'}",
        "stripped_doc" : [
          "key to abort, default to {keyNone, 'escape'}"
        ],
        "desc" : "key to abort, default to {keyNone, 'escape'}",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "RecursiveBinder.escapeKey",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "escapeKey",
        "def" : "RecursiveBinder.escapeKey"
      },
      {
        "doc" : "Number of entries each line of helper. Default to 5.",
        "stripped_doc" : [
          "Number of entries each line of helper. Default to 5."
        ],
        "desc" : "Number of entries each line of helper. Default to 5.",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "RecursiveBinder.helperEntryEachLine",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "helperEntryEachLine",
        "def" : "RecursiveBinder.helperEntryEachLine"
      },
      {
        "doc" : "Length of each entry in char. Default to 20.",
        "stripped_doc" : [
          "Length of each entry in char. Default to 20."
        ],
        "desc" : "Length of each entry in char. Default to 20.",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "RecursiveBinder.helperEntryLengthInChar",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "helperEntryLengthInChar",
        "def" : "RecursiveBinder.helperEntryLengthInChar"
      },
      {
        "doc" : "format of helper, the helper is just a hs.alert\ndefault to {atScreenEdge=2,\n            strokeColor={ white = 0, alpha = 2 },\n            textFont='SF Mono'\n            textSize=20}",
        "stripped_doc" : [
          "format of helper, the helper is just a hs.alert",
          "default to {atScreenEdge=2,",
          "            strokeColor={ white = 0, alpha = 2 },",
          "            textFont='SF Mono'",
          "            textSize=20}"
        ],
        "desc" : "format of helper, the helper is just a hs.alert",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "RecursiveBinder.helperFormat",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "helperFormat",
        "def" : "RecursiveBinder.helperFormat"
      },
      {
        "doc" : "whether to show helper, can be true of false",
        "stripped_doc" : [
          "whether to show helper, can be true of false"
        ],
        "desc" : "whether to show helper, can be true of false",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "RecursiveBinder.showBindHelper()",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "showBindHelper",
        "def" : "RecursiveBinder.showBindHelper()"
      },
      {
        "doc" : "Bind sequential keys by a nested keymap.\n\nParameters:\n * keymap - A table that specifies the mapping.\n\nReturns:\n * A function to start. Bind it to a initial key binding.\n\nNote:\nSpec of keymap:\nEvery key is of format {{modifers}, key, (optional) description}\nThe first two element is what you usually pass into a hs.hotkey.bind() function.\n\nEach value of key can be in two form:\n1. A function. Then pressing the key invokes the function\n2. A table. Then pressing the key bring to another layer of keybindings.\n   And the table have the same format of top table: keys to keys, value to table or function",
        "stripped_doc" : [
          "Bind sequential keys by a nested keymap.",
          ""
        ],
        "desc" : "Bind sequential keys by a nested keymap.",
        "parameters" : [
          " * keymap - A table that specifies the mapping.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "RecursiveBinder.recursiveBind(keymap)",
        "type" : "Method",
        "returns" : [
          " * A function to start. Bind it to a initial key binding.",
          "",
          "Note:",
          "Spec of keymap:",
          "Every key is of format {{modifers}, key, (optional) description}",
          "The first two element is what you usually pass into a hs.hotkey.bind() function.",
          "",
          "Each value of key can be in two form:",
          "1. A function. Then pressing the key invokes the function",
          "2. A table. Then pressing the key bring to another layer of keybindings.",
          "   And the table have the same format of top table: keys to keys, value to table or function"
        ],
        "name" : "recursiveBind",
        "def" : "RecursiveBinder.recursiveBind(keymap)"
      },
      {
        "doc" : "this function simply return a table with empty modifiers\nalso it translates capital letters to normal letter with shift modifer\n\nParameters:\n * key - a letter\n * name - the description to pass to the keys binding function\n\nReturns:\n * a table of modifiers and keys and names, ready to be used in keymap\n   to pass to RecursiveBinder.recursiveBind()",
        "stripped_doc" : [
          "this function simply return a table with empty modifiers",
          "also it translates capital letters to normal letter with shift modifer",
          ""
        ],
        "desc" : "this function simply return a table with empty modifiers",
        "parameters" : [
          " * key - a letter",
          " * name - the description to pass to the keys binding function",
          ""
        ],
        "notes" : [

        ],
        "signature" : "RecursiveBinder.singleKey(key, name)",
        "type" : "Method",
        "returns" : [
          " * a table of modifiers and keys and names, ready to be used in keymap",
          "   to pass to RecursiveBinder.recursiveBind()"
        ],
        "name" : "singleKey",
        "def" : "RecursiveBinder.singleKey(key, name)"
      }
    ],
    "doc" : "A spoon that let you bind sequential bindings.\nIt also (optionally) shows a bar about current keys bindings.",
    "name" : "RecursiveBinder"
  }
]
