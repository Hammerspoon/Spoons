[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "PersonalHotspot:bindHotkeys(mapping) -> Self",
        "desc": "Binds hotkey mappings for this spoon.",
        "doc": "Binds hotkey mappings for this spoon.\n\nParameters:\n * mapping (Table) - A table with keys who's names correspond to methods of this spoon, and values that represent hotkey mappings. For example:\n   * `{ toggle = { {\"cmd\", \"option\", \"ctrl\" }, \"h\" }`\n\nReturns:\n * Self",
        "file": "Source/PersonalHotspot.spoon//init.lua",
        "lineno": "214",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping (Table) - A table with keys who's names correspond to methods of this spoon, and values that represent hotkey mappings. For example:",
          "   * `{ toggle = { {\"cmd\", \"option\", \"ctrl\" }, \"h\" }`"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:bindHotkeys(mapping) -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PersonalHotspot:connect() -> Self",
        "desc": "Tries to connect to the personal hotspot named in `PersonalHotspot.hotspotName`. If `PersonalHotspot.hotspotName` is `nil`, the first hotspot in the Wi-Fi menu will be selected, and `PersonalHotspot.hotspotName` will be assigned to the name of that hotspot. Once connected to the hotspot, the applications specified in `PersonalHotspot.appsToKill` are killed.",
        "doc": "Tries to connect to the personal hotspot named in `PersonalHotspot.hotspotName`. If `PersonalHotspot.hotspotName` is `nil`, the first hotspot in the Wi-Fi menu will be selected, and `PersonalHotspot.hotspotName` will be assigned to the name of that hotspot. Once connected to the hotspot, the applications specified in `PersonalHotspot.appsToKill` are killed.\n\nParameters:\n * None\n\nReturns:\n * Self\n\nNotes:\n * If there are no hotspots with the name in `PersonalHotspot.hotspotName`, or if `PersonalHotspot.hotspotName` is `nil` and there are no hotspots in the Wi-Fi menu, the Wi-Fi menu will be closed after `PersonalHotspot.timeout` seconds.",
        "file": "Source/PersonalHotspot.spoon//init.lua",
        "lineno": "137",
        "name": "connect",
        "notes": [
          " * If there are no hotspots with the name in `PersonalHotspot.hotspotName`, or if `PersonalHotspot.hotspotName` is `nil` and there are no hotspots in the Wi-Fi menu, the Wi-Fi menu will be closed after `PersonalHotspot.timeout` seconds."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:connect() -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PersonalHotspot:disconnect() -> Self",
        "desc": "If currently connected to the personal hotspot named in `PersonalHotspot.hotspotName`, this method will disconnect from that hotspot and open the applications specified in `PersonalHostspot.appsToKill`.",
        "doc": "If currently connected to the personal hotspot named in `PersonalHotspot.hotspotName`, this method will disconnect from that hotspot and open the applications specified in `PersonalHostspot.appsToKill`.\n\nParameters:\n * None\n\nReturns:\n * Self",
        "file": "Source/PersonalHotspot.spoon//init.lua",
        "lineno": "170",
        "name": "disconnect",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:disconnect() -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PersonalHotspot:toggle() -> Self",
        "desc": "Toggles personal hotspot connection.",
        "doc": "Toggles personal hotspot connection.\n\nParameters:\n * None\n\nReturns:\n * Self\n\nNotes:\n * If the current wireless network name is `PersonalHotspot.hotspotName` this method calls `PersonalHotspot:disconnect()`, otherwise this method will call `PersonalHotspot:connect()`.",
        "file": "Source/PersonalHotspot.spoon//init.lua",
        "lineno": "192",
        "name": "toggle",
        "notes": [
          " * If the current wireless network name is `PersonalHotspot.hotspotName` this method calls `PersonalHotspot:disconnect()`, otherwise this method will call `PersonalHotspot:connect()`."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:toggle() -> Self",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "PersonalHotspot.appsToKill (List)",
        "desc": "A list of strings representing applications to kill/open, when `PersonalHotspot:connect()` and `PersonalHotspot:disconnect()` are called respectively.",
        "doc": "A list of strings representing applications to kill/open, when `PersonalHotspot:connect()` and `PersonalHotspot:disconnect()` are called respectively.\n\nEach string should be either:\n * a bundle ID string as per `hs.application:bundleID()`, or\n * an application name string as per `hs.application:name()`.",
        "file": "Source/PersonalHotspot.spoon//init.lua",
        "lineno": "116",
        "name": "appsToKill",
        "signature": "PersonalHotspot.appsToKill (List)",
        "stripped_doc": "Each string should be either:\n * a bundle ID string as per `hs.application:bundleID()`, or\n * an application name string as per `hs.application:name()`.",
        "type": "Variable"
      },
      {
        "def": "PersonalHotspot.hotspotName (String)",
        "desc": "The name of the personal hotspot you want to connect/disconnect from, e.g., \"John Appleseed’s iPhone\".",
        "doc": "The name of the personal hotspot you want to connect/disconnect from, e.g., \"John Appleseed’s iPhone\".\n\nYou can see the names of available hotspots by clicking on the Wi-Fi icon in the macOS menu bar and looking for menu items under the \"Personal Hotspot(s)\" heading.",
        "file": "Source/PersonalHotspot.spoon//init.lua",
        "lineno": "125",
        "name": "hotspotName",
        "signature": "PersonalHotspot.hotspotName (String)",
        "stripped_doc": "You can see the names of available hotspots by clicking on the Wi-Fi icon in the macOS menu bar and looking for menu items under the \"Personal Hotspot(s)\" heading.",
        "type": "Variable"
      },
      {
        "def": "PersonalHotspot.timeout (Number)",
        "desc": "The number of seconds to wait for personal hotspot to appear in Wi-Fi menu before attempting to connect/disconnect. Default is 3 seconds.",
        "doc": "The number of seconds to wait for personal hotspot to appear in Wi-Fi menu before attempting to connect/disconnect. Default is 3 seconds.",
        "file": "Source/PersonalHotspot.spoon//init.lua",
        "lineno": "132",
        "name": "timeout",
        "signature": "PersonalHotspot.timeout (Number)",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Connect, disconnect, or toggle connection to/from a personal hotspot. Optionally kills/opens a list of apps on connect/disconnect respectively.",
    "doc": "Connect, disconnect, or toggle connection to/from a personal hotspot. Optionally kills/opens a list of apps on connect/disconnect respectively.\n\nExample configuration (using SpoonInstall.spoon):\n```\nspoon.SpoonInstall:andUse(\n  \"PersonalHotspot\",\n  {\n    config = {\n      hotspotName = \"John Appleseed’s iPhone\",\n      appsToKill = {\n        \"Arq\",\n        \"Arq Agent\",\n        \"Dropbox\"\n      }\n    },\n    hotkeys = {\n      toggle = {{\"cmd\", \"option\", \"ctrl\"}, \"h\"}\n    }\n  }\n)\n```\n\nIf `PersonalHotspot.hotspotName` isn't set, the first personal hotspot in the Wi-Fi menu will be selected, and `PersonalHotspot.hotspotName` will be set to the name of that hotspot.",
    "items": [
      {
        "def": "PersonalHotspot.appsToKill (List)",
        "desc": "A list of strings representing applications to kill/open, when `PersonalHotspot:connect()` and `PersonalHotspot:disconnect()` are called respectively.",
        "doc": "A list of strings representing applications to kill/open, when `PersonalHotspot:connect()` and `PersonalHotspot:disconnect()` are called respectively.\n\nEach string should be either:\n * a bundle ID string as per `hs.application:bundleID()`, or\n * an application name string as per `hs.application:name()`.",
        "file": "Source/PersonalHotspot.spoon//init.lua",
        "lineno": "116",
        "name": "appsToKill",
        "signature": "PersonalHotspot.appsToKill (List)",
        "stripped_doc": "Each string should be either:\n * a bundle ID string as per `hs.application:bundleID()`, or\n * an application name string as per `hs.application:name()`.",
        "type": "Variable"
      },
      {
        "def": "PersonalHotspot:bindHotkeys(mapping) -> Self",
        "desc": "Binds hotkey mappings for this spoon.",
        "doc": "Binds hotkey mappings for this spoon.\n\nParameters:\n * mapping (Table) - A table with keys who's names correspond to methods of this spoon, and values that represent hotkey mappings. For example:\n   * `{ toggle = { {\"cmd\", \"option\", \"ctrl\" }, \"h\" }`\n\nReturns:\n * Self",
        "file": "Source/PersonalHotspot.spoon//init.lua",
        "lineno": "214",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping (Table) - A table with keys who's names correspond to methods of this spoon, and values that represent hotkey mappings. For example:",
          "   * `{ toggle = { {\"cmd\", \"option\", \"ctrl\" }, \"h\" }`"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:bindHotkeys(mapping) -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PersonalHotspot:connect() -> Self",
        "desc": "Tries to connect to the personal hotspot named in `PersonalHotspot.hotspotName`. If `PersonalHotspot.hotspotName` is `nil`, the first hotspot in the Wi-Fi menu will be selected, and `PersonalHotspot.hotspotName` will be assigned to the name of that hotspot. Once connected to the hotspot, the applications specified in `PersonalHotspot.appsToKill` are killed.",
        "doc": "Tries to connect to the personal hotspot named in `PersonalHotspot.hotspotName`. If `PersonalHotspot.hotspotName` is `nil`, the first hotspot in the Wi-Fi menu will be selected, and `PersonalHotspot.hotspotName` will be assigned to the name of that hotspot. Once connected to the hotspot, the applications specified in `PersonalHotspot.appsToKill` are killed.\n\nParameters:\n * None\n\nReturns:\n * Self\n\nNotes:\n * If there are no hotspots with the name in `PersonalHotspot.hotspotName`, or if `PersonalHotspot.hotspotName` is `nil` and there are no hotspots in the Wi-Fi menu, the Wi-Fi menu will be closed after `PersonalHotspot.timeout` seconds.",
        "file": "Source/PersonalHotspot.spoon//init.lua",
        "lineno": "137",
        "name": "connect",
        "notes": [
          " * If there are no hotspots with the name in `PersonalHotspot.hotspotName`, or if `PersonalHotspot.hotspotName` is `nil` and there are no hotspots in the Wi-Fi menu, the Wi-Fi menu will be closed after `PersonalHotspot.timeout` seconds."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:connect() -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PersonalHotspot:disconnect() -> Self",
        "desc": "If currently connected to the personal hotspot named in `PersonalHotspot.hotspotName`, this method will disconnect from that hotspot and open the applications specified in `PersonalHostspot.appsToKill`.",
        "doc": "If currently connected to the personal hotspot named in `PersonalHotspot.hotspotName`, this method will disconnect from that hotspot and open the applications specified in `PersonalHostspot.appsToKill`.\n\nParameters:\n * None\n\nReturns:\n * Self",
        "file": "Source/PersonalHotspot.spoon//init.lua",
        "lineno": "170",
        "name": "disconnect",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:disconnect() -> Self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "PersonalHotspot.hotspotName (String)",
        "desc": "The name of the personal hotspot you want to connect/disconnect from, e.g., \"John Appleseed’s iPhone\".",
        "doc": "The name of the personal hotspot you want to connect/disconnect from, e.g., \"John Appleseed’s iPhone\".\n\nYou can see the names of available hotspots by clicking on the Wi-Fi icon in the macOS menu bar and looking for menu items under the \"Personal Hotspot(s)\" heading.",
        "file": "Source/PersonalHotspot.spoon//init.lua",
        "lineno": "125",
        "name": "hotspotName",
        "signature": "PersonalHotspot.hotspotName (String)",
        "stripped_doc": "You can see the names of available hotspots by clicking on the Wi-Fi icon in the macOS menu bar and looking for menu items under the \"Personal Hotspot(s)\" heading.",
        "type": "Variable"
      },
      {
        "def": "PersonalHotspot.timeout (Number)",
        "desc": "The number of seconds to wait for personal hotspot to appear in Wi-Fi menu before attempting to connect/disconnect. Default is 3 seconds.",
        "doc": "The number of seconds to wait for personal hotspot to appear in Wi-Fi menu before attempting to connect/disconnect. Default is 3 seconds.",
        "file": "Source/PersonalHotspot.spoon//init.lua",
        "lineno": "132",
        "name": "timeout",
        "signature": "PersonalHotspot.timeout (Number)",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "PersonalHotspot:toggle() -> Self",
        "desc": "Toggles personal hotspot connection.",
        "doc": "Toggles personal hotspot connection.\n\nParameters:\n * None\n\nReturns:\n * Self\n\nNotes:\n * If the current wireless network name is `PersonalHotspot.hotspotName` this method calls `PersonalHotspot:disconnect()`, otherwise this method will call `PersonalHotspot:connect()`.",
        "file": "Source/PersonalHotspot.spoon//init.lua",
        "lineno": "192",
        "name": "toggle",
        "notes": [
          " * If the current wireless network name is `PersonalHotspot.hotspotName` this method calls `PersonalHotspot:disconnect()`, otherwise this method will call `PersonalHotspot:connect()`."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Self"
        ],
        "signature": "PersonalHotspot:toggle() -> Self",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "PersonalHotspot",
    "stripped_doc": "\nExample configuration (using SpoonInstall.spoon):\n```\nspoon.SpoonInstall:andUse(\n  \"PersonalHotspot\",\n  {\n    config = {\n      hotspotName = \"John Appleseed’s iPhone\",\n      appsToKill = {\n        \"Arq\",\n        \"Arq Agent\",\n        \"Dropbox\"\n      }\n    },\n    hotkeys = {\n      toggle = {{\"cmd\", \"option\", \"ctrl\"}, \"h\"}\n    }\n  }\n)\n```\n\nIf `PersonalHotspot.hotspotName` isn't set, the first personal hotspot in the Wi-Fi menu will be selected, and `PersonalHotspot.hotspotName` will be set to the name of that hotspot.",
    "submodules": [],
    "type": "Module"
  }
]