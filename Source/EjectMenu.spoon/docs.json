[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "EjectMenu:bindHotkeys(mapping, ejectAll)",
        "desc": "Binds hotkeys for EjectMenu",
        "doc": "Binds hotkeys for EjectMenu\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n * ejectAll - eject all volumes.",
        "examples": [],
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "217",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:",
          " * ejectAll - eject all volumes."
        ],
        "returns": [],
        "signature": "EjectMenu:bindHotkeys(mapping, ejectAll)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu:ejectVolumes()",
        "desc": "Eject all volumes",
        "doc": "Eject all volumes\n\nParameters:\n * persistent_notifs: a boolean indicating whether notifications (if shown) should be persistent.",
        "examples": [],
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "125",
        "name": "ejectVolumes",
        "notes": [],
        "parameters": [
          " * persistent_notifs: a boolean indicating whether notifications (if shown) should be persistent."
        ],
        "returns": [],
        "signature": "EjectMenu:ejectVolumes()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu:shouldEject(path, info)",
        "desc": "Determine if a volume should be ejected.",
        "doc": "Determine if a volume should be ejected.\n\nParameters:\n * path - the mount path of the volume.\n * info - a table containing a data structure as returned by `hs.fs.volume.allVolumes()`.\n\nReturns:\n * A boolean indicating whether the volume should be ejected.",
        "examples": [],
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "72",
        "name": "shouldEject",
        "notes": [],
        "parameters": [
          " * path - the mount path of the volume.",
          " * info - a table containing a data structure as returned by `hs.fs.volume.allVolumes()`."
        ],
        "returns": [
          " * A boolean indicating whether the volume should be ejected."
        ],
        "signature": "EjectMenu:shouldEject(path, info)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu:start()",
        "desc": "Start the watchers for power events and screen changes, to trigger volume ejection.",
        "doc": "Start the watchers for power events and screen changes, to trigger volume ejection.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "243",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "EjectMenu:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu:stop()",
        "desc": "Stop the watchers",
        "doc": "Stop the watchers\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "285",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "EjectMenu:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu:volumesToEject()",
        "desc": "Return table of volumes to be ejected when \"Eject All\" is invoked.",
        "doc": "Return table of volumes to be ejected when \"Eject All\" is invoked.\n\nParameters:\n * None\n\nReturns:\n * A table in the same format as returned by `hs.fs.volume.allVolumes()` but containing only those volumes for which `EjectMenu:shouldEject()` returns `true`.\n * An integer indicating how many volumes are in the table.",
        "examples": [],
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "87",
        "name": "volumesToEject",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * A table in the same format as returned by `hs.fs.volume.allVolumes()` but containing only those volumes for which `EjectMenu:shouldEject()` returns `true`.",
          " * An integer indicating how many volumes are in the table."
        ],
        "signature": "EjectMenu:volumesToEject()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "EjectMenu.eject_on_lid_close",
        "desc": "Boolean, whether to eject volumes when the laptop lid is closed with an external display connected.",
        "doc": "Boolean, whether to eject volumes when the laptop lid is closed with an external display connected.\n\nNotes:\n * There is no \"lid close\" event, so we detect when the internal display gets disabled.\n * This method is somewhat unreliable (e.g. it also triggers when the internal display goes to sleep due to inactivity), so its default value is `false`",
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "50",
        "name": "eject_on_lid_close",
        "notes": [
          " * There is no \"lid close\" event, so we detect when the internal display gets disabled.",
          " * This method is somewhat unreliable (e.g. it also triggers when the internal display goes to sleep due to inactivity), so its default value is `false`"
        ],
        "signature": "EjectMenu.eject_on_lid_close",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.eject_on_sleep",
        "desc": "Boolean, whether to eject volumes before the system goes to sleep. Default value: true",
        "doc": "Boolean, whether to eject volumes before the system goes to sleep. Default value: true",
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "45",
        "name": "eject_on_sleep",
        "signature": "EjectMenu.eject_on_sleep",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "30",
        "name": "logger",
        "signature": "EjectMenu.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.never_eject",
        "desc": "List containing volume paths that should never be ejected. Default value: empty list",
        "doc": "List containing volume paths that should never be ejected. Default value: empty list",
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "35",
        "name": "never_eject",
        "signature": "EjectMenu.never_eject",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.notify",
        "desc": "Boolean, whether to produce a notification about the volumes that get ejected. Default value: `false`",
        "doc": "Boolean, whether to produce a notification about the volumes that get ejected. Default value: `false`",
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "40",
        "name": "notify",
        "signature": "EjectMenu.notify",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.other_eject_events",
        "desc": "List of additional system events on which the volumes should be ejected.",
        "doc": "List of additional system events on which the volumes should be ejected.\n\nNotes:\n * The values must be [http://www.hammerspoon.org/docs/hs.caffeinate.watcher.html](`hs.caffeinate.watcher`) constant values. Default value: empty list",
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "64",
        "name": "other_eject_events",
        "notes": [
          " * The values must be [http://www.hammerspoon.org/docs/hs.caffeinate.watcher.html](`hs.caffeinate.watcher`) constant values. Default value: empty list"
        ],
        "signature": "EjectMenu.other_eject_events",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.show_in_menubar",
        "desc": "Boolean, whether to show a menubar button to eject all drives. Default value: true",
        "doc": "Boolean, whether to show a menubar button to eject all drives. Default value: true",
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "59",
        "name": "show_in_menubar",
        "signature": "EjectMenu.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "A much-needed eject menu for your Mac menu bar. Allows ejecting",
    "doc": "A much-needed eject menu for your Mac menu bar. Allows ejecting\nindividual or all non-internal disks. Ejection can also be\ntriggered on sleep, on lid close, or using a hotkey.\nUsing the Command key modifier causes the menu to open\nthe given volume in the Finder instead of ejecting it.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EjectMenu.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EjectMenu.spoon.zip)",
    "items": [
      {
        "def": "EjectMenu:bindHotkeys(mapping, ejectAll)",
        "desc": "Binds hotkeys for EjectMenu",
        "doc": "Binds hotkeys for EjectMenu\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n * ejectAll - eject all volumes.",
        "examples": [],
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "217",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:",
          " * ejectAll - eject all volumes."
        ],
        "returns": [],
        "signature": "EjectMenu:bindHotkeys(mapping, ejectAll)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu.eject_on_lid_close",
        "desc": "Boolean, whether to eject volumes when the laptop lid is closed with an external display connected.",
        "doc": "Boolean, whether to eject volumes when the laptop lid is closed with an external display connected.\n\nNotes:\n * There is no \"lid close\" event, so we detect when the internal display gets disabled.\n * This method is somewhat unreliable (e.g. it also triggers when the internal display goes to sleep due to inactivity), so its default value is `false`",
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "50",
        "name": "eject_on_lid_close",
        "notes": [
          " * There is no \"lid close\" event, so we detect when the internal display gets disabled.",
          " * This method is somewhat unreliable (e.g. it also triggers when the internal display goes to sleep due to inactivity), so its default value is `false`"
        ],
        "signature": "EjectMenu.eject_on_lid_close",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.eject_on_sleep",
        "desc": "Boolean, whether to eject volumes before the system goes to sleep. Default value: true",
        "doc": "Boolean, whether to eject volumes before the system goes to sleep. Default value: true",
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "45",
        "name": "eject_on_sleep",
        "signature": "EjectMenu.eject_on_sleep",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu:ejectVolumes()",
        "desc": "Eject all volumes",
        "doc": "Eject all volumes\n\nParameters:\n * persistent_notifs: a boolean indicating whether notifications (if shown) should be persistent.",
        "examples": [],
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "125",
        "name": "ejectVolumes",
        "notes": [],
        "parameters": [
          " * persistent_notifs: a boolean indicating whether notifications (if shown) should be persistent."
        ],
        "returns": [],
        "signature": "EjectMenu:ejectVolumes()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "30",
        "name": "logger",
        "signature": "EjectMenu.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.never_eject",
        "desc": "List containing volume paths that should never be ejected. Default value: empty list",
        "doc": "List containing volume paths that should never be ejected. Default value: empty list",
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "35",
        "name": "never_eject",
        "signature": "EjectMenu.never_eject",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.notify",
        "desc": "Boolean, whether to produce a notification about the volumes that get ejected. Default value: `false`",
        "doc": "Boolean, whether to produce a notification about the volumes that get ejected. Default value: `false`",
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "40",
        "name": "notify",
        "signature": "EjectMenu.notify",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu.other_eject_events",
        "desc": "List of additional system events on which the volumes should be ejected.",
        "doc": "List of additional system events on which the volumes should be ejected.\n\nNotes:\n * The values must be [http://www.hammerspoon.org/docs/hs.caffeinate.watcher.html](`hs.caffeinate.watcher`) constant values. Default value: empty list",
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "64",
        "name": "other_eject_events",
        "notes": [
          " * The values must be [http://www.hammerspoon.org/docs/hs.caffeinate.watcher.html](`hs.caffeinate.watcher`) constant values. Default value: empty list"
        ],
        "signature": "EjectMenu.other_eject_events",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu:shouldEject(path, info)",
        "desc": "Determine if a volume should be ejected.",
        "doc": "Determine if a volume should be ejected.\n\nParameters:\n * path - the mount path of the volume.\n * info - a table containing a data structure as returned by `hs.fs.volume.allVolumes()`.\n\nReturns:\n * A boolean indicating whether the volume should be ejected.",
        "examples": [],
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "72",
        "name": "shouldEject",
        "notes": [],
        "parameters": [
          " * path - the mount path of the volume.",
          " * info - a table containing a data structure as returned by `hs.fs.volume.allVolumes()`."
        ],
        "returns": [
          " * A boolean indicating whether the volume should be ejected."
        ],
        "signature": "EjectMenu:shouldEject(path, info)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu.show_in_menubar",
        "desc": "Boolean, whether to show a menubar button to eject all drives. Default value: true",
        "doc": "Boolean, whether to show a menubar button to eject all drives. Default value: true",
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "59",
        "name": "show_in_menubar",
        "signature": "EjectMenu.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EjectMenu:start()",
        "desc": "Start the watchers for power events and screen changes, to trigger volume ejection.",
        "doc": "Start the watchers for power events and screen changes, to trigger volume ejection.\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "243",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "EjectMenu:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu:stop()",
        "desc": "Stop the watchers",
        "doc": "Stop the watchers\n\nParameters:\n * None",
        "examples": [],
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "285",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "EjectMenu:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EjectMenu:volumesToEject()",
        "desc": "Return table of volumes to be ejected when \"Eject All\" is invoked.",
        "doc": "Return table of volumes to be ejected when \"Eject All\" is invoked.\n\nParameters:\n * None\n\nReturns:\n * A table in the same format as returned by `hs.fs.volume.allVolumes()` but containing only those volumes for which `EjectMenu:shouldEject()` returns `true`.\n * An integer indicating how many volumes are in the table.",
        "examples": [],
        "file": "Source/EjectMenu.spoon//init.lua",
        "lineno": "87",
        "name": "volumesToEject",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * A table in the same format as returned by `hs.fs.volume.allVolumes()` but containing only those volumes for which `EjectMenu:shouldEject()` returns `true`.",
          " * An integer indicating how many volumes are in the table."
        ],
        "signature": "EjectMenu:volumesToEject()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "EjectMenu",
    "stripped_doc": "individual or all non-internal disks. Ejection can also be\ntriggered on sleep, on lid close, or using a hotkey.\nUsing the Command key modifier causes the menu to open\nthe given volume in the Finder instead of ejecting it.\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EjectMenu.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/EjectMenu.spoon.zip)",
    "submodules": [],
    "type": "Module"
  }
]