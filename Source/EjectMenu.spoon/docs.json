[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "parameters" : [

        ],
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "notes" : [

        ],
        "signature" : "EjectMenu.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "EjectMenu.logger",
        "name" : "logger"
      },
      {
        "doc" : "List containing volume paths that should never be ejected. Default value: empty list",
        "stripped_doc" : [
          "List containing volume paths that should never be ejected. Default value: empty list"
        ],
        "parameters" : [

        ],
        "desc" : "List containing volume paths that should never be ejected. Default value: empty list",
        "notes" : [

        ],
        "signature" : "EjectMenu.never_eject",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "EjectMenu.never_eject",
        "name" : "never_eject"
      },
      {
        "doc" : "Boolean, whether to produce a notification about the volumes that get ejected. Default value: `false`",
        "stripped_doc" : [
          "Boolean, whether to produce a notification about the volumes that get ejected. Default value: `false`"
        ],
        "parameters" : [

        ],
        "desc" : "Boolean, whether to produce a notification about the volumes that get ejected. Default value: `false`",
        "notes" : [

        ],
        "signature" : "EjectMenu.notify",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "EjectMenu.notify",
        "name" : "notify"
      },
      {
        "doc" : "Boolean, whether to eject volumes before the system goes to sleep. Default value: true",
        "stripped_doc" : [
          "Boolean, whether to eject volumes before the system goes to sleep. Default value: true"
        ],
        "parameters" : [

        ],
        "desc" : "Boolean, whether to eject volumes before the system goes to sleep. Default value: true",
        "notes" : [

        ],
        "signature" : "EjectMenu.eject_on_sleep",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "EjectMenu.eject_on_sleep",
        "name" : "eject_on_sleep"
      },
      {
        "doc" : "Boolean, whether to eject volumes when the laptop lid is closed. Default value: true",
        "stripped_doc" : [
          "Boolean, whether to eject volumes when the laptop lid is closed. Default value: true"
        ],
        "parameters" : [

        ],
        "desc" : "Boolean, whether to eject volumes when the laptop lid is closed. Default value: true",
        "notes" : [

        ],
        "signature" : "EjectMenu.eject_on_lid_close",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "EjectMenu.eject_on_lid_close",
        "name" : "eject_on_lid_close"
      },
      {
        "doc" : "Boolen, whether to show a menubar button to eject all drives. Default value: true",
        "stripped_doc" : [
          "Boolen, whether to show a menubar button to eject all drives. Default value: true"
        ],
        "parameters" : [

        ],
        "desc" : "Boolen, whether to show a menubar button to eject all drives. Default value: true",
        "notes" : [

        ],
        "signature" : "EjectMenu.show_in_menubar",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "EjectMenu.show_in_menubar",
        "name" : "show_in_menubar"
      },
      {
        "doc" : "List of additional system events on which the volumes should be ejected. The\nvalues must be\n[http:\/\/www.hammerspoon.org\/docs\/hs.caffeinate.watcher.html](`hs.caffeinate.watcher`)\nconstant values. Default value: empty list",
        "stripped_doc" : [
          "List of additional system events on which the volumes should be ejected. The",
          "values must be",
          "[http:\/\/www.hammerspoon.org\/docs\/hs.caffeinate.watcher.html](`hs.caffeinate.watcher`)",
          "constant values. Default value: empty list"
        ],
        "parameters" : [

        ],
        "desc" : "List of additional system events on which the volumes should be ejected. The",
        "notes" : [

        ],
        "signature" : "EjectMenu.other_eject_events",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "EjectMenu.other_eject_events",
        "name" : "other_eject_events"
      }
    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "type" : "Module",
    "desc" : "A much-needed eject menu for your Mac menu bar. Allows ejecting",
    "Constructor" : [

    ],
    "doc" : "A much-needed eject menu for your Mac menu bar. Allows ejecting\nindividual or all non-internal disks. Ejection can also be\ntriggered on sleep, on lid close, or using a hotkey.\n\nDownload: [https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/EjectMenu.spoon.zip](https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/EjectMenu.spoon.zip)",
    "Field" : [

    ],
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "Boolean, whether to eject volumes when the laptop lid is closed. Default value: true",
        "stripped_doc" : [
          "Boolean, whether to eject volumes when the laptop lid is closed. Default value: true"
        ],
        "parameters" : [

        ],
        "desc" : "Boolean, whether to eject volumes when the laptop lid is closed. Default value: true",
        "notes" : [

        ],
        "signature" : "EjectMenu.eject_on_lid_close",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "EjectMenu.eject_on_lid_close",
        "name" : "eject_on_lid_close"
      },
      {
        "doc" : "Boolean, whether to eject volumes before the system goes to sleep. Default value: true",
        "stripped_doc" : [
          "Boolean, whether to eject volumes before the system goes to sleep. Default value: true"
        ],
        "parameters" : [

        ],
        "desc" : "Boolean, whether to eject volumes before the system goes to sleep. Default value: true",
        "notes" : [

        ],
        "signature" : "EjectMenu.eject_on_sleep",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "EjectMenu.eject_on_sleep",
        "name" : "eject_on_sleep"
      },
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "parameters" : [

        ],
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "notes" : [

        ],
        "signature" : "EjectMenu.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "EjectMenu.logger",
        "name" : "logger"
      },
      {
        "doc" : "List containing volume paths that should never be ejected. Default value: empty list",
        "stripped_doc" : [
          "List containing volume paths that should never be ejected. Default value: empty list"
        ],
        "parameters" : [

        ],
        "desc" : "List containing volume paths that should never be ejected. Default value: empty list",
        "notes" : [

        ],
        "signature" : "EjectMenu.never_eject",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "EjectMenu.never_eject",
        "name" : "never_eject"
      },
      {
        "doc" : "Boolean, whether to produce a notification about the volumes that get ejected. Default value: `false`",
        "stripped_doc" : [
          "Boolean, whether to produce a notification about the volumes that get ejected. Default value: `false`"
        ],
        "parameters" : [

        ],
        "desc" : "Boolean, whether to produce a notification about the volumes that get ejected. Default value: `false`",
        "notes" : [

        ],
        "signature" : "EjectMenu.notify",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "EjectMenu.notify",
        "name" : "notify"
      },
      {
        "doc" : "List of additional system events on which the volumes should be ejected. The\nvalues must be\n[http:\/\/www.hammerspoon.org\/docs\/hs.caffeinate.watcher.html](`hs.caffeinate.watcher`)\nconstant values. Default value: empty list",
        "stripped_doc" : [
          "List of additional system events on which the volumes should be ejected. The",
          "values must be",
          "[http:\/\/www.hammerspoon.org\/docs\/hs.caffeinate.watcher.html](`hs.caffeinate.watcher`)",
          "constant values. Default value: empty list"
        ],
        "parameters" : [

        ],
        "desc" : "List of additional system events on which the volumes should be ejected. The",
        "notes" : [

        ],
        "signature" : "EjectMenu.other_eject_events",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "EjectMenu.other_eject_events",
        "name" : "other_eject_events"
      },
      {
        "doc" : "Boolen, whether to show a menubar button to eject all drives. Default value: true",
        "stripped_doc" : [
          "Boolen, whether to show a menubar button to eject all drives. Default value: true"
        ],
        "parameters" : [

        ],
        "desc" : "Boolen, whether to show a menubar button to eject all drives. Default value: true",
        "notes" : [

        ],
        "signature" : "EjectMenu.show_in_menubar",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "EjectMenu.show_in_menubar",
        "name" : "show_in_menubar"
      },
      {
        "doc" : "Binds hotkeys for EjectMenu\n\nParameters:\n * mapping - A table containing hotkey objifier\/key details for the following items:\n  * ejectAll - eject all volumes.",
        "stripped_doc" : [
          "Binds hotkeys for EjectMenu",
          ""
        ],
        "parameters" : [
          " * mapping - A table containing hotkey objifier\/key details for the following items:",
          "  * ejectAll - eject all volumes."
        ],
        "desc" : "Binds hotkeys for EjectMenu",
        "notes" : [

        ],
        "signature" : "EjectMenu:bindHotkeys(mapping)",
        "type" : "Method",
        "returns" : [

        ],
        "def" : "EjectMenu:bindHotkeys(mapping)",
        "name" : "bindHotkeys"
      },
      {
        "doc" : "Eject all volumes\n\nParameters\n * persistent_notifs: a boolean indicating whether notifications (if shown) should be persistent.",
        "stripped_doc" : [
          "Eject all volumes",
          "",
          "Parameters",
          " * persistent_notifs: a boolean indicating whether notifications (if shown) should be persistent."
        ],
        "parameters" : [

        ],
        "desc" : "Eject all volumes",
        "notes" : [

        ],
        "signature" : "EjectMenu:ejectVolumes()",
        "type" : "Method",
        "returns" : [

        ],
        "def" : "EjectMenu:ejectVolumes()",
        "name" : "ejectVolumes"
      },
      {
        "doc" : "Determine if a volume should be ejected.\n\nParameters:\n * path - the mount path of the volume.\n * info - a table containing a data structure as returned by `hs.fs.volume.allVolumes()`.\nReturns:\n * A boolean indicating whether the volume should be ejected.",
        "stripped_doc" : [
          "Determine if a volume should be ejected.",
          ""
        ],
        "parameters" : [
          " * path - the mount path of the volume.",
          " * info - a table containing a data structure as returned by `hs.fs.volume.allVolumes()`."
        ],
        "desc" : "Determine if a volume should be ejected.",
        "notes" : [

        ],
        "signature" : "EjectMenu:shouldEject(path, info)",
        "type" : "Method",
        "returns" : [
          " * A boolean indicating whether the volume should be ejected."
        ],
        "def" : "EjectMenu:shouldEject(path, info)",
        "name" : "shouldEject"
      },
      {
        "doc" : "Start the watchers for power events and screen changes, to trigger volume ejection.",
        "stripped_doc" : [
          "Start the watchers for power events and screen changes, to trigger volume ejection."
        ],
        "parameters" : [

        ],
        "desc" : "Start the watchers for power events and screen changes, to trigger volume ejection.",
        "notes" : [

        ],
        "signature" : "EjectMenu:start()",
        "type" : "Method",
        "returns" : [

        ],
        "def" : "EjectMenu:start()",
        "name" : "start"
      },
      {
        "doc" : "Stop the watchers",
        "stripped_doc" : [
          "Stop the watchers"
        ],
        "parameters" : [

        ],
        "desc" : "Stop the watchers",
        "notes" : [

        ],
        "signature" : "EjectMenu:stop()",
        "type" : "Method",
        "returns" : [

        ],
        "def" : "EjectMenu:stop()",
        "name" : "stop"
      }
    ],
    "Method" : [
      {
        "doc" : "Determine if a volume should be ejected.\n\nParameters:\n * path - the mount path of the volume.\n * info - a table containing a data structure as returned by `hs.fs.volume.allVolumes()`.\nReturns:\n * A boolean indicating whether the volume should be ejected.",
        "stripped_doc" : [
          "Determine if a volume should be ejected.",
          ""
        ],
        "parameters" : [
          " * path - the mount path of the volume.",
          " * info - a table containing a data structure as returned by `hs.fs.volume.allVolumes()`."
        ],
        "desc" : "Determine if a volume should be ejected.",
        "notes" : [

        ],
        "signature" : "EjectMenu:shouldEject(path, info)",
        "type" : "Method",
        "returns" : [
          " * A boolean indicating whether the volume should be ejected."
        ],
        "def" : "EjectMenu:shouldEject(path, info)",
        "name" : "shouldEject"
      },
      {
        "doc" : "Eject all volumes\n\nParameters\n * persistent_notifs: a boolean indicating whether notifications (if shown) should be persistent.",
        "stripped_doc" : [
          "Eject all volumes",
          "",
          "Parameters",
          " * persistent_notifs: a boolean indicating whether notifications (if shown) should be persistent."
        ],
        "parameters" : [

        ],
        "desc" : "Eject all volumes",
        "notes" : [

        ],
        "signature" : "EjectMenu:ejectVolumes()",
        "type" : "Method",
        "returns" : [

        ],
        "def" : "EjectMenu:ejectVolumes()",
        "name" : "ejectVolumes"
      },
      {
        "doc" : "Binds hotkeys for EjectMenu\n\nParameters:\n * mapping - A table containing hotkey objifier\/key details for the following items:\n  * ejectAll - eject all volumes.",
        "stripped_doc" : [
          "Binds hotkeys for EjectMenu",
          ""
        ],
        "parameters" : [
          " * mapping - A table containing hotkey objifier\/key details for the following items:",
          "  * ejectAll - eject all volumes."
        ],
        "desc" : "Binds hotkeys for EjectMenu",
        "notes" : [

        ],
        "signature" : "EjectMenu:bindHotkeys(mapping)",
        "type" : "Method",
        "returns" : [

        ],
        "def" : "EjectMenu:bindHotkeys(mapping)",
        "name" : "bindHotkeys"
      },
      {
        "doc" : "Start the watchers for power events and screen changes, to trigger volume ejection.",
        "stripped_doc" : [
          "Start the watchers for power events and screen changes, to trigger volume ejection."
        ],
        "parameters" : [

        ],
        "desc" : "Start the watchers for power events and screen changes, to trigger volume ejection.",
        "notes" : [

        ],
        "signature" : "EjectMenu:start()",
        "type" : "Method",
        "returns" : [

        ],
        "def" : "EjectMenu:start()",
        "name" : "start"
      },
      {
        "doc" : "Stop the watchers",
        "stripped_doc" : [
          "Stop the watchers"
        ],
        "parameters" : [

        ],
        "desc" : "Stop the watchers",
        "notes" : [

        ],
        "signature" : "EjectMenu:stop()",
        "type" : "Method",
        "returns" : [

        ],
        "def" : "EjectMenu:stop()",
        "name" : "stop"
      }
    ],
    "name" : "EjectMenu"
  }
]
