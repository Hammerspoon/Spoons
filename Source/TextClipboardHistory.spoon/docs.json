[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "TextClipboardHistory:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for TextClipboardHistory",
        "doc": "Binds hotkeys for TextClipboardHistory\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * show_clipboard - Display the clipboard history chooser\n  * toggle_clipboard - Show/hide the clipboard history chooser",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:",
          "  * show_clipboard - Display the clipboard history chooser",
          "  * toggle_clipboard - Show/hide the clipboard history chooser"
        ],
        "signature": "TextClipboardHistory:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:checkAndStorePasteboard()",
        "desc": "If the pasteboard has changed, we add the current item to our history and update the counter",
        "doc": "If the pasteboard has changed, we add the current item to our history and update the counter",
        "name": "checkAndStorePasteboard",
        "signature": "TextClipboardHistory:checkAndStorePasteboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:clearAll()",
        "desc": "Clears the clipboard and history",
        "doc": "Clears the clipboard and history",
        "name": "clearAll",
        "signature": "TextClipboardHistory:clearAll()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:clearLastItem()",
        "desc": "Clears the last added to the history",
        "doc": "Clears the last added to the history",
        "name": "clearLastItem",
        "signature": "TextClipboardHistory:clearLastItem()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:pasteboardToClipboard(item)",
        "desc": "Add the given string to the history",
        "doc": "Add the given string to the history\n\nParameters:\n * item - string to add to the clipboard history\n\nReturns:\n * None",
        "name": "pasteboardToClipboard",
        "parameters": [
          " * item - string to add to the clipboard history"
        ],
        "returns": [
          " * None"
        ],
        "signature": "TextClipboardHistory:pasteboardToClipboard(item)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:shouldBeStored()",
        "desc": "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
        "doc": "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
        "name": "shouldBeStored",
        "signature": "TextClipboardHistory:shouldBeStored()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:showClipboard()",
        "desc": "Display the current clipboard list in a chooser",
        "doc": "Display the current clipboard list in a chooser",
        "name": "showClipboard",
        "signature": "TextClipboardHistory:showClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:start()",
        "desc": "Start the clipboard history collector",
        "doc": "Start the clipboard history collector",
        "name": "start",
        "signature": "TextClipboardHistory:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:toggleClipboard()",
        "desc": "Show/hide the clipboard list, depending on its current state",
        "doc": "Show/hide the clipboard list, depending on its current state",
        "name": "toggleClipboard",
        "signature": "TextClipboardHistory:toggleClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:togglePasteOnSelect()",
        "desc": "Toggle the value of `TextClipboardHistory.paste_on_select`",
        "doc": "Toggle the value of `TextClipboardHistory.paste_on_select`",
        "name": "togglePasteOnSelect",
        "signature": "TextClipboardHistory:togglePasteOnSelect()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "TextClipboardHistory.deduplicate",
        "desc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "doc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "name": "deduplicate",
        "signature": "TextClipboardHistory.deduplicate",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.frequency",
        "desc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "doc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "name": "frequency",
        "signature": "TextClipboardHistory.frequency",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.hist_size",
        "desc": "How many items to keep on history. Defaults to 100",
        "doc": "How many items to keep on history. Defaults to 100",
        "name": "hist_size",
        "signature": "TextClipboardHistory.hist_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.honor_ignoredidentifiers",
        "desc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "doc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "name": "honor_ignoredidentifiers",
        "signature": "TextClipboardHistory.honor_ignoredidentifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.ignoredIdentifiers",
        "desc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua. Default value (don't modify unless you know what you are doing):",
        "doc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua. Default value (don't modify unless you know what you are doing):\n```\n {\n    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler\n    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me\n    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator\n    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password\n    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient\n    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed\n    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic\n }\n```",
        "name": "ignoredIdentifiers",
        "signature": "TextClipboardHistory.ignoredIdentifiers",
        "stripped_doc": "```\n {\n    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler\n    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me\n    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator\n    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password\n    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient\n    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed\n    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic\n }\n```",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "TextClipboardHistory.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.menubar_title",
        "desc": "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)",
        "doc": "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)",
        "name": "menubar_title",
        "signature": "TextClipboardHistory.menubar_title",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.paste_on_select",
        "desc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "doc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "name": "paste_on_select",
        "signature": "TextClipboardHistory.paste_on_select",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.show_in_menubar",
        "desc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "doc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "name": "show_in_menubar",
        "signature": "TextClipboardHistory.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Keep a history of the clipboard, only for text entries",
    "doc": "Keep a history of the clipboard, only for text entries\n\nOriginally based on [code by VFS](https://github.com/VFS/.hammerspoon/blob/master/tools/clipboard.lua), but with many changes and some contributions and inspiration from [asmagill](https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua).\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TextClipboardHistory.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TextClipboardHistory.spoon.zip)",
    "items": [
      {
        "def": "TextClipboardHistory:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for TextClipboardHistory",
        "doc": "Binds hotkeys for TextClipboardHistory\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * show_clipboard - Display the clipboard history chooser\n  * toggle_clipboard - Show/hide the clipboard history chooser",
        "name": "bindHotkeys",
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:",
          "  * show_clipboard - Display the clipboard history chooser",
          "  * toggle_clipboard - Show/hide the clipboard history chooser"
        ],
        "signature": "TextClipboardHistory:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:checkAndStorePasteboard()",
        "desc": "If the pasteboard has changed, we add the current item to our history and update the counter",
        "doc": "If the pasteboard has changed, we add the current item to our history and update the counter",
        "name": "checkAndStorePasteboard",
        "signature": "TextClipboardHistory:checkAndStorePasteboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:clearAll()",
        "desc": "Clears the clipboard and history",
        "doc": "Clears the clipboard and history",
        "name": "clearAll",
        "signature": "TextClipboardHistory:clearAll()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:clearLastItem()",
        "desc": "Clears the last added to the history",
        "doc": "Clears the last added to the history",
        "name": "clearLastItem",
        "signature": "TextClipboardHistory:clearLastItem()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory.deduplicate",
        "desc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "doc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
        "name": "deduplicate",
        "signature": "TextClipboardHistory.deduplicate",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.frequency",
        "desc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "doc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
        "name": "frequency",
        "signature": "TextClipboardHistory.frequency",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.hist_size",
        "desc": "How many items to keep on history. Defaults to 100",
        "doc": "How many items to keep on history. Defaults to 100",
        "name": "hist_size",
        "signature": "TextClipboardHistory.hist_size",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.honor_ignoredidentifiers",
        "desc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "doc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
        "name": "honor_ignoredidentifiers",
        "signature": "TextClipboardHistory.honor_ignoredidentifiers",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.ignoredIdentifiers",
        "desc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua. Default value (don't modify unless you know what you are doing):",
        "doc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua. Default value (don't modify unless you know what you are doing):\n```\n {\n    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler\n    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me\n    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator\n    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password\n    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient\n    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed\n    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic\n }\n```",
        "name": "ignoredIdentifiers",
        "signature": "TextClipboardHistory.ignoredIdentifiers",
        "stripped_doc": "```\n {\n    [\"de.petermaurer.TransientPasteboardType\"] = true, -- Transient : Textpander, TextExpander, Butler\n    [\"com.typeit4me.clipping\"]                 = true, -- Transient : TypeIt4Me\n    [\"Pasteboard generator type\"]              = true, -- Transient : Typinator\n    [\"com.agilebits.onepassword\"]              = true, -- Confidential : 1Password\n    [\"org.nspasteboard.TransientType\"]         = true, -- Universal, Transient\n    [\"org.nspasteboard.ConcealedType\"]         = true, -- Universal, Concealed\n    [\"org.nspasteboard.AutoGeneratedType\"]     = true, -- Universal, Automatic\n }\n```",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "TextClipboardHistory.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.menubar_title",
        "desc": "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)",
        "doc": "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)",
        "name": "menubar_title",
        "signature": "TextClipboardHistory.menubar_title",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory.paste_on_select",
        "desc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "doc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
        "name": "paste_on_select",
        "signature": "TextClipboardHistory.paste_on_select",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory:pasteboardToClipboard(item)",
        "desc": "Add the given string to the history",
        "doc": "Add the given string to the history\n\nParameters:\n * item - string to add to the clipboard history\n\nReturns:\n * None",
        "name": "pasteboardToClipboard",
        "parameters": [
          " * item - string to add to the clipboard history"
        ],
        "returns": [
          " * None"
        ],
        "signature": "TextClipboardHistory:pasteboardToClipboard(item)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:shouldBeStored()",
        "desc": "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
        "doc": "Verify whether the pasteboard contents matches one of the values in `TextClipboardHistory.ignoredIdentifiers`",
        "name": "shouldBeStored",
        "signature": "TextClipboardHistory:shouldBeStored()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory.show_in_menubar",
        "desc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "doc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
        "name": "show_in_menubar",
        "signature": "TextClipboardHistory.show_in_menubar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "TextClipboardHistory:showClipboard()",
        "desc": "Display the current clipboard list in a chooser",
        "doc": "Display the current clipboard list in a chooser",
        "name": "showClipboard",
        "signature": "TextClipboardHistory:showClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:start()",
        "desc": "Start the clipboard history collector",
        "doc": "Start the clipboard history collector",
        "name": "start",
        "signature": "TextClipboardHistory:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:toggleClipboard()",
        "desc": "Show/hide the clipboard list, depending on its current state",
        "doc": "Show/hide the clipboard list, depending on its current state",
        "name": "toggleClipboard",
        "signature": "TextClipboardHistory:toggleClipboard()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "TextClipboardHistory:togglePasteOnSelect()",
        "desc": "Toggle the value of `TextClipboardHistory.paste_on_select`",
        "doc": "Toggle the value of `TextClipboardHistory.paste_on_select`",
        "name": "togglePasteOnSelect",
        "signature": "TextClipboardHistory:togglePasteOnSelect()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "TextClipboardHistory",
    "stripped_doc": "\nOriginally based on [code by VFS](https://github.com/VFS/.hammerspoon/blob/master/tools/clipboard.lua), but with many changes and some contributions and inspiration from [asmagill](https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua).\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TextClipboardHistory.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/TextClipboardHistory.spoon.zip)",
    "submodules": [],
    "type": "Module"
  }
]