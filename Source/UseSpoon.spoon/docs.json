[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "def" : "UseSpoon.logger",
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "notes" : [

        ],
        "signature" : "UseSpoon.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "logger",
        "parameters" : [

        ]
      }
    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "type" : "Module",
    "desc" : "Declaratively install, load and configure a spoon in a single statement.",
    "Constructor" : [

    ],
    "items" : [
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "def" : "UseSpoon.logger",
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "notes" : [

        ],
        "signature" : "UseSpoon.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "logger",
        "parameters" : [

        ]
      },
      {
        "doc" : "Install, load and configure a Spoon\n\nParameters:\n * name - the name of the Spoon to install (without the `.spoon` extension). If the Spoon is already installed, it will be loaded using `hs.loadSpoon()`. If it is not installed, it will be installed using `hs.spoons.asyncInstallSpoonFromRepo()` and then loaded.\n * arg - if provided, can be used to specify the configuration of the Spoon. The following keys are recognized (all are optional):\n   * repo - repository from where the Spoon should be installed if not present in the system, as defined in `hs.spoons.repos`. Defaults to `\"default\"`.\n   * config - a table containing variables to be stored in the Spoon object to configure it. For example, `config = { answer = 42 }` will result in `spoon.<LoadedSpoon>.answer` being set to 42.\n   * hotkeys - a table containing hotkey bindings. If provided, will be passed as-is to the Spoon's `bindHotkeys()` method. The special string `\"default\"` can be given to use the Spoons `defaultHotkeys` variable, if it exists.\n   * fn - a function which will be called with the freshly-loaded Spoon object as its first argument.\n   * loglevel - if the Spoon has a variable called `logger`, its `setLogLevel()` method will be called with this value.\n   * start - if `true`, call the Spoon's `start()` method after configuring everything else.\n\nReturns:\n * None\n\nNotes:\n * For convenience, this method can be invoked directly on the UseSpoon object, i.e. `spoon.UseSpoon(name, arg)` instead of `spoon.UseSpoon.use(name, arg)`.",
        "stripped_doc" : [
          "Install, load and configure a Spoon",
          ""
        ],
        "def" : "UseSpoon.use(name, arg)",
        "desc" : "Install, load and configure a Spoon",
        "notes" : [
          " * For convenience, this method can be invoked directly on the UseSpoon object, i.e. `spoon.UseSpoon(name, arg)` instead of `spoon.UseSpoon.use(name, arg)`."
        ],
        "signature" : "UseSpoon.use(name, arg)",
        "type" : "Method",
        "returns" : [
          " * None",
          ""
        ],
        "name" : "use",
        "parameters" : [
          " * name - the name of the Spoon to install (without the `.spoon` extension). If the Spoon is already installed, it will be loaded using `hs.loadSpoon()`. If it is not installed, it will be installed using `hs.spoons.asyncInstallSpoonFromRepo()` and then loaded.",
          " * arg - if provided, can be used to specify the configuration of the Spoon. The following keys are recognized (all are optional):",
          "   * repo - repository from where the Spoon should be installed if not present in the system, as defined in `hs.spoons.repos`. Defaults to `\"default\"`.",
          "   * config - a table containing variables to be stored in the Spoon object to configure it. For example, `config = { answer = 42 }` will result in `spoon.<LoadedSpoon>.answer` being set to 42.",
          "   * hotkeys - a table containing hotkey bindings. If provided, will be passed as-is to the Spoon's `bindHotkeys()` method. The special string `\"default\"` can be given to use the Spoons `defaultHotkeys` variable, if it exists.",
          "   * fn - a function which will be called with the freshly-loaded Spoon object as its first argument.",
          "   * loglevel - if the Spoon has a variable called `logger`, its `setLogLevel()` method will be called with this value.",
          "   * start - if `true`, call the Spoon's `start()` method after configuring everything else.",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "doc" : "Install, load and configure a Spoon\n\nParameters:\n * name - the name of the Spoon to install (without the `.spoon` extension). If the Spoon is already installed, it will be loaded using `hs.loadSpoon()`. If it is not installed, it will be installed using `hs.spoons.asyncInstallSpoonFromRepo()` and then loaded.\n * arg - if provided, can be used to specify the configuration of the Spoon. The following keys are recognized (all are optional):\n   * repo - repository from where the Spoon should be installed if not present in the system, as defined in `hs.spoons.repos`. Defaults to `\"default\"`.\n   * config - a table containing variables to be stored in the Spoon object to configure it. For example, `config = { answer = 42 }` will result in `spoon.<LoadedSpoon>.answer` being set to 42.\n   * hotkeys - a table containing hotkey bindings. If provided, will be passed as-is to the Spoon's `bindHotkeys()` method. The special string `\"default\"` can be given to use the Spoons `defaultHotkeys` variable, if it exists.\n   * fn - a function which will be called with the freshly-loaded Spoon object as its first argument.\n   * loglevel - if the Spoon has a variable called `logger`, its `setLogLevel()` method will be called with this value.\n   * start - if `true`, call the Spoon's `start()` method after configuring everything else.\n\nReturns:\n * None\n\nNotes:\n * For convenience, this method can be invoked directly on the UseSpoon object, i.e. `spoon.UseSpoon(name, arg)` instead of `spoon.UseSpoon.use(name, arg)`.",
        "stripped_doc" : [
          "Install, load and configure a Spoon",
          ""
        ],
        "def" : "UseSpoon.use(name, arg)",
        "desc" : "Install, load and configure a Spoon",
        "notes" : [
          " * For convenience, this method can be invoked directly on the UseSpoon object, i.e. `spoon.UseSpoon(name, arg)` instead of `spoon.UseSpoon.use(name, arg)`."
        ],
        "signature" : "UseSpoon.use(name, arg)",
        "type" : "Method",
        "returns" : [
          " * None",
          ""
        ],
        "name" : "use",
        "parameters" : [
          " * name - the name of the Spoon to install (without the `.spoon` extension). If the Spoon is already installed, it will be loaded using `hs.loadSpoon()`. If it is not installed, it will be installed using `hs.spoons.asyncInstallSpoonFromRepo()` and then loaded.",
          " * arg - if provided, can be used to specify the configuration of the Spoon. The following keys are recognized (all are optional):",
          "   * repo - repository from where the Spoon should be installed if not present in the system, as defined in `hs.spoons.repos`. Defaults to `\"default\"`.",
          "   * config - a table containing variables to be stored in the Spoon object to configure it. For example, `config = { answer = 42 }` will result in `spoon.<LoadedSpoon>.answer` being set to 42.",
          "   * hotkeys - a table containing hotkey bindings. If provided, will be passed as-is to the Spoon's `bindHotkeys()` method. The special string `\"default\"` can be given to use the Spoons `defaultHotkeys` variable, if it exists.",
          "   * fn - a function which will be called with the freshly-loaded Spoon object as its first argument.",
          "   * loglevel - if the Spoon has a variable called `logger`, its `setLogLevel()` method will be called with this value.",
          "   * start - if `true`, call the Spoon's `start()` method after configuring everything else.",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "doc" : "Declaratively install, load and configure a spoon in a single statement.\n\nInspired by Emacs' [use-package](https:\/\/www.masteringemacs.org\/article\/spotlight-use-package-a-declarative-configuration-tool)\n\nExample usage:\n```\nhs.loadSpoon(\"UseSpoon\")\n\n-- This will install the spoon if needed, load it, and configure it accordingly\nspoon.UseSpoon(\"Caffeine\")\n\nspoon.UseSpoon(\"SendToOmniFocus\",\n               {\n                  config = {\n                     quickentrydialog = false,\n                     notifications = true\n                  },\n                  hotkeys = {\n                     send_to_omnifocus = { hyper, \"t\" }\n                  },\n                  fn = function(s)\n                     -- My Wiki and My Jira are apps created with Epichrome\n                     s:registerApplication(\"My Wiki\", { apptype = \"chromeapp\", itemname = \"wiki page\" })\n                     s:registerApplication(\"My Jira\", { apptype = \"chromeapp\", itemname = \"issue\" })\n                  end\n               }\n)\n```\n\nDownload: [https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/UseSpoon.spoon.zip](https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/UseSpoon.spoon.zip)",
    "name" : "UseSpoon"
  }
]
