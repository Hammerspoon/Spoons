[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "def" : "WiFiTransitions.logger",
        "notes" : [

        ],
        "signature" : "WiFiTransitions.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "logger",
        "parameters" : [

        ]
      },
      {
        "doc" : "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:\n * to - if given, pattern to match against the new SSID. Defaults to match any network. Transitions through the disabled state are ignored (i.e. normally a `nil` SSID is reported when switching SSIDs)\n * from - if given, pattern to match against the previous SSID. Defaults to match any network.\n * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:\n   * event - always \"SSIDChange\"\n   * interface - name of the interface on which the SSID changed\n   * old_ssid - previous SSID name\n   * new_ssid - new SSID name\n * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored.",
        "stripped_doc" : [
          "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:",
          " * to - if given, pattern to match against the new SSID. Defaults to match any network. Transitions through the disabled state are ignored (i.e. normally a `nil` SSID is reported when switching SSIDs)",
          " * from - if given, pattern to match against the previous SSID. Defaults to match any network.",
          " * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:",
          "   * event - always \"SSIDChange\"",
          "   * interface - name of the interface on which the SSID changed",
          "   * old_ssid - previous SSID name",
          "   * new_ssid - new SSID name",
          " * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored."
        ],
        "desc" : "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:",
        "def" : "WiFiTransitions.actions",
        "notes" : [

        ],
        "signature" : "WiFiTransitions.actions",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "actions",
        "parameters" : [

        ]
      }
    ],
    "stripped_doc" : [

    ],
    "desc" : "Allow arbitrary actions when transitioning between SSIDs",
    "type" : "Module",
    "Deprecated" : [

    ],
    "Constructor" : [

    ],
    "Field" : [

    ],
    "doc" : "Allow arbitrary actions when transitioning between SSIDs\n\nDownload: [https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/WiFiTransitions.spoon.zip](https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/WiFiTransitions.spoon.zip)",
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:\n * to - if given, pattern to match against the new SSID. Defaults to match any network. Transitions through the disabled state are ignored (i.e. normally a `nil` SSID is reported when switching SSIDs)\n * from - if given, pattern to match against the previous SSID. Defaults to match any network.\n * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:\n   * event - always \"SSIDChange\"\n   * interface - name of the interface on which the SSID changed\n   * old_ssid - previous SSID name\n   * new_ssid - new SSID name\n * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored.",
        "stripped_doc" : [
          "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:",
          " * to - if given, pattern to match against the new SSID. Defaults to match any network. Transitions through the disabled state are ignored (i.e. normally a `nil` SSID is reported when switching SSIDs)",
          " * from - if given, pattern to match against the previous SSID. Defaults to match any network.",
          " * fn - function to execute if there is a match. Can also be a list of functions, which will be executed in sequence. Each function will receive the following arguments:",
          "   * event - always \"SSIDChange\"",
          "   * interface - name of the interface on which the SSID changed",
          "   * old_ssid - previous SSID name",
          "   * new_ssid - new SSID name",
          " * cmd - shell command to execute if there is a match. Can also be a list of commands, which will be executed in sequence using `hs.execute`. If `fn` is given, `cmd` is ignored."
        ],
        "desc" : "Table containing a list of actions to execute for SSID transitions. Each action is itself a table with the following keys:",
        "def" : "WiFiTransitions.actions",
        "notes" : [

        ],
        "signature" : "WiFiTransitions.actions",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "actions",
        "parameters" : [

        ]
      },
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "def" : "WiFiTransitions.logger",
        "notes" : [

        ],
        "signature" : "WiFiTransitions.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "logger",
        "parameters" : [

        ]
      },
      {
        "doc" : "Process the rules and execute any actions corresponding to the specified transition.\n\nThis method is called internally by the `hs.wifi.watcher` object\nwhen WiFi transitions happen. It does not get any system\ninformation nor does it set any Spoon state information, so it can\nalso be used to \"trigger\" transitions manually, either for testing\nor if the automated processing fails for any reason.\n\nParameters:\n * new_ssid - new SSID name\n * prev_ssid - previous SSID name. Defaults to `nil`\n * interface - interface where the transition occurred. Defaults to `nil`",
        "stripped_doc" : [
          "Process the rules and execute any actions corresponding to the specified transition.",
          "",
          "This method is called internally by the `hs.wifi.watcher` object",
          "when WiFi transitions happen. It does not get any system",
          "information nor does it set any Spoon state information, so it can",
          "also be used to \"trigger\" transitions manually, either for testing",
          "or if the automated processing fails for any reason.",
          ""
        ],
        "desc" : "Process the rules and execute any actions corresponding to the specified transition.",
        "def" : "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "notes" : [

        ],
        "signature" : "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "type" : "Method",
        "returns" : [

        ],
        "name" : "processTransition",
        "parameters" : [
          " * new_ssid - new SSID name",
          " * prev_ssid - previous SSID name. Defaults to `nil`",
          " * interface - interface where the transition occurred. Defaults to `nil`"
        ]
      },
      {
        "doc" : "Start the WiFi watcher\n\nReturns:\n * The WiFiTransitions spoon object",
        "stripped_doc" : [
          "Start the WiFi watcher",
          ""
        ],
        "desc" : "Start the WiFi watcher",
        "def" : "WiFiTransitions:start()",
        "notes" : [

        ],
        "signature" : "WiFiTransitions:start()",
        "type" : "Method",
        "returns" : [
          " * The WiFiTransitions spoon object"
        ],
        "name" : "start",
        "parameters" : [

        ]
      }
    ],
    "Method" : [
      {
        "doc" : "Process the rules and execute any actions corresponding to the specified transition.\n\nThis method is called internally by the `hs.wifi.watcher` object\nwhen WiFi transitions happen. It does not get any system\ninformation nor does it set any Spoon state information, so it can\nalso be used to \"trigger\" transitions manually, either for testing\nor if the automated processing fails for any reason.\n\nParameters:\n * new_ssid - new SSID name\n * prev_ssid - previous SSID name. Defaults to `nil`\n * interface - interface where the transition occurred. Defaults to `nil`",
        "stripped_doc" : [
          "Process the rules and execute any actions corresponding to the specified transition.",
          "",
          "This method is called internally by the `hs.wifi.watcher` object",
          "when WiFi transitions happen. It does not get any system",
          "information nor does it set any Spoon state information, so it can",
          "also be used to \"trigger\" transitions manually, either for testing",
          "or if the automated processing fails for any reason.",
          ""
        ],
        "desc" : "Process the rules and execute any actions corresponding to the specified transition.",
        "def" : "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "notes" : [

        ],
        "signature" : "WiFiTransitions:processTransition(new_ssid, prev_ssid, interface)",
        "type" : "Method",
        "returns" : [

        ],
        "name" : "processTransition",
        "parameters" : [
          " * new_ssid - new SSID name",
          " * prev_ssid - previous SSID name. Defaults to `nil`",
          " * interface - interface where the transition occurred. Defaults to `nil`"
        ]
      },
      {
        "doc" : "Start the WiFi watcher\n\nReturns:\n * The WiFiTransitions spoon object",
        "stripped_doc" : [
          "Start the WiFi watcher",
          ""
        ],
        "desc" : "Start the WiFi watcher",
        "def" : "WiFiTransitions:start()",
        "notes" : [

        ],
        "signature" : "WiFiTransitions:start()",
        "type" : "Method",
        "returns" : [
          " * The WiFiTransitions spoon object"
        ],
        "name" : "start",
        "parameters" : [

        ]
      }
    ],
    "name" : "WiFiTransitions"
  }
]
