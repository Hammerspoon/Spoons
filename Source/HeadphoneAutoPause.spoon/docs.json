[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "HeadphoneAutoPause.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "HeadphoneAutoPause.logger",
        "name" : "logger"
      },
      {
        "doc" : "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause\/unpause that application in response to the headphone being plugged\/unplugged. The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:\n```\n{\n   itunes = true,\n   spotify = true,\n   deezer = true,\n   vox = false -- Vox has built-in headphone detection support\n}\n```",
        "stripped_doc" : [
          "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause\/unpause that application in response to the headphone being plugged\/unplugged. The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:",
          "```",
          "{",
          "   itunes = true,",
          "   spotify = true,",
          "   deezer = true,",
          "   vox = false -- Vox has built-in headphone detection support",
          "}",
          "```"
        ],
        "desc" : "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause\/unpause that application in response to the headphone being plugged\/unplugged. The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "HeadphoneAutoPause.control",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "HeadphoneAutoPause.control",
        "name" : "control"
      },
      {
        "doc" : "Table containing control functions for each application to control.\nThe keys must correspond to the values in `HeadphoneAutoPause.control`, and the value is a table with the following elements:\n * `appname` - application name (case-sensitive, as the application appears to the system)\n * `isPlaying` - function that returns a true value if the application is playing\n * `play` - function that starts playback in the application\n * `pause` - function that pauses playback in the application\n\nThe default value includes definitions for iTunes, Spotify, Deezer and Vox, using the corresponding functions from `hs.itunes`, `hs.spotify`, `hs.deezer` and `hs.vox`, respectively.",
        "stripped_doc" : [
          "Table containing control functions for each application to control.",
          "The keys must correspond to the values in `HeadphoneAutoPause.control`, and the value is a table with the following elements:",
          " * `appname` - application name (case-sensitive, as the application appears to the system)",
          " * `isPlaying` - function that returns a true value if the application is playing",
          " * `play` - function that starts playback in the application",
          " * `pause` - function that pauses playback in the application",
          "",
          "The default value includes definitions for iTunes, Spotify, Deezer and Vox, using the corresponding functions from `hs.itunes`, `hs.spotify`, `hs.deezer` and `hs.vox`, respectively."
        ],
        "desc" : "Table containing control functions for each application to control.",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "HeadphoneAutoPause.controlfns",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "HeadphoneAutoPause.controlfns",
        "name" : "controlfns"
      }
    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "Play\/pause music players when headphones are connected\/disconnected",
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "Play\/pause music players when headphones are connected\/disconnected\n\nDownload: [https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/HeadphoneAutoPause.spoon.zip](https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/HeadphoneAutoPause.spoon.zip)",
    "Method" : [
      {
        "doc" : "Generate the most common set of application control definition.\n\nParameters:\n * app - name of the application, with its correct letter casing (i.e. \"iTunes\"). The name as provided will be used to find the running application, and its lowercase version will be used to find the corresponding `hs.*` module.\n\nReturns:\n * A table in the correct format for `HeadphoneAutoPause.controlfns`, using the lower-case value of `app` as the module name (for example, if app = \"iTunes\", the module loaded will be `hs.itunes`, and assuming the functions `isPlaying()`, `play()` and `pause()` exist in that module.",
        "stripped_doc" : [
          "Generate the most common set of application control definition.",
          ""
        ],
        "desc" : "Generate the most common set of application control definition.",
        "parameters" : [
          " * app - name of the application, with its correct letter casing (i.e. \"iTunes\"). The name as provided will be used to find the running application, and its lowercase version will be used to find the corresponding `hs.*` module.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "HeadphoneAutoPause.defaultControlFns(app)",
        "type" : "Method",
        "returns" : [
          " * A table in the correct format for `HeadphoneAutoPause.controlfns`, using the lower-case value of `app` as the module name (for example, if app = \"iTunes\", the module loaded will be `hs.itunes`, and assuming the functions `isPlaying()`, `play()` and `pause()` exist in that module."
        ],
        "def" : "HeadphoneAutoPause.defaultControlFns(app)",
        "name" : "defaultControlFns"
      },
      {
        "doc" : "Callback function to use as an audio device watcher, to pause\/unpause the application on headphones plugged\/unplugged",
        "stripped_doc" : [
          "Callback function to use as an audio device watcher, to pause\/unpause the application on headphones plugged\/unplugged"
        ],
        "desc" : "Callback function to use as an audio device watcher, to pause\/unpause the application on headphones plugged\/unplugged",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "HeadphoneAutoPause:audiodevwatch(dev_uid, event_name)",
        "type" : "Method",
        "returns" : [

        ],
        "def" : "HeadphoneAutoPause:audiodevwatch(dev_uid, event_name)",
        "name" : "audiodevwatch"
      },
      {
        "doc" : "Start headphone detection on all audio devices that support it",
        "stripped_doc" : [
          "Start headphone detection on all audio devices that support it"
        ],
        "desc" : "Start headphone detection on all audio devices that support it",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "HeadphoneAutoPause:start()",
        "type" : "Method",
        "returns" : [

        ],
        "def" : "HeadphoneAutoPause:start()",
        "name" : "start"
      },
      {
        "doc" : "Stop headphone detection",
        "stripped_doc" : [
          "Stop headphone detection"
        ],
        "desc" : "Stop headphone detection",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "HeadphoneAutoPause:stop()",
        "type" : "Method",
        "returns" : [

        ],
        "def" : "HeadphoneAutoPause:stop()",
        "name" : "stop"
      }
    ],
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause\/unpause that application in response to the headphone being plugged\/unplugged. The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:\n```\n{\n   itunes = true,\n   spotify = true,\n   deezer = true,\n   vox = false -- Vox has built-in headphone detection support\n}\n```",
        "stripped_doc" : [
          "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause\/unpause that application in response to the headphone being plugged\/unplugged. The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:",
          "```",
          "{",
          "   itunes = true,",
          "   spotify = true,",
          "   deezer = true,",
          "   vox = false -- Vox has built-in headphone detection support",
          "}",
          "```"
        ],
        "desc" : "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause\/unpause that application in response to the headphone being plugged\/unplugged. The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "HeadphoneAutoPause.control",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "HeadphoneAutoPause.control",
        "name" : "control"
      },
      {
        "doc" : "Table containing control functions for each application to control.\nThe keys must correspond to the values in `HeadphoneAutoPause.control`, and the value is a table with the following elements:\n * `appname` - application name (case-sensitive, as the application appears to the system)\n * `isPlaying` - function that returns a true value if the application is playing\n * `play` - function that starts playback in the application\n * `pause` - function that pauses playback in the application\n\nThe default value includes definitions for iTunes, Spotify, Deezer and Vox, using the corresponding functions from `hs.itunes`, `hs.spotify`, `hs.deezer` and `hs.vox`, respectively.",
        "stripped_doc" : [
          "Table containing control functions for each application to control.",
          "The keys must correspond to the values in `HeadphoneAutoPause.control`, and the value is a table with the following elements:",
          " * `appname` - application name (case-sensitive, as the application appears to the system)",
          " * `isPlaying` - function that returns a true value if the application is playing",
          " * `play` - function that starts playback in the application",
          " * `pause` - function that pauses playback in the application",
          "",
          "The default value includes definitions for iTunes, Spotify, Deezer and Vox, using the corresponding functions from `hs.itunes`, `hs.spotify`, `hs.deezer` and `hs.vox`, respectively."
        ],
        "desc" : "Table containing control functions for each application to control.",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "HeadphoneAutoPause.controlfns",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "HeadphoneAutoPause.controlfns",
        "name" : "controlfns"
      },
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "HeadphoneAutoPause.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "HeadphoneAutoPause.logger",
        "name" : "logger"
      },
      {
        "doc" : "Callback function to use as an audio device watcher, to pause\/unpause the application on headphones plugged\/unplugged",
        "stripped_doc" : [
          "Callback function to use as an audio device watcher, to pause\/unpause the application on headphones plugged\/unplugged"
        ],
        "desc" : "Callback function to use as an audio device watcher, to pause\/unpause the application on headphones plugged\/unplugged",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "HeadphoneAutoPause:audiodevwatch(dev_uid, event_name)",
        "type" : "Method",
        "returns" : [

        ],
        "def" : "HeadphoneAutoPause:audiodevwatch(dev_uid, event_name)",
        "name" : "audiodevwatch"
      },
      {
        "doc" : "Generate the most common set of application control definition.\n\nParameters:\n * app - name of the application, with its correct letter casing (i.e. \"iTunes\"). The name as provided will be used to find the running application, and its lowercase version will be used to find the corresponding `hs.*` module.\n\nReturns:\n * A table in the correct format for `HeadphoneAutoPause.controlfns`, using the lower-case value of `app` as the module name (for example, if app = \"iTunes\", the module loaded will be `hs.itunes`, and assuming the functions `isPlaying()`, `play()` and `pause()` exist in that module.",
        "stripped_doc" : [
          "Generate the most common set of application control definition.",
          ""
        ],
        "desc" : "Generate the most common set of application control definition.",
        "parameters" : [
          " * app - name of the application, with its correct letter casing (i.e. \"iTunes\"). The name as provided will be used to find the running application, and its lowercase version will be used to find the corresponding `hs.*` module.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "HeadphoneAutoPause.defaultControlFns(app)",
        "type" : "Method",
        "returns" : [
          " * A table in the correct format for `HeadphoneAutoPause.controlfns`, using the lower-case value of `app` as the module name (for example, if app = \"iTunes\", the module loaded will be `hs.itunes`, and assuming the functions `isPlaying()`, `play()` and `pause()` exist in that module."
        ],
        "def" : "HeadphoneAutoPause.defaultControlFns(app)",
        "name" : "defaultControlFns"
      },
      {
        "doc" : "Start headphone detection on all audio devices that support it",
        "stripped_doc" : [
          "Start headphone detection on all audio devices that support it"
        ],
        "desc" : "Start headphone detection on all audio devices that support it",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "HeadphoneAutoPause:start()",
        "type" : "Method",
        "returns" : [

        ],
        "def" : "HeadphoneAutoPause:start()",
        "name" : "start"
      },
      {
        "doc" : "Stop headphone detection",
        "stripped_doc" : [
          "Stop headphone detection"
        ],
        "desc" : "Stop headphone detection",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "HeadphoneAutoPause:stop()",
        "type" : "Method",
        "returns" : [

        ],
        "def" : "HeadphoneAutoPause:stop()",
        "name" : "stop"
      }
    ],
    "Field" : [

    ],
    "name" : "HeadphoneAutoPause"
  }
]
