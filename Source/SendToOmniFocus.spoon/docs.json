[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "SendToOmniFocus:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for SendToOmniFocus",
        "doc": "Binds hotkeys for SendToOmniFocus\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * send_to_omnifocus - file current item to OmniFocus.",
        "examples": [],
        "file": "Source/SendToOmniFocus.spoon//init.lua",
        "lineno": "201",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * send_to_omnifocus - file current item to OmniFocus."
        ],
        "returns": [],
        "signature": "SendToOmniFocus:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "desc": "Register a new application handler",
        "doc": "Register a new application handler\n\nParameters:\n * app - application name\n * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application.",
        "examples": [],
        "file": "Source/SendToOmniFocus.spoon//init.lua",
        "lineno": "190",
        "name": "registerApplication",
        "notes": [],
        "parameters": [
          " * app - application name",
          " * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application."
        ],
        "returns": [],
        "signature": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus:sendCurrentItem()",
        "desc": "Send current item in current application to OmniFocus by triggering the appropriate handler.",
        "doc": "Send current item in current application to OmniFocus by triggering the appropriate handler.\n\nParameters:\n * None\n\nReturns:\n * The SendToOmniFocus object",
        "examples": [],
        "file": "Source/SendToOmniFocus.spoon//init.lua",
        "lineno": "135",
        "name": "sendCurrentItem",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The SendToOmniFocus object"
        ],
        "signature": "SendToOmniFocus:sendCurrentItem()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "SendToOmniFocus.actions",
        "desc": "Table containing application handlers for sending the current item to OmniFocus.",
        "doc": "Table containing application handlers for sending the current item to OmniFocus.\n\nNotes:\n * Each entry's key is the application name, and its value is another table with the following keys:\n  * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".\n  * One of the following, invoked to do the actual filing:\n    * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.\n    * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.\n    * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.\n    * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).\n * The built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.\n * New handlers can be registered using `SendToOmniFocus:registerApplication()`\n * Default value:\n```\n  {\n     [\"Microsoft Outlook\"] = {\n        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     },\n     Evernote = {\n        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),\n        itemname = \"note\"\n     },\n     [\"Google Chrome\"] = {\n        apptype = \"chromeapp\",\n        itemname = \"tab\"\n     },\n     Mail = {\n        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     }\n  }\n```",
        "file": "Source/SendToOmniFocus.spoon//init.lua",
        "lineno": "65",
        "name": "actions",
        "notes": [
          " * Each entry's key is the application name, and its value is another table with the following keys:",
          "  * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".",
          "  * One of the following, invoked to do the actual filing:",
          "    * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.",
          "    * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.",
          "    * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.",
          "    * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).",
          " * The built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.",
          " * New handlers can be registered using `SendToOmniFocus:registerApplication()`",
          " * Default value:",
          "```",
          "  {",
          "     [\"Microsoft Outlook\"] = {",
          "        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),",
          "        itemname = \"message\"",
          "     },",
          "     Evernote = {",
          "        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),",
          "        itemname = \"note\"",
          "     },",
          "     [\"Google Chrome\"] = {",
          "        apptype = \"chromeapp\",",
          "        itemname = \"tab\"",
          "     },",
          "     Mail = {",
          "        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),",
          "        itemname = \"message\"",
          "     }",
          "  }",
          "```"
        ],
        "signature": "SendToOmniFocus.actions",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/SendToOmniFocus.spoon//init.lua",
        "lineno": "50",
        "name": "logger",
        "signature": "SendToOmniFocus.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.notifications",
        "desc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "doc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "file": "Source/SendToOmniFocus.spoon//init.lua",
        "lineno": "55",
        "name": "notifications",
        "signature": "SendToOmniFocus.notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.quickentrydialog",
        "desc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "doc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "file": "Source/SendToOmniFocus.spoon//init.lua",
        "lineno": "60",
        "name": "quickentrydialog",
        "signature": "SendToOmniFocus.quickentrydialog",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Handles \"send current item to OmniFocus\" for multiple applications",
    "doc": "Handles \"send current item to OmniFocus\" for multiple applications\n\nThe following applications are supported: out of the box: Outlook, Evernote, Mail, Chrome and any Chrome-based apps (such as SSBs created by [Epichrome](https://github.com/dmarmor/epichrome))\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip)",
    "items": [
      {
        "def": "SendToOmniFocus.actions",
        "desc": "Table containing application handlers for sending the current item to OmniFocus.",
        "doc": "Table containing application handlers for sending the current item to OmniFocus.\n\nNotes:\n * Each entry's key is the application name, and its value is another table with the following keys:\n  * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".\n  * One of the following, invoked to do the actual filing:\n    * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.\n    * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.\n    * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.\n    * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).\n * The built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.\n * New handlers can be registered using `SendToOmniFocus:registerApplication()`\n * Default value:\n```\n  {\n     [\"Microsoft Outlook\"] = {\n        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     },\n     Evernote = {\n        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),\n        itemname = \"note\"\n     },\n     [\"Google Chrome\"] = {\n        apptype = \"chromeapp\",\n        itemname = \"tab\"\n     },\n     Mail = {\n        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),\n        itemname = \"message\"\n     }\n  }\n```",
        "file": "Source/SendToOmniFocus.spoon//init.lua",
        "lineno": "65",
        "name": "actions",
        "notes": [
          " * Each entry's key is the application name, and its value is another table with the following keys:",
          "  * `itemname` - how to name the current item in the context of the application. Purely for cosmetic purposes in the notifications (e.g. in Mail, the notification says \"filing message\" instead of \"filing item\". Defaults to \"item\".",
          "  * One of the following, invoked to do the actual filing:",
          "    * `as_scriptfile` - path of a file containing AppleScript code. It will be executed using the `osascript` command. If `quickentrydialog` is set to `false`, the string `nodialog` will be passed as argument to the script.",
          "    * `as_script` - string containing AppleScript code. There is no way to pass an argument to the script via this method.",
          "    * `fn` - a function. It will be passed a boolean indicating the value of `quickentrydialog`.",
          "    * `apptype` - a predefined \"application type\" to trigger different behavior for application families. The only valid value at the moment is \"chromeapp\", which can be used for any Chrome-based applications, including Google Chrome itself and, for example, any site-specific browsers generated using [Epichrome](https://github.com/dmarmor/epichrome).",
          " * The built-in handlers for Outlook, Evernote, Chrome and Mail are implemented by scripts bundled with the SendToOmniFocus spoon.",
          " * New handlers can be registered using `SendToOmniFocus:registerApplication()`",
          " * Default value:",
          "```",
          "  {",
          "     [\"Microsoft Outlook\"] = {",
          "        as_scriptfile = _resource_path(\"scripts/outlook-to-omnifocus.applescript\"),",
          "        itemname = \"message\"",
          "     },",
          "     Evernote = {",
          "        as_scriptfile = _resource_path(\"scripts/evernote-to-omnifocus.applescript\"),",
          "        itemname = \"note\"",
          "     },",
          "     [\"Google Chrome\"] = {",
          "        apptype = \"chromeapp\",",
          "        itemname = \"tab\"",
          "     },",
          "     Mail = {",
          "        as_scriptfile = _resource_path(\"scripts/mail-to-omnifocus.applescript\"),",
          "        itemname = \"message\"",
          "     }",
          "  }",
          "```"
        ],
        "signature": "SendToOmniFocus.actions",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus:bindHotkeys(mapping)",
        "desc": "Binds hotkeys for SendToOmniFocus",
        "doc": "Binds hotkeys for SendToOmniFocus\n\nParameters:\n * mapping - A table containing hotkey objifier/key details for the following items:\n  * send_to_omnifocus - file current item to OmniFocus.",
        "examples": [],
        "file": "Source/SendToOmniFocus.spoon//init.lua",
        "lineno": "201",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey objifier/key details for the following items:\n   * send_to_omnifocus - file current item to OmniFocus."
        ],
        "returns": [],
        "signature": "SendToOmniFocus:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "file": "Source/SendToOmniFocus.spoon//init.lua",
        "lineno": "50",
        "name": "logger",
        "signature": "SendToOmniFocus.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.notifications",
        "desc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "doc": "Boolean to control Hammerspoon-generated notifications when filing items (doest not control AppleScript notifications, if any, generated from within the scripts). Defaults to `true`.",
        "file": "Source/SendToOmniFocus.spoon//init.lua",
        "lineno": "55",
        "name": "notifications",
        "signature": "SendToOmniFocus.notifications",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus.quickentrydialog",
        "desc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "doc": "Whether to display the new tasks in the OmniFocus quick-entry dialog before adding them. Defaults to `true` (set to `false` to send directly to the Inbox, without prompting)",
        "file": "Source/SendToOmniFocus.spoon//init.lua",
        "lineno": "60",
        "name": "quickentrydialog",
        "signature": "SendToOmniFocus.quickentrydialog",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "desc": "Register a new application handler",
        "doc": "Register a new application handler\n\nParameters:\n * app - application name\n * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application.",
        "examples": [],
        "file": "Source/SendToOmniFocus.spoon//init.lua",
        "lineno": "190",
        "name": "registerApplication",
        "notes": [],
        "parameters": [
          " * app - application name",
          " * handlerSpec - a handler definition in the format of `SendToOmniFocus.actions`, or `nil` to unregister the application."
        ],
        "returns": [],
        "signature": "SendToOmniFocus:registerApplication(app, handlerSpec)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SendToOmniFocus:sendCurrentItem()",
        "desc": "Send current item in current application to OmniFocus by triggering the appropriate handler.",
        "doc": "Send current item in current application to OmniFocus by triggering the appropriate handler.\n\nParameters:\n * None\n\nReturns:\n * The SendToOmniFocus object",
        "examples": [],
        "file": "Source/SendToOmniFocus.spoon//init.lua",
        "lineno": "135",
        "name": "sendCurrentItem",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * The SendToOmniFocus object"
        ],
        "signature": "SendToOmniFocus:sendCurrentItem()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "SendToOmniFocus",
    "stripped_doc": "\nThe following applications are supported: out of the box: Outlook, Evernote, Mail, Chrome and any Chrome-based apps (such as SSBs created by [Epichrome](https://github.com/dmarmor/epichrome))\n\nDownload: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/SendToOmniFocus.spoon.zip)",
    "submodules": [],
    "type": "Module"
  }
]