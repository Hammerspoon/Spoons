--- === BrewInfo ===
---
--- Display pop-up with Homebrew Formula info, or open their URL
---
--- Download: [https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip](https://github.com/Hammerspoon/Spoons/raw/master/Spoons/BrewInfo.spoon.zip)
---
--- You can bind keys to automatically display the output of `brew
--- info` of the currently-selected package name, or to open its
--- homepage. I use it to quickly explore new packages from the output
--- of `brew update`.

local mod={}
mod.__index = mod

-- Conformance hack, our Travis linter expects the object to be called "obj"
local obj=mod

-- Metadata
mod.name = "BrewInfo"
obj.version = "1.2"
mod.author = "Diego Zamboni <diego@zzamboni.org>"
mod.homepage = "https://github.com/Hammerspoon/Spoons"
mod.license = "MIT - https://opensource.org/licenses/MIT"

--- BrewInfo.brew_info_delay_sec
--- Variable
--- An integer specifying how long the alerts generated by BrewInfo will stay onscreen
mod.brew_info_delay_sec = 3

--- BrewInfo.brew_info_style
--- Variable
--- A table in conformance with the [hs.alert.defaultStyle](http://www.hammerspoon.org/docs/hs.alert.html#defaultStyle[]) format that specifies the style used by the alerts. Default value: `{ textFont = "Courier New", textSize = 14, radius = 10 }`
mod.brew_info_style = {
   textFont = "Courier New",
   textSize = 14,
   radius = 10
}

--- BrewInfo.select_text_if_needed
--- Variable
--- If `true`, and no text is currently selected in the terminal, issue a double-click to select the text below the cursor, and use that as the input to `brew info`. See also `BrewInfo.select_text_modifiers`. Defaults to `true`.
mod.select_text_if_needed = true

--- BrewInfo.select_text_modifiers
--- Variable
--- Table containing the modifiers to be used together with a double-click when `BrewInfo.select_text_if_needed` is true. Defaults to `{cmd = true, shift = true}` to issue a Cmd-Shift-double-click, which will select a continuous non-space string in Terminal and iTerm2.
mod.select_text_modifiers = {cmd = true, shift = true}

-- Internal function to issue a double click with given modifiers
function leftDoubleClick(modifiers)
   local pos=hs.mouse.getAbsolutePosition()
   hs.eventtap.event.newMouseEvent(hs.eventtap.event.types.leftMouseDown, pos, modifiers)
      :setProperty(hs.eventtap.event.properties.mouseEventClickState, 2)
      :post()
   hs.eventtap.event.newMouseEvent(hs.eventtap.event.types.leftMouseUp, pos, modifiers)
      :post()
end

-- Internal method to get the currently selected text
-- If `select_text_if_needed` is true and no text is selected, issue
-- a double-click to select, then use that
function mod:current_selection()
   local elem=hs.uielement.focusedElement()
   if elem then
      local sel = elem:selectedText()
      if (sel == nil or sel == "") and self.select_text_if_needed then
         -- Simulate a double click to select the text under the cursor
         leftDoubleClick(self.select_text_modifiers)
         hs.timer.usleep(20000)
         sel = elem:selectedText()
      end
      return sel
   else
      return nil
   end
end

-- Internal method to show an alert in the configured style
function mod:show(text)
   hs.alert.show(text, self.brew_info_style, self.brew_info_delay_sec)
   return self
end

--- BrewInfo:showBrewInfo(pkg, subcommand)
--- Method
--- Displays an alert with the output of `brew info [--cask] <pkg>`
---
--- Parameters:
---  * pkg - name of the package to query
---  * cask - boolean indicating if pkg is a cask
---
--- Returns:
---  * The Spoon object
function mod:showBrewInfo(pkg, cask)
   local info = "No package selected"
   local st = nil
   if pkg and pkg ~= "" then
      local cmdTokens = { "/usr/local/bin/brew", "info", pkg }
      if cask then
         table.insert(cmdTokens, 3, "--cask")
      end
      local cmd=table.concat(cmdTokens, " ")
      info, st=hs.execute(cmd)
      if st == nil then
         info = "No information found about formula '" .. pkg .. "'!"
      end
   end
   self:show(info)
   return self
end

--- BrewInfo:showBrewInfoCurSel(cask)
--- Method
--- Display `brew info [--cask]` using the selected text as the package name
---
--- Parameters:
---  * cask - boolean indicating if pkg is a cask
---
--- Returns:
---  * The Spoon object
function mod:showBrewInfoCurSel(cask)
   return self:showBrewInfo(self:current_selection(), cask)
end

--- BrewInfo:openBrewURL(pkg, cask)
--- Method
--- Opens the homepage for package `pkg`, as obtained from the `homepage` field in `brew info [--cask|--formula] json=v2 <pkg>`
---
--- Parameters:
---  * pkg - name of the package to query
---  * cask - boolean indicating if pkg is a cask
---
--- Returns:
---  * The Spoon object
function mod:openBrewURL(pkg, cask)
   local msg = "No package selected"
   if pkg and pkg ~= "" then
      local cmdTokens = { "/usr/local/bin/brew", "info", "--formula", "--json=v2", pkg }
      if cask then
         cmdTokens[3] = "--cask"
         --table.remove(cmdTokens, 3)
         --table.insert(cmdTokens, 3, "--cask")
      end
      local cmd=table.concat(cmdTokens, " ")
      local j, st, t, rc=hs.execute(cmd)
      if st ~= nil then
         local url=""
         if cask then
            url=hs.json.decode(j)["casks"][1]["homepage"]
         else
            url=hs.json.decode(j)["formulae"][1]["homepage"]
         end
         if url and url ~= "" then
            hs.urlevent.openURLWithBundle(url, hs.urlevent.getDefaultHandler("http"))
            return self
         end
      end
      msg = "An error occurred obtaining information about '" .. pkg .. "'"
   end
   self:show(msg)
   return self
end

--- BrewInfo:openBrewURLCurSel(cask)
--- Method
--- Opens the homepage for the currently-selected package, as obtained from the `homepage` field in `brew info [--cask|--formula] --json=v2 <pkg>`
---
--- Parameters:
---  * cask - boolean indicating if pkg is a cask
---
--- Returns:
---  * The Spoon object
function mod:openBrewURLCurSel(cask)
   return self:openBrewURL(self:current_selection(), cask)
end

--- BrewInfo:bindHotkeys(mapping)
--- Method
--- Binds hotkeys for BrewInfo
---
--- Parameters:
---  * mapping - A table containing hotkey modifier/key details for the following items:
---   * show_brew_info - Show output of `brew info` using the selected text as package name
---   * open_brew_url - Open the homepage of the formula whose name is currently selected
---   * show_brew_cask_info - Show output of `brew cask info` using the selected text as package name
---   * open_brew_cask_url - Open the homepage of the Cask whose name is currently selected
function mod:bindHotkeys(mapping)
   local def = {
      show_brew_info = function() self:showBrewInfoCurSel(false) end,
      open_brew_url = function() self:openBrewURLCurSel(false) end,
      show_brew_cask_info = function() self:showBrewInfoCurSel(true) end,
      open_brew_cask_url = function() self:openBrewURLCurSel(true) end,
   }
   hs.spoons.bindHotkeysToSpec(def, mapping)
end

return mod
